
Comitas_hackathon_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c10  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001d40  08001d40  00002d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d84  08001d84  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d84  08001d84  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d84  08001d84  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d84  08001d84  00002d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d88  08001d88  00002d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001d8c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000006c  08001df8  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08001df8  000031f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020ab  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a98  00000000  00000000  00005140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00005bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a6  00000000  00000000  00005e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e27  00000000  00000000  00005ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003252  00000000  00000000  00017e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000595e5  00000000  00000000  0001b06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00074654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fe0  00000000  00000000  00074698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00075678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d28 	.word	0x08001d28

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08001d28 	.word	0x08001d28

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c2:	2afd      	cmp	r2, #253	@ 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	@ 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	@ 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_f2iz>:
 80004f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004fc:	d30f      	bcc.n	800051e <__aeabi_f2iz+0x2a>
 80004fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000502:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000506:	d90d      	bls.n	8000524 <__aeabi_f2iz+0x30>
 8000508:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800050c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000510:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000514:	fa23 f002 	lsr.w	r0, r3, r2
 8000518:	bf18      	it	ne
 800051a:	4240      	negne	r0, r0
 800051c:	4770      	bx	lr
 800051e:	f04f 0000 	mov.w	r0, #0
 8000522:	4770      	bx	lr
 8000524:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000528:	d101      	bne.n	800052e <__aeabi_f2iz+0x3a>
 800052a:	0242      	lsls	r2, r0, #9
 800052c:	d105      	bne.n	800053a <__aeabi_f2iz+0x46>
 800052e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000532:	bf08      	it	eq
 8000534:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000538:	4770      	bx	lr
 800053a:	f04f 0000 	mov.w	r0, #0
 800053e:	4770      	bx	lr

08000540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <init_GPIO_for_I2C>:


#include <TH02.h>

void init_GPIO_for_I2C() {
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <init_GPIO_for_I2C+0x30>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a09      	ldr	r2, [pc, #36]	@ (800057c <init_GPIO_for_I2C+0x30>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
	GPIOB->CRL |= GPIO_CRL_MODE6 | GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_CNF7;
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 8000562:	f043 434f 	orr.w	r3, r3, #3472883712	@ 0xcf000000
 8000566:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR6 | GPIO_ODR_ODR7;
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 800056e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000
 8000580:	40010c00 	.word	0x40010c00

08000584 <I2C_for_TH_init>:

void I2C_for_TH_init() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	init_GPIO_for_I2C();
 8000588:	f7ff ffe0 	bl	800054c <init_GPIO_for_I2C>

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <I2C_for_TH_init+0x54>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <I2C_for_TH_init+0x54>)
 8000592:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000596:	61d3      	str	r3, [r2, #28]

	//I2C2 clk 40 MHz
	I2C1->CR2 |= I2C_CR2_FREQ_3; //8
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <I2C_for_TH_init+0x58>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <I2C_for_TH_init+0x58>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	6053      	str	r3, [r2, #4]
	I2C1->CCR |= I2C_CCR_CCR;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <I2C_for_TH_init+0x58>)
 80005a6:	69db      	ldr	r3, [r3, #28]
 80005a8:	4a0c      	ldr	r2, [pc, #48]	@ (80005dc <I2C_for_TH_init+0x58>)
 80005aa:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80005ae:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80005b2:	61d3      	str	r3, [r2, #28]
	I2C1->TRISE = 0x0028;
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <I2C_for_TH_init+0x58>)
 80005b6:	2228      	movs	r2, #40	@ 0x28
 80005b8:	621a      	str	r2, [r3, #32]
	I2C1->CR1 |= I2C_CR1_PE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <I2C_for_TH_init+0x58>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <I2C_for_TH_init+0x58>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= I2C_CR1_ACK;
 80005c6:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <I2C_for_TH_init+0x58>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <I2C_for_TH_init+0x58>)
 80005cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d0:	6013      	str	r3, [r2, #0]
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40005400 	.word	0x40005400

080005e0 <I2C_TH_SendByte>:

void I2C_TH_SendByte(uint8_t addr, uint8_t byte) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
	while((I2C1->SR2 & I2C_SR2_BUSY) == I2C_SR2_BUSY) {};
 80005f0:	bf00      	nop
 80005f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <I2C_TH_SendByte+0x84>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d0f9      	beq.n	80005f2 <I2C_TH_SendByte+0x12>
	I2C1->CR1 |= I2C_CR1_START;
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <I2C_TH_SendByte+0x84>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a18      	ldr	r2, [pc, #96]	@ (8000664 <I2C_TH_SendByte+0x84>)
 8000604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000608:	6013      	str	r3, [r2, #0]
	while((I2C1->SR1 & I2C_SR1_SB) != I2C_SR1_SB) {};
 800060a:	bf00      	nop
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <I2C_TH_SendByte+0x84>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	2b01      	cmp	r3, #1
 8000616:	d1f9      	bne.n	800060c <I2C_TH_SendByte+0x2c>
	I2C1->DR= addr;
 8000618:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <I2C_TH_SendByte+0x84>)
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	6113      	str	r3, [r2, #16]
	while((I2C1->SR1 & I2C_SR1_ADDR) != I2C_SR1_ADDR) {};
 800061e:	bf00      	nop
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <I2C_TH_SendByte+0x84>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	2b02      	cmp	r3, #2
 800062a:	d1f9      	bne.n	8000620 <I2C_TH_SendByte+0x40>
	GPIOA->ODR |= GPIO_ODR_ODR11;
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <I2C_TH_SendByte+0x88>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <I2C_TH_SendByte+0x88>)
 8000632:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000636:	60d3      	str	r3, [r2, #12]
	I2C1->DR= byte;
 8000638:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <I2C_TH_SendByte+0x84>)
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	6113      	str	r3, [r2, #16]
	while((I2C1->SR1 & I2C_SR1_TXE) != I2C_SR1_TXE) {};
 800063e:	bf00      	nop
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <I2C_TH_SendByte+0x84>)
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000648:	2b80      	cmp	r3, #128	@ 0x80
 800064a:	d1f9      	bne.n	8000640 <I2C_TH_SendByte+0x60>
	I2C1->CR1 |= I2C_CR1_STOP;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <I2C_TH_SendByte+0x84>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	@ (8000664 <I2C_TH_SendByte+0x84>)
 8000652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40005400 	.word	0x40005400
 8000668:	40010800 	.word	0x40010800

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4906      	ldr	r1, [pc, #24]	@ (80006a0 <__NVIC_EnableIRQ+0x34>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	6039      	str	r1, [r7, #0]
 80006ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	db0a      	blt.n	80006ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	490c      	ldr	r1, [pc, #48]	@ (80006f0 <__NVIC_SetPriority+0x4c>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006cc:	e00a      	b.n	80006e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4908      	ldr	r1, [pc, #32]	@ (80006f4 <__NVIC_SetPriority+0x50>)
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 030f 	and.w	r3, r3, #15
 80006da:	3b04      	subs	r3, #4
 80006dc:	0112      	lsls	r2, r2, #4
 80006de:	b2d2      	uxtb	r2, r2
 80006e0:	440b      	add	r3, r1
 80006e2:	761a      	strb	r2, [r3, #24]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e100 	.word	0xe000e100
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <DMA1_Channel4_IRQHandler>:
#include "UART_for_PC.h"

uint8_t UART_tx_buf[] = "Comitas\r\n";


void DMA1_Channel4_IRQHandler(void) {
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF4;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <DMA1_Channel4_IRQHandler+0x24>)
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <DMA1_Channel4_IRQHandler+0x24>)
 8000702:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000706:	6053      	str	r3, [r2, #4]
	DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 8000708:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <DMA1_Channel4_IRQHandler+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <DMA1_Channel4_IRQHandler+0x28>)
 800070e:	f023 0301 	bic.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40020000 	.word	0x40020000
 8000720:	40020044 	.word	0x40020044

08000724 <init_GPIO_for_USART>:

void init_GPIO_for_USART() {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <init_GPIO_for_USART+0x24>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <init_GPIO_for_USART+0x24>)
 800072e:	f043 0304 	orr.w	r3, r3, #4
 8000732:	6193      	str	r3, [r2, #24]
	GPIOA->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <init_GPIO_for_USART+0x28>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <init_GPIO_for_USART+0x28>)
 800073a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800073e:	6053      	str	r3, [r2, #4]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	40021000 	.word	0x40021000
 800074c:	40010800 	.word	0x40010800

08000750 <init_USART>:

void init_USART() {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	init_GPIO_for_USART();
 8000754:	f7ff ffe6 	bl	8000724 <init_GPIO_for_USART>
	init_DMA_for_USART();
 8000758:	f000 f82a 	bl	80007b0 <init_DMA_for_USART>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <init_USART+0x50>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <init_USART+0x50>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000766:	6193      	str	r3, [r2, #24]
	USART1->CR1 |= USART_CR1_TE;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <init_USART+0x54>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <init_USART+0x54>)
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	60d3      	str	r3, [r2, #12]
	USART1->BRR = SystemCoreClock / 115200;
 8000774:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <init_USART+0x58>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <init_USART+0x54>)
 800077a:	490c      	ldr	r1, [pc, #48]	@ (80007ac <init_USART+0x5c>)
 800077c:	fba1 1303 	umull	r1, r3, r1, r3
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	6093      	str	r3, [r2, #8]
	USART1->CR3 |= USART_CR3_DMAT;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <init_USART+0x54>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <init_USART+0x54>)
 800078a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078e:	6153      	str	r3, [r2, #20]
	USART1->CR1 |= USART_CR1_UE;
 8000790:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <init_USART+0x54>)
 8000792:	68db      	ldr	r3, [r3, #12]
 8000794:	4a03      	ldr	r2, [pc, #12]	@ (80007a4 <init_USART+0x54>)
 8000796:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40013800 	.word	0x40013800
 80007a8:	20000000 	.word	0x20000000
 80007ac:	91a2b3c5 	.word	0x91a2b3c5

080007b0 <init_DMA_for_USART>:


void init_DMA_for_USART() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <init_DMA_for_USART+0x4c>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	4a10      	ldr	r2, [pc, #64]	@ (80007fc <init_DMA_for_USART+0x4c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6153      	str	r3, [r2, #20]
	//USART TX channel - 4
	DMA1_Channel4->CCR |= DMA_CCR_DIR | DMA_CCR_MINC;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <init_DMA_for_USART+0x50>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <init_DMA_for_USART+0x50>)
 80007c6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80007ca:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CMAR = (uint32_t)(&UART_tx_buf[0]);
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <init_DMA_for_USART+0x50>)
 80007ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000804 <init_DMA_for_USART+0x54>)
 80007d0:	60da      	str	r2, [r3, #12]
	DMA1_Channel4->CPAR = (uint32_t)(&(USART1->DR));
 80007d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <init_DMA_for_USART+0x50>)
 80007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <init_DMA_for_USART+0x58>)
 80007d6:	609a      	str	r2, [r3, #8]
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <init_DMA_for_USART+0x50>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a08      	ldr	r2, [pc, #32]	@ (8000800 <init_DMA_for_USART+0x50>)
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CNDTR = 0;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <init_DMA_for_USART+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]

	NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007ea:	200e      	movs	r0, #14
 80007ec:	f7ff ff3e 	bl	800066c <__NVIC_EnableIRQ>
	NVIC_SetPriority(DMA1_Channel4_IRQn, 3);
 80007f0:	2103      	movs	r1, #3
 80007f2:	200e      	movs	r0, #14
 80007f4:	f7ff ff56 	bl	80006a4 <__NVIC_SetPriority>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	40020044 	.word	0x40020044
 8000804:	20000004 	.word	0x20000004
 8000808:	40013804 	.word	0x40013804

0800080c <UART_send_data>:

void UART_send_data(uint8_t ch8) {
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	UART_tx_buf[0] = ch8;
 8000816:	4a13      	ldr	r2, [pc, #76]	@ (8000864 <UART_send_data+0x58>)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	7013      	strb	r3, [r2, #0]
	DMA1_Channel4->CMAR = (uint32_t)(&UART_tx_buf[0]);
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <UART_send_data+0x5c>)
 800081e:	4a11      	ldr	r2, [pc, #68]	@ (8000864 <UART_send_data+0x58>)
 8000820:	60da      	str	r2, [r3, #12]
	DMA1_Channel4->CNDTR = 1;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <UART_send_data+0x5c>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
	DMA1_Channel4->CCR |= DMA_CCR_EN;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <UART_send_data+0x5c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0e      	ldr	r2, [pc, #56]	@ (8000868 <UART_send_data+0x5c>)
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6013      	str	r3, [r2, #0]
	while(DMA1_Channel4->CCR & DMA_CCR_EN) {};
 8000834:	bf00      	nop
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <UART_send_data+0x5c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f9      	bne.n	8000836 <UART_send_data+0x2a>
	for(int i = 0; i < 100; i++);
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	e002      	b.n	800084e <UART_send_data+0x42>
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b63      	cmp	r3, #99	@ 0x63
 8000852:	ddf9      	ble.n	8000848 <UART_send_data+0x3c>
	flag = 0;
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <UART_send_data+0x60>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
}
 800085a:	bf00      	nop
 800085c:	3714      	adds	r7, #20
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	20000004 	.word	0x20000004
 8000868:	40020044 	.word	0x40020044
 800086c:	20000088 	.word	0x20000088

08000870 <__NVIC_EnableIRQ>:
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4906      	ldr	r1, [pc, #24]	@ (80008a4 <__NVIC_EnableIRQ+0x34>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	e000e100 	.word	0xe000e100

080008a8 <__NVIC_SetPriority>:
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	@ (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	@ (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <TIM2_IRQHandler>:
DS18B20_CMD ds18b20_cmd = TEMPERATURE_CONVERTING;
uint8_t ds_buff[9];
uint16_t temp;
float temperature = 0;

void TIM2_IRQHandler() {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000900:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000904:	691b      	ldr	r3, [r3, #16]
 8000906:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090a:	f023 0301 	bic.w	r3, r3, #1
 800090e:	6113      	str	r3, [r2, #16]
	//TIM2->CR1 &= ~TIM_CR1_CEN;
	flag = 1;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <TIM2_IRQHandler+0x24>)
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
	//PORT_LED->ODR ^= (1 << PIN_LED);
	//ds18b20_cmd = TEMPERATURE_READING;
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000088 	.word	0x20000088

08000924 <init_Gpio_for_ds>:

void init_Gpio_for_ds() {
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
	//PIN for Data line (DQ) of One-wire interface
	RCC->APB2ENR |= RCC_PORT_DS18B20;
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <init_Gpio_for_ds+0x54>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <init_Gpio_for_ds+0x54>)
 800092e:	f043 0304 	orr.w	r3, r3, #4
 8000932:	6193      	str	r3, [r2, #24]
	PORT_DS18B20->CRH |= GPIO_MODE_DS18B20;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <init_Gpio_for_ds+0x58>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	4a10      	ldr	r2, [pc, #64]	@ (800097c <init_Gpio_for_ds+0x58>)
 800093a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800093e:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->CRH |= GPIO_OPEN_DRAIN_DS18B20;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <init_Gpio_for_ds+0x58>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4a0d      	ldr	r2, [pc, #52]	@ (800097c <init_Gpio_for_ds+0x58>)
 8000946:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800094a:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <init_Gpio_for_ds+0x58>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <init_Gpio_for_ds+0x58>)
 8000952:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000956:	60d3      	str	r3, [r2, #12]

	//PIN for LED, which will signalize about error
	RCC->APB2ENR |= RCC_PORT_LED;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <init_Gpio_for_ds+0x54>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <init_Gpio_for_ds+0x54>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
	PORT_LED->CRH |= GPIO_MODE_LED;
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <init_Gpio_for_ds+0x58>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <init_Gpio_for_ds+0x58>)
 800096a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800096e:	6053      	str	r3, [r2, #4]
	//PORT_LED->ODR |= (1 << PIN_LED);
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	40021000 	.word	0x40021000
 800097c:	40010800 	.word	0x40010800

08000980 <init_tim1_for_us>:

void init_tim1_for_us() {
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <init_tim1_for_us+0x28>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <init_tim1_for_us+0x28>)
 800098a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800098e:	6193      	str	r3, [r2, #24]
	TIM1->ARR = 1000;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <init_tim1_for_us+0x2c>)
 8000992:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 8;
 8000998:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <init_tim1_for_us+0x2c>)
 800099a:	2208      	movs	r2, #8
 800099c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40012c00 	.word	0x40012c00

080009b0 <init_tim2_for_delay>:

void init_tim2_for_delay() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <init_tim2_for_delay+0x50>)
 80009b6:	69db      	ldr	r3, [r3, #28]
 80009b8:	4a11      	ldr	r2, [pc, #68]	@ (8000a00 <init_tim2_for_delay+0x50>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	61d3      	str	r3, [r2, #28]
	TIM2->ARR = 8000;
 80009c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009c4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80009c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 1000;
 80009ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->DIER |= TIM_DIER_UIE;
 80009d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80009e4:	201c      	movs	r0, #28
 80009e6:	f7ff ff43 	bl	8000870 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 80009ea:	2101      	movs	r1, #1
 80009ec:	201c      	movs	r0, #28
 80009ee:	f7ff ff5b 	bl	80008a8 <__NVIC_SetPriority>
	TIM2->CR1 = TIM_CR1_CEN;
 80009f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <ds_reset_pulse>:

void ds_reset_pulse()
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
	uint8_t result;
	//line should be in high state
	if((PORT_DS18B20->IDR & (1 << PIN_DS18B20)) == 0) {
 8000a0a:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <ds_reset_pulse+0x90>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d103      	bne.n	8000a1e <ds_reset_pulse+0x1a>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 8000a16:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <ds_reset_pulse+0x94>)
 8000a18:	2203      	movs	r2, #3
 8000a1a:	701a      	strb	r2, [r3, #0]
		return;
 8000a1c:	e036      	b.n	8000a8c <ds_reset_pulse+0x88>
	}
	TIM1->CNT = 0;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]
	//make the line go to low and wait in this state 480-960 us
	PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <ds_reset_pulse+0x90>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <ds_reset_pulse+0x90>)
 8000a36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a3a:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 480) {};
 8000a3c:	bf00      	nop
 8000a3e:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a42:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a46:	d3fa      	bcc.n	8000a3e <ds_reset_pulse+0x3a>
	//release the line (let go it to high) and wait to respond of DS18B20 after 15-60 us of wait
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <ds_reset_pulse+0x90>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <ds_reset_pulse+0x90>)
 8000a4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a52:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 520) {};
 8000a54:	bf00      	nop
 8000a56:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a5a:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8000a5e:	d3fa      	bcc.n	8000a56 <ds_reset_pulse+0x52>
	//read line in order to check answer from DS18B20
	result = PORT_DS18B20->IDR & (1 << PIN_DS18B20);
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <ds_reset_pulse+0x90>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
//	//wait minimum 480us from moment, where we release the line
	while(TIM1->CNT < 960) {};
 8000a68:	bf00      	nop
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6e:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000a72:	d3fa      	bcc.n	8000a6a <ds_reset_pulse+0x66>
//	//if line was in high state - there are no answer from DS18B20 :(
	if(result)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d002      	beq.n	8000a80 <ds_reset_pulse+0x7c>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <ds_reset_pulse+0x94>)
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	701a      	strb	r2, [r3, #0]
	TIM1->CR1 &= ~TIM_CR1_CEN;
 8000a80:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <ds_reset_pulse+0x98>)
 8000a86:	f023 0301 	bic.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40010800 	.word	0x40010800
 8000a98:	2000008c 	.word	0x2000008c
 8000a9c:	40012c00 	.word	0x40012c00

08000aa0 <ds_write_bit>:

void ds_write_bit(uint8_t bit)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]
	TIM1->CNT = 0;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <ds_write_bit+0x7c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <ds_write_bit+0x7c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	@ (8000b1c <ds_write_bit+0x7c>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	6013      	str	r3, [r2, #0]
	while(TIM1->CNT < 5) {};
 8000abc:	bf00      	nop
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <ds_write_bit+0x7c>)
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d9fb      	bls.n	8000abe <ds_write_bit+0x1e>
	//make the line go to low and wait in this state at least 1 us
    PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <ds_write_bit+0x80>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	4a15      	ldr	r2, [pc, #84]	@ (8000b20 <ds_write_bit+0x80>)
 8000acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ad0:	60d3      	str	r3, [r2, #12]
    while(TIM1->CNT < 10) {};
 8000ad2:	bf00      	nop
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <ds_write_bit+0x7c>)
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad8:	2b09      	cmp	r3, #9
 8000ada:	d9fb      	bls.n	8000ad4 <ds_write_bit+0x34>
    //set bit on line
    if(bit)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d005      	beq.n	8000aee <ds_write_bit+0x4e>
    	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <ds_write_bit+0x80>)
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b20 <ds_write_bit+0x80>)
 8000ae8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aec:	60d3      	str	r3, [r2, #12]
    //"write operation" with bit last 60-120us
    while(TIM1->CNT < 70) {};
 8000aee:	bf00      	nop
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <ds_write_bit+0x7c>)
 8000af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af4:	2b45      	cmp	r3, #69	@ 0x45
 8000af6:	d9fb      	bls.n	8000af0 <ds_write_bit+0x50>
    //release line again
    PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <ds_write_bit+0x80>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <ds_write_bit+0x80>)
 8000afe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b02:	60d3      	str	r3, [r2, #12]
    TIM1->CR1 &= ~TIM_CR1_CEN;
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <ds_write_bit+0x7c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <ds_write_bit+0x7c>)
 8000b0a:	f023 0301 	bic.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40012c00 	.word	0x40012c00
 8000b20:	40010800 	.word	0x40010800

08000b24 <ds_write_byte>:

void ds_write_byte(uint8_t byte)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8; i++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e00f      	b.n	8000b54 <ds_write_byte+0x30>
		ds_write_bit(byte & (1 << i));
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	2201      	movs	r2, #1
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	b25a      	sxtb	r2, r3
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	4013      	ands	r3, r2
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ffa9 	bl	8000aa0 <ds_write_bit>
	for(uint8_t i = 0; i < 8; i++)
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	3301      	adds	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	d9ec      	bls.n	8000b34 <ds_write_byte+0x10>
}
 8000b5a:	bf00      	nop
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <TIM_1sec_on>:
	for(uint8_t i = 0; i < 8; i++)
		result |= (ds_read_bit() << i);
	return result;
}

void TIM_1sec_on() {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8000b68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8000b70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <temperature_measurment_start>:

void temperature_measurment_start() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 8000b8c:	f7ff ff3a 	bl	8000a04 <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <temperature_measurment_start+0x28>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b03      	cmp	r3, #3
 8000b96:	d008      	beq.n	8000baa <temperature_measurment_start+0x22>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 8000b98:	20cc      	movs	r0, #204	@ 0xcc
 8000b9a:	f7ff ffc3 	bl	8000b24 <ds_write_byte>
	ds_write_byte(CONVERT_TEMP);
 8000b9e:	2044      	movs	r0, #68	@ 0x44
 8000ba0:	f7ff ffc0 	bl	8000b24 <ds_write_byte>
	TIM_1sec_on();
 8000ba4:	f7ff ffde 	bl	8000b64 <TIM_1sec_on>
 8000ba8:	e000      	b.n	8000bac <temperature_measurment_start+0x24>
		return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000008c 	.word	0x2000008c

08000bb4 <temprepature_measurment_read>:

void temprepature_measurment_read() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 8000bb8:	f7ff ff24 	bl	8000a04 <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <temprepature_measurment_read+0x68>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d029      	beq.n	8000c18 <temprepature_measurment_read+0x64>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 8000bc4:	20cc      	movs	r0, #204	@ 0xcc
 8000bc6:	f7ff ffad 	bl	8000b24 <ds_write_byte>
	ds_write_byte(READ_DATA);
 8000bca:	20be      	movs	r0, #190	@ 0xbe
 8000bcc:	f7ff ffaa 	bl	8000b24 <ds_write_byte>

	//for(int i = 0; i < 9; i++ )
	//	ds_buff[i] = ds_read_byte();

	//convert temperature
	temp = ds_buff[1];
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <temprepature_measurment_read+0x6c>)
 8000bd2:	785b      	ldrb	r3, [r3, #1]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <temprepature_measurment_read+0x70>)
 8000bd8:	801a      	strh	r2, [r3, #0]
	temp = temp << 8;
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <temprepature_measurment_read+0x70>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	021b      	lsls	r3, r3, #8
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b10      	ldr	r3, [pc, #64]	@ (8000c24 <temprepature_measurment_read+0x70>)
 8000be4:	801a      	strh	r2, [r3, #0]
	temp |= ds_buff[0];
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <temprepature_measurment_read+0x6c>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b0d      	ldr	r3, [pc, #52]	@ (8000c24 <temprepature_measurment_read+0x70>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <temprepature_measurment_read+0x70>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp * 0.0625;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <temprepature_measurment_read+0x70>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fc21 	bl	8000444 <__aeabi_ui2f>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fab1 	bl	8000170 <__aeabi_fmul>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <temprepature_measurment_read+0x74>)
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e000      	b.n	8000c1a <temprepature_measurment_read+0x66>
		return;
 8000c18:	bf00      	nop
}
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	20000090 	.word	0x20000090
 8000c24:	2000009a 	.word	0x2000009a
 8000c28:	2000009c 	.word	0x2000009c

08000c2c <init_DS18B20>:

void init_DS18B20() {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	init_Gpio_for_ds();
 8000c30:	f7ff fe78 	bl	8000924 <init_Gpio_for_ds>
	init_tim1_for_us();
 8000c34:	f7ff fea4 	bl	8000980 <init_tim1_for_us>
	init_tim2_for_delay();
 8000c38:	f7ff feba 	bl	80009b0 <init_tim2_for_delay>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <DS18B20_measure_temperature>:

void DS18B20_measure_temperature() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	switch(ds18b20_cmd) {
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <DS18B20_measure_temperature+0x64>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d824      	bhi.n	8000c96 <DS18B20_measure_temperature+0x56>
 8000c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c54 <DS18B20_measure_temperature+0x14>)
 8000c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c52:	bf00      	nop
 8000c54:	08000c65 	.word	0x08000c65
 8000c58:	08000c9f 	.word	0x08000c9f
 8000c5c:	08000c71 	.word	0x08000c71
 8000c60:	08000c89 	.word	0x08000c89
		case TEMPERATURE_CONVERTING:
			temperature_measurment_start();
 8000c64:	f7ff ff90 	bl	8000b88 <temperature_measurment_start>
			ds18b20_cmd = WAITING_1SEC;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <DS18B20_measure_temperature+0x64>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
			break;
 8000c6e:	e017      	b.n	8000ca0 <DS18B20_measure_temperature+0x60>
		case TEMPERATURE_READING:
			PORT_LED->ODR ^= (1 << PIN_LED);
 8000c70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <DS18B20_measure_temperature+0x68>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca8 <DS18B20_measure_temperature+0x68>)
 8000c76:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 8000c7a:	60d3      	str	r3, [r2, #12]
			temprepature_measurment_read();
 8000c7c:	f7ff ff9a 	bl	8000bb4 <temprepature_measurment_read>
			ds18b20_cmd = TEMPERATURE_CONVERTING;
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <DS18B20_measure_temperature+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
			break;
 8000c86:	e00b      	b.n	8000ca0 <DS18B20_measure_temperature+0x60>
		case ERROR_WITH_SENSOR:
			PORT_LED->ODR |= (1 << PIN_LED);
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <DS18B20_measure_temperature+0x68>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ca8 <DS18B20_measure_temperature+0x68>)
 8000c8e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c92:	60d3      	str	r3, [r2, #12]
			//ds18b20_cmd = TEMPERATURE_CONVERTING;
			break;
 8000c94:	e004      	b.n	8000ca0 <DS18B20_measure_temperature+0x60>
		case WAITING_1SEC:
		break;
		default: ds18b20_cmd = TEMPERATURE_CONVERTING;
 8000c96:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <DS18B20_measure_temperature+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
			break;
 8000c9c:	e000      	b.n	8000ca0 <DS18B20_measure_temperature+0x60>
		break;
 8000c9e:	bf00      	nop
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000008c 	.word	0x2000008c
 8000ca8:	40010800 	.word	0x40010800

08000cac <__io_putchar>:
#include "ds18b20.h"
#include "TH02.h"
#include "UART_for_PC.h"
#include <stdio.h>

int __io_putchar(int ch) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	uint8_t ch8 = ch & 0xFF;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
	UART_send_data(ch8);
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fda6 	bl	800080c <UART_send_data>
	return ch;
 8000cc0:	687b      	ldr	r3, [r7, #4]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <main>:

int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	init_DS18B20();
 8000cd0:	f7ff ffac 	bl	8000c2c <init_DS18B20>
	init_USART();
 8000cd4:	f7ff fd3c 	bl	8000750 <init_USART>
	flag = 0;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <main+0x48>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
	TIM_1sec_on();
 8000cde:	f7ff ff41 	bl	8000b64 <TIM_1sec_on>
	I2C_for_TH_init();
 8000ce2:	f7ff fc4f 	bl	8000584 <I2C_for_TH_init>
	I2C_TH_SendByte(0x40, 0x03);
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	2040      	movs	r0, #64	@ 0x40
 8000cea:	f7ff fc79 	bl	80005e0 <I2C_TH_SendByte>
	//uint8_t data[2] = {0x03, 0x11 };
	//I2C_TH_Send_NBytes(0x40, &data[0], 2);
  while (1)
  {
	  DS18B20_measure_temperature();
 8000cee:	f7ff ffa7 	bl	8000c40 <DS18B20_measure_temperature>
	  if(flag == 1)
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <main+0x48>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d1f9      	bne.n	8000cee <main+0x22>
		  printf(" temp: %d C\r\n", (int8_t)(temperature));
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <main+0x4c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fbf8 	bl	80004f4 <__aeabi_f2iz>
 8000d04:	4603      	mov	r3, r0
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <main+0x50>)
 8000d0c:	f000 f994 	bl	8001038 <iprintf>
	  DS18B20_measure_temperature();
 8000d10:	e7ed      	b.n	8000cee <main+0x22>
 8000d12:	bf00      	nop
 8000d14:	20000088 	.word	0x20000088
 8000d18:	2000009c 	.word	0x2000009c
 8000d1c:	08001d40 	.word	0x08001d40

08000d20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e00a      	b.n	8000d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d32:	f3af 8000 	nop.w
 8000d36:	4601      	mov	r1, r0
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf0      	blt.n	8000d32 <_read+0x12>
  }

  return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e009      	b.n	8000d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff99 	bl	8000cac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf1      	blt.n	8000d6c <_write+0x12>
  }
  return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_close>:

int _close(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db8:	605a      	str	r2, [r3, #4]
  return 0;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <_isatty>:

int _isatty(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b085      	sub	sp, #20
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	60f8      	str	r0, [r7, #12]
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
	...

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	@ (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	@ (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f000 f9ac 	bl	8001180 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20002800 	.word	0x20002800
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200000a0 	.word	0x200000a0
 8000e5c:	200001f0 	.word	0x200001f0

08000e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e64:	f7ff fb6c 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e8e:	f000 f97d 	bl	800118c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff ff1b 	bl	8000ccc <main>

08000e96 <LoopForever>:

LoopForever:
  b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   r0, =_estack
 8000e98:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ea4:	08001d8c 	.word	0x08001d8c
  ldr r2, =_sbss
 8000ea8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000eac:	200001f0 	.word	0x200001f0

08000eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>
	...

08000eb4 <std>:
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	b510      	push	{r4, lr}
 8000eb8:	4604      	mov	r4, r0
 8000eba:	e9c0 3300 	strd	r3, r3, [r0]
 8000ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ec2:	6083      	str	r3, [r0, #8]
 8000ec4:	8181      	strh	r1, [r0, #12]
 8000ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8000ec8:	81c2      	strh	r2, [r0, #14]
 8000eca:	6183      	str	r3, [r0, #24]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2208      	movs	r2, #8
 8000ed0:	305c      	adds	r0, #92	@ 0x5c
 8000ed2:	f000 f906 	bl	80010e2 <memset>
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <std+0x58>)
 8000ed8:	6224      	str	r4, [r4, #32]
 8000eda:	6263      	str	r3, [r4, #36]	@ 0x24
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <std+0x5c>)
 8000ede:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <std+0x60>)
 8000ee2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <std+0x64>)
 8000ee6:	6323      	str	r3, [r4, #48]	@ 0x30
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <std+0x68>)
 8000eea:	429c      	cmp	r4, r3
 8000eec:	d006      	beq.n	8000efc <std+0x48>
 8000eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000ef2:	4294      	cmp	r4, r2
 8000ef4:	d002      	beq.n	8000efc <std+0x48>
 8000ef6:	33d0      	adds	r3, #208	@ 0xd0
 8000ef8:	429c      	cmp	r4, r3
 8000efa:	d105      	bne.n	8000f08 <std+0x54>
 8000efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f04:	f000 b966 	b.w	80011d4 <__retarget_lock_init_recursive>
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	bf00      	nop
 8000f0c:	0800105d 	.word	0x0800105d
 8000f10:	0800107f 	.word	0x0800107f
 8000f14:	080010b7 	.word	0x080010b7
 8000f18:	080010db 	.word	0x080010db
 8000f1c:	200000a4 	.word	0x200000a4

08000f20 <stdio_exit_handler>:
 8000f20:	4a02      	ldr	r2, [pc, #8]	@ (8000f2c <stdio_exit_handler+0xc>)
 8000f22:	4903      	ldr	r1, [pc, #12]	@ (8000f30 <stdio_exit_handler+0x10>)
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <stdio_exit_handler+0x14>)
 8000f26:	f000 b869 	b.w	8000ffc <_fwalk_sglue>
 8000f2a:	bf00      	nop
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	08001a6d 	.word	0x08001a6d
 8000f34:	20000020 	.word	0x20000020

08000f38 <cleanup_stdio>:
 8000f38:	6841      	ldr	r1, [r0, #4]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <cleanup_stdio+0x34>)
 8000f3c:	b510      	push	{r4, lr}
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	4604      	mov	r4, r0
 8000f42:	d001      	beq.n	8000f48 <cleanup_stdio+0x10>
 8000f44:	f000 fd92 	bl	8001a6c <_fflush_r>
 8000f48:	68a1      	ldr	r1, [r4, #8]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <cleanup_stdio+0x38>)
 8000f4c:	4299      	cmp	r1, r3
 8000f4e:	d002      	beq.n	8000f56 <cleanup_stdio+0x1e>
 8000f50:	4620      	mov	r0, r4
 8000f52:	f000 fd8b 	bl	8001a6c <_fflush_r>
 8000f56:	68e1      	ldr	r1, [r4, #12]
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <cleanup_stdio+0x3c>)
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d004      	beq.n	8000f68 <cleanup_stdio+0x30>
 8000f5e:	4620      	mov	r0, r4
 8000f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f64:	f000 bd82 	b.w	8001a6c <_fflush_r>
 8000f68:	bd10      	pop	{r4, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000a4 	.word	0x200000a4
 8000f70:	2000010c 	.word	0x2000010c
 8000f74:	20000174 	.word	0x20000174

08000f78 <global_stdio_init.part.0>:
 8000f78:	b510      	push	{r4, lr}
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <global_stdio_init.part.0+0x30>)
 8000f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8000fac <global_stdio_init.part.0+0x34>)
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <global_stdio_init.part.0+0x38>)
 8000f80:	4620      	mov	r0, r4
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	2104      	movs	r1, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	f7ff ff94 	bl	8000eb4 <std>
 8000f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000f90:	2201      	movs	r2, #1
 8000f92:	2109      	movs	r1, #9
 8000f94:	f7ff ff8e 	bl	8000eb4 <std>
 8000f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fa2:	2112      	movs	r1, #18
 8000fa4:	f7ff bf86 	b.w	8000eb4 <std>
 8000fa8:	200001dc 	.word	0x200001dc
 8000fac:	200000a4 	.word	0x200000a4
 8000fb0:	08000f21 	.word	0x08000f21

08000fb4 <__sfp_lock_acquire>:
 8000fb4:	4801      	ldr	r0, [pc, #4]	@ (8000fbc <__sfp_lock_acquire+0x8>)
 8000fb6:	f000 b90e 	b.w	80011d6 <__retarget_lock_acquire_recursive>
 8000fba:	bf00      	nop
 8000fbc:	200001e5 	.word	0x200001e5

08000fc0 <__sfp_lock_release>:
 8000fc0:	4801      	ldr	r0, [pc, #4]	@ (8000fc8 <__sfp_lock_release+0x8>)
 8000fc2:	f000 b909 	b.w	80011d8 <__retarget_lock_release_recursive>
 8000fc6:	bf00      	nop
 8000fc8:	200001e5 	.word	0x200001e5

08000fcc <__sinit>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	4604      	mov	r4, r0
 8000fd0:	f7ff fff0 	bl	8000fb4 <__sfp_lock_acquire>
 8000fd4:	6a23      	ldr	r3, [r4, #32]
 8000fd6:	b11b      	cbz	r3, 8000fe0 <__sinit+0x14>
 8000fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fdc:	f7ff bff0 	b.w	8000fc0 <__sfp_lock_release>
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__sinit+0x28>)
 8000fe2:	6223      	str	r3, [r4, #32]
 8000fe4:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <__sinit+0x2c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f5      	bne.n	8000fd8 <__sinit+0xc>
 8000fec:	f7ff ffc4 	bl	8000f78 <global_stdio_init.part.0>
 8000ff0:	e7f2      	b.n	8000fd8 <__sinit+0xc>
 8000ff2:	bf00      	nop
 8000ff4:	08000f39 	.word	0x08000f39
 8000ff8:	200001dc 	.word	0x200001dc

08000ffc <_fwalk_sglue>:
 8000ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001000:	4607      	mov	r7, r0
 8001002:	4688      	mov	r8, r1
 8001004:	4614      	mov	r4, r2
 8001006:	2600      	movs	r6, #0
 8001008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800100c:	f1b9 0901 	subs.w	r9, r9, #1
 8001010:	d505      	bpl.n	800101e <_fwalk_sglue+0x22>
 8001012:	6824      	ldr	r4, [r4, #0]
 8001014:	2c00      	cmp	r4, #0
 8001016:	d1f7      	bne.n	8001008 <_fwalk_sglue+0xc>
 8001018:	4630      	mov	r0, r6
 800101a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800101e:	89ab      	ldrh	r3, [r5, #12]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d907      	bls.n	8001034 <_fwalk_sglue+0x38>
 8001024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001028:	3301      	adds	r3, #1
 800102a:	d003      	beq.n	8001034 <_fwalk_sglue+0x38>
 800102c:	4629      	mov	r1, r5
 800102e:	4638      	mov	r0, r7
 8001030:	47c0      	blx	r8
 8001032:	4306      	orrs	r6, r0
 8001034:	3568      	adds	r5, #104	@ 0x68
 8001036:	e7e9      	b.n	800100c <_fwalk_sglue+0x10>

08001038 <iprintf>:
 8001038:	b40f      	push	{r0, r1, r2, r3}
 800103a:	b507      	push	{r0, r1, r2, lr}
 800103c:	4906      	ldr	r1, [pc, #24]	@ (8001058 <iprintf+0x20>)
 800103e:	ab04      	add	r3, sp, #16
 8001040:	6808      	ldr	r0, [r1, #0]
 8001042:	f853 2b04 	ldr.w	r2, [r3], #4
 8001046:	6881      	ldr	r1, [r0, #8]
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f000 f9e5 	bl	8001418 <_vfiprintf_r>
 800104e:	b003      	add	sp, #12
 8001050:	f85d eb04 	ldr.w	lr, [sp], #4
 8001054:	b004      	add	sp, #16
 8001056:	4770      	bx	lr
 8001058:	2000001c 	.word	0x2000001c

0800105c <__sread>:
 800105c:	b510      	push	{r4, lr}
 800105e:	460c      	mov	r4, r1
 8001060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001064:	f000 f868 	bl	8001138 <_read_r>
 8001068:	2800      	cmp	r0, #0
 800106a:	bfab      	itete	ge
 800106c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800106e:	89a3      	ldrhlt	r3, [r4, #12]
 8001070:	181b      	addge	r3, r3, r0
 8001072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001076:	bfac      	ite	ge
 8001078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800107a:	81a3      	strhlt	r3, [r4, #12]
 800107c:	bd10      	pop	{r4, pc}

0800107e <__swrite>:
 800107e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001082:	461f      	mov	r7, r3
 8001084:	898b      	ldrh	r3, [r1, #12]
 8001086:	4605      	mov	r5, r0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	460c      	mov	r4, r1
 800108c:	4616      	mov	r6, r2
 800108e:	d505      	bpl.n	800109c <__swrite+0x1e>
 8001090:	2302      	movs	r3, #2
 8001092:	2200      	movs	r2, #0
 8001094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001098:	f000 f83c 	bl	8001114 <_lseek_r>
 800109c:	89a3      	ldrh	r3, [r4, #12]
 800109e:	4632      	mov	r2, r6
 80010a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010a4:	81a3      	strh	r3, [r4, #12]
 80010a6:	4628      	mov	r0, r5
 80010a8:	463b      	mov	r3, r7
 80010aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010b2:	f000 b853 	b.w	800115c <_write_r>

080010b6 <__sseek>:
 80010b6:	b510      	push	{r4, lr}
 80010b8:	460c      	mov	r4, r1
 80010ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010be:	f000 f829 	bl	8001114 <_lseek_r>
 80010c2:	1c43      	adds	r3, r0, #1
 80010c4:	89a3      	ldrh	r3, [r4, #12]
 80010c6:	bf15      	itete	ne
 80010c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010d2:	81a3      	strheq	r3, [r4, #12]
 80010d4:	bf18      	it	ne
 80010d6:	81a3      	strhne	r3, [r4, #12]
 80010d8:	bd10      	pop	{r4, pc}

080010da <__sclose>:
 80010da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010de:	f000 b809 	b.w	80010f4 <_close_r>

080010e2 <memset>:
 80010e2:	4603      	mov	r3, r0
 80010e4:	4402      	add	r2, r0
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d100      	bne.n	80010ec <memset+0xa>
 80010ea:	4770      	bx	lr
 80010ec:	f803 1b01 	strb.w	r1, [r3], #1
 80010f0:	e7f9      	b.n	80010e6 <memset+0x4>
	...

080010f4 <_close_r>:
 80010f4:	b538      	push	{r3, r4, r5, lr}
 80010f6:	2300      	movs	r3, #0
 80010f8:	4d05      	ldr	r5, [pc, #20]	@ (8001110 <_close_r+0x1c>)
 80010fa:	4604      	mov	r4, r0
 80010fc:	4608      	mov	r0, r1
 80010fe:	602b      	str	r3, [r5, #0]
 8001100:	f7ff fe47 	bl	8000d92 <_close>
 8001104:	1c43      	adds	r3, r0, #1
 8001106:	d102      	bne.n	800110e <_close_r+0x1a>
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	b103      	cbz	r3, 800110e <_close_r+0x1a>
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	bd38      	pop	{r3, r4, r5, pc}
 8001110:	200001e0 	.word	0x200001e0

08001114 <_lseek_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4604      	mov	r4, r0
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	2200      	movs	r2, #0
 800111e:	4d05      	ldr	r5, [pc, #20]	@ (8001134 <_lseek_r+0x20>)
 8001120:	602a      	str	r2, [r5, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	f7ff fe59 	bl	8000dda <_lseek>
 8001128:	1c43      	adds	r3, r0, #1
 800112a:	d102      	bne.n	8001132 <_lseek_r+0x1e>
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	b103      	cbz	r3, 8001132 <_lseek_r+0x1e>
 8001130:	6023      	str	r3, [r4, #0]
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	200001e0 	.word	0x200001e0

08001138 <_read_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	4604      	mov	r4, r0
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	2200      	movs	r2, #0
 8001142:	4d05      	ldr	r5, [pc, #20]	@ (8001158 <_read_r+0x20>)
 8001144:	602a      	str	r2, [r5, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	f7ff fdea 	bl	8000d20 <_read>
 800114c:	1c43      	adds	r3, r0, #1
 800114e:	d102      	bne.n	8001156 <_read_r+0x1e>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	b103      	cbz	r3, 8001156 <_read_r+0x1e>
 8001154:	6023      	str	r3, [r4, #0]
 8001156:	bd38      	pop	{r3, r4, r5, pc}
 8001158:	200001e0 	.word	0x200001e0

0800115c <_write_r>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	4604      	mov	r4, r0
 8001160:	4608      	mov	r0, r1
 8001162:	4611      	mov	r1, r2
 8001164:	2200      	movs	r2, #0
 8001166:	4d05      	ldr	r5, [pc, #20]	@ (800117c <_write_r+0x20>)
 8001168:	602a      	str	r2, [r5, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	f7ff fdf5 	bl	8000d5a <_write>
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	d102      	bne.n	800117a <_write_r+0x1e>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	b103      	cbz	r3, 800117a <_write_r+0x1e>
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	bd38      	pop	{r3, r4, r5, pc}
 800117c:	200001e0 	.word	0x200001e0

08001180 <__errno>:
 8001180:	4b01      	ldr	r3, [pc, #4]	@ (8001188 <__errno+0x8>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	2000001c 	.word	0x2000001c

0800118c <__libc_init_array>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	2600      	movs	r6, #0
 8001190:	4d0c      	ldr	r5, [pc, #48]	@ (80011c4 <__libc_init_array+0x38>)
 8001192:	4c0d      	ldr	r4, [pc, #52]	@ (80011c8 <__libc_init_array+0x3c>)
 8001194:	1b64      	subs	r4, r4, r5
 8001196:	10a4      	asrs	r4, r4, #2
 8001198:	42a6      	cmp	r6, r4
 800119a:	d109      	bne.n	80011b0 <__libc_init_array+0x24>
 800119c:	f000 fdc4 	bl	8001d28 <_init>
 80011a0:	2600      	movs	r6, #0
 80011a2:	4d0a      	ldr	r5, [pc, #40]	@ (80011cc <__libc_init_array+0x40>)
 80011a4:	4c0a      	ldr	r4, [pc, #40]	@ (80011d0 <__libc_init_array+0x44>)
 80011a6:	1b64      	subs	r4, r4, r5
 80011a8:	10a4      	asrs	r4, r4, #2
 80011aa:	42a6      	cmp	r6, r4
 80011ac:	d105      	bne.n	80011ba <__libc_init_array+0x2e>
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b4:	4798      	blx	r3
 80011b6:	3601      	adds	r6, #1
 80011b8:	e7ee      	b.n	8001198 <__libc_init_array+0xc>
 80011ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80011be:	4798      	blx	r3
 80011c0:	3601      	adds	r6, #1
 80011c2:	e7f2      	b.n	80011aa <__libc_init_array+0x1e>
 80011c4:	08001d84 	.word	0x08001d84
 80011c8:	08001d84 	.word	0x08001d84
 80011cc:	08001d84 	.word	0x08001d84
 80011d0:	08001d88 	.word	0x08001d88

080011d4 <__retarget_lock_init_recursive>:
 80011d4:	4770      	bx	lr

080011d6 <__retarget_lock_acquire_recursive>:
 80011d6:	4770      	bx	lr

080011d8 <__retarget_lock_release_recursive>:
 80011d8:	4770      	bx	lr
	...

080011dc <_free_r>:
 80011dc:	b538      	push	{r3, r4, r5, lr}
 80011de:	4605      	mov	r5, r0
 80011e0:	2900      	cmp	r1, #0
 80011e2:	d040      	beq.n	8001266 <_free_r+0x8a>
 80011e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011e8:	1f0c      	subs	r4, r1, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	bfb8      	it	lt
 80011ee:	18e4      	addlt	r4, r4, r3
 80011f0:	f000 f8de 	bl	80013b0 <__malloc_lock>
 80011f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <_free_r+0x8c>)
 80011f6:	6813      	ldr	r3, [r2, #0]
 80011f8:	b933      	cbnz	r3, 8001208 <_free_r+0x2c>
 80011fa:	6063      	str	r3, [r4, #4]
 80011fc:	6014      	str	r4, [r2, #0]
 80011fe:	4628      	mov	r0, r5
 8001200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001204:	f000 b8da 	b.w	80013bc <__malloc_unlock>
 8001208:	42a3      	cmp	r3, r4
 800120a:	d908      	bls.n	800121e <_free_r+0x42>
 800120c:	6820      	ldr	r0, [r4, #0]
 800120e:	1821      	adds	r1, r4, r0
 8001210:	428b      	cmp	r3, r1
 8001212:	bf01      	itttt	eq
 8001214:	6819      	ldreq	r1, [r3, #0]
 8001216:	685b      	ldreq	r3, [r3, #4]
 8001218:	1809      	addeq	r1, r1, r0
 800121a:	6021      	streq	r1, [r4, #0]
 800121c:	e7ed      	b.n	80011fa <_free_r+0x1e>
 800121e:	461a      	mov	r2, r3
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	b10b      	cbz	r3, 8001228 <_free_r+0x4c>
 8001224:	42a3      	cmp	r3, r4
 8001226:	d9fa      	bls.n	800121e <_free_r+0x42>
 8001228:	6811      	ldr	r1, [r2, #0]
 800122a:	1850      	adds	r0, r2, r1
 800122c:	42a0      	cmp	r0, r4
 800122e:	d10b      	bne.n	8001248 <_free_r+0x6c>
 8001230:	6820      	ldr	r0, [r4, #0]
 8001232:	4401      	add	r1, r0
 8001234:	1850      	adds	r0, r2, r1
 8001236:	4283      	cmp	r3, r0
 8001238:	6011      	str	r1, [r2, #0]
 800123a:	d1e0      	bne.n	80011fe <_free_r+0x22>
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	4408      	add	r0, r1
 8001242:	6010      	str	r0, [r2, #0]
 8001244:	6053      	str	r3, [r2, #4]
 8001246:	e7da      	b.n	80011fe <_free_r+0x22>
 8001248:	d902      	bls.n	8001250 <_free_r+0x74>
 800124a:	230c      	movs	r3, #12
 800124c:	602b      	str	r3, [r5, #0]
 800124e:	e7d6      	b.n	80011fe <_free_r+0x22>
 8001250:	6820      	ldr	r0, [r4, #0]
 8001252:	1821      	adds	r1, r4, r0
 8001254:	428b      	cmp	r3, r1
 8001256:	bf01      	itttt	eq
 8001258:	6819      	ldreq	r1, [r3, #0]
 800125a:	685b      	ldreq	r3, [r3, #4]
 800125c:	1809      	addeq	r1, r1, r0
 800125e:	6021      	streq	r1, [r4, #0]
 8001260:	6063      	str	r3, [r4, #4]
 8001262:	6054      	str	r4, [r2, #4]
 8001264:	e7cb      	b.n	80011fe <_free_r+0x22>
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200001ec 	.word	0x200001ec

0800126c <sbrk_aligned>:
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	4e0f      	ldr	r6, [pc, #60]	@ (80012ac <sbrk_aligned+0x40>)
 8001270:	460c      	mov	r4, r1
 8001272:	6831      	ldr	r1, [r6, #0]
 8001274:	4605      	mov	r5, r0
 8001276:	b911      	cbnz	r1, 800127e <sbrk_aligned+0x12>
 8001278:	f000 fcb4 	bl	8001be4 <_sbrk_r>
 800127c:	6030      	str	r0, [r6, #0]
 800127e:	4621      	mov	r1, r4
 8001280:	4628      	mov	r0, r5
 8001282:	f000 fcaf 	bl	8001be4 <_sbrk_r>
 8001286:	1c43      	adds	r3, r0, #1
 8001288:	d103      	bne.n	8001292 <sbrk_aligned+0x26>
 800128a:	f04f 34ff 	mov.w	r4, #4294967295
 800128e:	4620      	mov	r0, r4
 8001290:	bd70      	pop	{r4, r5, r6, pc}
 8001292:	1cc4      	adds	r4, r0, #3
 8001294:	f024 0403 	bic.w	r4, r4, #3
 8001298:	42a0      	cmp	r0, r4
 800129a:	d0f8      	beq.n	800128e <sbrk_aligned+0x22>
 800129c:	1a21      	subs	r1, r4, r0
 800129e:	4628      	mov	r0, r5
 80012a0:	f000 fca0 	bl	8001be4 <_sbrk_r>
 80012a4:	3001      	adds	r0, #1
 80012a6:	d1f2      	bne.n	800128e <sbrk_aligned+0x22>
 80012a8:	e7ef      	b.n	800128a <sbrk_aligned+0x1e>
 80012aa:	bf00      	nop
 80012ac:	200001e8 	.word	0x200001e8

080012b0 <_malloc_r>:
 80012b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012b4:	1ccd      	adds	r5, r1, #3
 80012b6:	f025 0503 	bic.w	r5, r5, #3
 80012ba:	3508      	adds	r5, #8
 80012bc:	2d0c      	cmp	r5, #12
 80012be:	bf38      	it	cc
 80012c0:	250c      	movcc	r5, #12
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	4606      	mov	r6, r0
 80012c6:	db01      	blt.n	80012cc <_malloc_r+0x1c>
 80012c8:	42a9      	cmp	r1, r5
 80012ca:	d904      	bls.n	80012d6 <_malloc_r+0x26>
 80012cc:	230c      	movs	r3, #12
 80012ce:	6033      	str	r3, [r6, #0]
 80012d0:	2000      	movs	r0, #0
 80012d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013ac <_malloc_r+0xfc>
 80012da:	f000 f869 	bl	80013b0 <__malloc_lock>
 80012de:	f8d8 3000 	ldr.w	r3, [r8]
 80012e2:	461c      	mov	r4, r3
 80012e4:	bb44      	cbnz	r4, 8001338 <_malloc_r+0x88>
 80012e6:	4629      	mov	r1, r5
 80012e8:	4630      	mov	r0, r6
 80012ea:	f7ff ffbf 	bl	800126c <sbrk_aligned>
 80012ee:	1c43      	adds	r3, r0, #1
 80012f0:	4604      	mov	r4, r0
 80012f2:	d158      	bne.n	80013a6 <_malloc_r+0xf6>
 80012f4:	f8d8 4000 	ldr.w	r4, [r8]
 80012f8:	4627      	mov	r7, r4
 80012fa:	2f00      	cmp	r7, #0
 80012fc:	d143      	bne.n	8001386 <_malloc_r+0xd6>
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d04b      	beq.n	800139a <_malloc_r+0xea>
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	4639      	mov	r1, r7
 8001306:	4630      	mov	r0, r6
 8001308:	eb04 0903 	add.w	r9, r4, r3
 800130c:	f000 fc6a 	bl	8001be4 <_sbrk_r>
 8001310:	4581      	cmp	r9, r0
 8001312:	d142      	bne.n	800139a <_malloc_r+0xea>
 8001314:	6821      	ldr	r1, [r4, #0]
 8001316:	4630      	mov	r0, r6
 8001318:	1a6d      	subs	r5, r5, r1
 800131a:	4629      	mov	r1, r5
 800131c:	f7ff ffa6 	bl	800126c <sbrk_aligned>
 8001320:	3001      	adds	r0, #1
 8001322:	d03a      	beq.n	800139a <_malloc_r+0xea>
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	442b      	add	r3, r5
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	f8d8 3000 	ldr.w	r3, [r8]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	bb62      	cbnz	r2, 800138c <_malloc_r+0xdc>
 8001332:	f8c8 7000 	str.w	r7, [r8]
 8001336:	e00f      	b.n	8001358 <_malloc_r+0xa8>
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	1b52      	subs	r2, r2, r5
 800133c:	d420      	bmi.n	8001380 <_malloc_r+0xd0>
 800133e:	2a0b      	cmp	r2, #11
 8001340:	d917      	bls.n	8001372 <_malloc_r+0xc2>
 8001342:	1961      	adds	r1, r4, r5
 8001344:	42a3      	cmp	r3, r4
 8001346:	6025      	str	r5, [r4, #0]
 8001348:	bf18      	it	ne
 800134a:	6059      	strne	r1, [r3, #4]
 800134c:	6863      	ldr	r3, [r4, #4]
 800134e:	bf08      	it	eq
 8001350:	f8c8 1000 	streq.w	r1, [r8]
 8001354:	5162      	str	r2, [r4, r5]
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	4630      	mov	r0, r6
 800135a:	f000 f82f 	bl	80013bc <__malloc_unlock>
 800135e:	f104 000b 	add.w	r0, r4, #11
 8001362:	1d23      	adds	r3, r4, #4
 8001364:	f020 0007 	bic.w	r0, r0, #7
 8001368:	1ac2      	subs	r2, r0, r3
 800136a:	bf1c      	itt	ne
 800136c:	1a1b      	subne	r3, r3, r0
 800136e:	50a3      	strne	r3, [r4, r2]
 8001370:	e7af      	b.n	80012d2 <_malloc_r+0x22>
 8001372:	6862      	ldr	r2, [r4, #4]
 8001374:	42a3      	cmp	r3, r4
 8001376:	bf0c      	ite	eq
 8001378:	f8c8 2000 	streq.w	r2, [r8]
 800137c:	605a      	strne	r2, [r3, #4]
 800137e:	e7eb      	b.n	8001358 <_malloc_r+0xa8>
 8001380:	4623      	mov	r3, r4
 8001382:	6864      	ldr	r4, [r4, #4]
 8001384:	e7ae      	b.n	80012e4 <_malloc_r+0x34>
 8001386:	463c      	mov	r4, r7
 8001388:	687f      	ldr	r7, [r7, #4]
 800138a:	e7b6      	b.n	80012fa <_malloc_r+0x4a>
 800138c:	461a      	mov	r2, r3
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	42a3      	cmp	r3, r4
 8001392:	d1fb      	bne.n	800138c <_malloc_r+0xdc>
 8001394:	2300      	movs	r3, #0
 8001396:	6053      	str	r3, [r2, #4]
 8001398:	e7de      	b.n	8001358 <_malloc_r+0xa8>
 800139a:	230c      	movs	r3, #12
 800139c:	4630      	mov	r0, r6
 800139e:	6033      	str	r3, [r6, #0]
 80013a0:	f000 f80c 	bl	80013bc <__malloc_unlock>
 80013a4:	e794      	b.n	80012d0 <_malloc_r+0x20>
 80013a6:	6005      	str	r5, [r0, #0]
 80013a8:	e7d6      	b.n	8001358 <_malloc_r+0xa8>
 80013aa:	bf00      	nop
 80013ac:	200001ec 	.word	0x200001ec

080013b0 <__malloc_lock>:
 80013b0:	4801      	ldr	r0, [pc, #4]	@ (80013b8 <__malloc_lock+0x8>)
 80013b2:	f7ff bf10 	b.w	80011d6 <__retarget_lock_acquire_recursive>
 80013b6:	bf00      	nop
 80013b8:	200001e4 	.word	0x200001e4

080013bc <__malloc_unlock>:
 80013bc:	4801      	ldr	r0, [pc, #4]	@ (80013c4 <__malloc_unlock+0x8>)
 80013be:	f7ff bf0b 	b.w	80011d8 <__retarget_lock_release_recursive>
 80013c2:	bf00      	nop
 80013c4:	200001e4 	.word	0x200001e4

080013c8 <__sfputc_r>:
 80013c8:	6893      	ldr	r3, [r2, #8]
 80013ca:	b410      	push	{r4}
 80013cc:	3b01      	subs	r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	6093      	str	r3, [r2, #8]
 80013d2:	da07      	bge.n	80013e4 <__sfputc_r+0x1c>
 80013d4:	6994      	ldr	r4, [r2, #24]
 80013d6:	42a3      	cmp	r3, r4
 80013d8:	db01      	blt.n	80013de <__sfputc_r+0x16>
 80013da:	290a      	cmp	r1, #10
 80013dc:	d102      	bne.n	80013e4 <__sfputc_r+0x1c>
 80013de:	bc10      	pop	{r4}
 80013e0:	f000 bb6c 	b.w	8001abc <__swbuf_r>
 80013e4:	6813      	ldr	r3, [r2, #0]
 80013e6:	1c58      	adds	r0, r3, #1
 80013e8:	6010      	str	r0, [r2, #0]
 80013ea:	7019      	strb	r1, [r3, #0]
 80013ec:	4608      	mov	r0, r1
 80013ee:	bc10      	pop	{r4}
 80013f0:	4770      	bx	lr

080013f2 <__sfputs_r>:
 80013f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f4:	4606      	mov	r6, r0
 80013f6:	460f      	mov	r7, r1
 80013f8:	4614      	mov	r4, r2
 80013fa:	18d5      	adds	r5, r2, r3
 80013fc:	42ac      	cmp	r4, r5
 80013fe:	d101      	bne.n	8001404 <__sfputs_r+0x12>
 8001400:	2000      	movs	r0, #0
 8001402:	e007      	b.n	8001414 <__sfputs_r+0x22>
 8001404:	463a      	mov	r2, r7
 8001406:	4630      	mov	r0, r6
 8001408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800140c:	f7ff ffdc 	bl	80013c8 <__sfputc_r>
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	d1f3      	bne.n	80013fc <__sfputs_r+0xa>
 8001414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001418 <_vfiprintf_r>:
 8001418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800141c:	460d      	mov	r5, r1
 800141e:	4614      	mov	r4, r2
 8001420:	4698      	mov	r8, r3
 8001422:	4606      	mov	r6, r0
 8001424:	b09d      	sub	sp, #116	@ 0x74
 8001426:	b118      	cbz	r0, 8001430 <_vfiprintf_r+0x18>
 8001428:	6a03      	ldr	r3, [r0, #32]
 800142a:	b90b      	cbnz	r3, 8001430 <_vfiprintf_r+0x18>
 800142c:	f7ff fdce 	bl	8000fcc <__sinit>
 8001430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001432:	07d9      	lsls	r1, r3, #31
 8001434:	d405      	bmi.n	8001442 <_vfiprintf_r+0x2a>
 8001436:	89ab      	ldrh	r3, [r5, #12]
 8001438:	059a      	lsls	r2, r3, #22
 800143a:	d402      	bmi.n	8001442 <_vfiprintf_r+0x2a>
 800143c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800143e:	f7ff feca 	bl	80011d6 <__retarget_lock_acquire_recursive>
 8001442:	89ab      	ldrh	r3, [r5, #12]
 8001444:	071b      	lsls	r3, r3, #28
 8001446:	d501      	bpl.n	800144c <_vfiprintf_r+0x34>
 8001448:	692b      	ldr	r3, [r5, #16]
 800144a:	b99b      	cbnz	r3, 8001474 <_vfiprintf_r+0x5c>
 800144c:	4629      	mov	r1, r5
 800144e:	4630      	mov	r0, r6
 8001450:	f000 fb72 	bl	8001b38 <__swsetup_r>
 8001454:	b170      	cbz	r0, 8001474 <_vfiprintf_r+0x5c>
 8001456:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001458:	07dc      	lsls	r4, r3, #31
 800145a:	d504      	bpl.n	8001466 <_vfiprintf_r+0x4e>
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	b01d      	add	sp, #116	@ 0x74
 8001462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001466:	89ab      	ldrh	r3, [r5, #12]
 8001468:	0598      	lsls	r0, r3, #22
 800146a:	d4f7      	bmi.n	800145c <_vfiprintf_r+0x44>
 800146c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800146e:	f7ff feb3 	bl	80011d8 <__retarget_lock_release_recursive>
 8001472:	e7f3      	b.n	800145c <_vfiprintf_r+0x44>
 8001474:	2300      	movs	r3, #0
 8001476:	9309      	str	r3, [sp, #36]	@ 0x24
 8001478:	2320      	movs	r3, #32
 800147a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800147e:	2330      	movs	r3, #48	@ 0x30
 8001480:	f04f 0901 	mov.w	r9, #1
 8001484:	f8cd 800c 	str.w	r8, [sp, #12]
 8001488:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001634 <_vfiprintf_r+0x21c>
 800148c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001490:	4623      	mov	r3, r4
 8001492:	469a      	mov	sl, r3
 8001494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001498:	b10a      	cbz	r2, 800149e <_vfiprintf_r+0x86>
 800149a:	2a25      	cmp	r2, #37	@ 0x25
 800149c:	d1f9      	bne.n	8001492 <_vfiprintf_r+0x7a>
 800149e:	ebba 0b04 	subs.w	fp, sl, r4
 80014a2:	d00b      	beq.n	80014bc <_vfiprintf_r+0xa4>
 80014a4:	465b      	mov	r3, fp
 80014a6:	4622      	mov	r2, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	4630      	mov	r0, r6
 80014ac:	f7ff ffa1 	bl	80013f2 <__sfputs_r>
 80014b0:	3001      	adds	r0, #1
 80014b2:	f000 80a7 	beq.w	8001604 <_vfiprintf_r+0x1ec>
 80014b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014b8:	445a      	add	r2, fp
 80014ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80014bc:	f89a 3000 	ldrb.w	r3, [sl]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 809f 	beq.w	8001604 <_vfiprintf_r+0x1ec>
 80014c6:	2300      	movs	r3, #0
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014d0:	f10a 0a01 	add.w	sl, sl, #1
 80014d4:	9304      	str	r3, [sp, #16]
 80014d6:	9307      	str	r3, [sp, #28]
 80014d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80014dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80014de:	4654      	mov	r4, sl
 80014e0:	2205      	movs	r2, #5
 80014e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014e6:	4853      	ldr	r0, [pc, #332]	@ (8001634 <_vfiprintf_r+0x21c>)
 80014e8:	f000 fb8c 	bl	8001c04 <memchr>
 80014ec:	9a04      	ldr	r2, [sp, #16]
 80014ee:	b9d8      	cbnz	r0, 8001528 <_vfiprintf_r+0x110>
 80014f0:	06d1      	lsls	r1, r2, #27
 80014f2:	bf44      	itt	mi
 80014f4:	2320      	movmi	r3, #32
 80014f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80014fa:	0713      	lsls	r3, r2, #28
 80014fc:	bf44      	itt	mi
 80014fe:	232b      	movmi	r3, #43	@ 0x2b
 8001500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001504:	f89a 3000 	ldrb.w	r3, [sl]
 8001508:	2b2a      	cmp	r3, #42	@ 0x2a
 800150a:	d015      	beq.n	8001538 <_vfiprintf_r+0x120>
 800150c:	4654      	mov	r4, sl
 800150e:	2000      	movs	r0, #0
 8001510:	f04f 0c0a 	mov.w	ip, #10
 8001514:	9a07      	ldr	r2, [sp, #28]
 8001516:	4621      	mov	r1, r4
 8001518:	f811 3b01 	ldrb.w	r3, [r1], #1
 800151c:	3b30      	subs	r3, #48	@ 0x30
 800151e:	2b09      	cmp	r3, #9
 8001520:	d94b      	bls.n	80015ba <_vfiprintf_r+0x1a2>
 8001522:	b1b0      	cbz	r0, 8001552 <_vfiprintf_r+0x13a>
 8001524:	9207      	str	r2, [sp, #28]
 8001526:	e014      	b.n	8001552 <_vfiprintf_r+0x13a>
 8001528:	eba0 0308 	sub.w	r3, r0, r8
 800152c:	fa09 f303 	lsl.w	r3, r9, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	46a2      	mov	sl, r4
 8001534:	9304      	str	r3, [sp, #16]
 8001536:	e7d2      	b.n	80014de <_vfiprintf_r+0xc6>
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	1d19      	adds	r1, r3, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	9103      	str	r1, [sp, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	bfbb      	ittet	lt
 8001544:	425b      	neglt	r3, r3
 8001546:	f042 0202 	orrlt.w	r2, r2, #2
 800154a:	9307      	strge	r3, [sp, #28]
 800154c:	9307      	strlt	r3, [sp, #28]
 800154e:	bfb8      	it	lt
 8001550:	9204      	strlt	r2, [sp, #16]
 8001552:	7823      	ldrb	r3, [r4, #0]
 8001554:	2b2e      	cmp	r3, #46	@ 0x2e
 8001556:	d10a      	bne.n	800156e <_vfiprintf_r+0x156>
 8001558:	7863      	ldrb	r3, [r4, #1]
 800155a:	2b2a      	cmp	r3, #42	@ 0x2a
 800155c:	d132      	bne.n	80015c4 <_vfiprintf_r+0x1ac>
 800155e:	9b03      	ldr	r3, [sp, #12]
 8001560:	3402      	adds	r4, #2
 8001562:	1d1a      	adds	r2, r3, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	9203      	str	r2, [sp, #12]
 8001568:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800156c:	9305      	str	r3, [sp, #20]
 800156e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001638 <_vfiprintf_r+0x220>
 8001572:	2203      	movs	r2, #3
 8001574:	4650      	mov	r0, sl
 8001576:	7821      	ldrb	r1, [r4, #0]
 8001578:	f000 fb44 	bl	8001c04 <memchr>
 800157c:	b138      	cbz	r0, 800158e <_vfiprintf_r+0x176>
 800157e:	2240      	movs	r2, #64	@ 0x40
 8001580:	9b04      	ldr	r3, [sp, #16]
 8001582:	eba0 000a 	sub.w	r0, r0, sl
 8001586:	4082      	lsls	r2, r0
 8001588:	4313      	orrs	r3, r2
 800158a:	3401      	adds	r4, #1
 800158c:	9304      	str	r3, [sp, #16]
 800158e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001592:	2206      	movs	r2, #6
 8001594:	4829      	ldr	r0, [pc, #164]	@ (800163c <_vfiprintf_r+0x224>)
 8001596:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800159a:	f000 fb33 	bl	8001c04 <memchr>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d03f      	beq.n	8001622 <_vfiprintf_r+0x20a>
 80015a2:	4b27      	ldr	r3, [pc, #156]	@ (8001640 <_vfiprintf_r+0x228>)
 80015a4:	bb1b      	cbnz	r3, 80015ee <_vfiprintf_r+0x1d6>
 80015a6:	9b03      	ldr	r3, [sp, #12]
 80015a8:	3307      	adds	r3, #7
 80015aa:	f023 0307 	bic.w	r3, r3, #7
 80015ae:	3308      	adds	r3, #8
 80015b0:	9303      	str	r3, [sp, #12]
 80015b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015b4:	443b      	add	r3, r7
 80015b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80015b8:	e76a      	b.n	8001490 <_vfiprintf_r+0x78>
 80015ba:	460c      	mov	r4, r1
 80015bc:	2001      	movs	r0, #1
 80015be:	fb0c 3202 	mla	r2, ip, r2, r3
 80015c2:	e7a8      	b.n	8001516 <_vfiprintf_r+0xfe>
 80015c4:	2300      	movs	r3, #0
 80015c6:	f04f 0c0a 	mov.w	ip, #10
 80015ca:	4619      	mov	r1, r3
 80015cc:	3401      	adds	r4, #1
 80015ce:	9305      	str	r3, [sp, #20]
 80015d0:	4620      	mov	r0, r4
 80015d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015d6:	3a30      	subs	r2, #48	@ 0x30
 80015d8:	2a09      	cmp	r2, #9
 80015da:	d903      	bls.n	80015e4 <_vfiprintf_r+0x1cc>
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0c6      	beq.n	800156e <_vfiprintf_r+0x156>
 80015e0:	9105      	str	r1, [sp, #20]
 80015e2:	e7c4      	b.n	800156e <_vfiprintf_r+0x156>
 80015e4:	4604      	mov	r4, r0
 80015e6:	2301      	movs	r3, #1
 80015e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80015ec:	e7f0      	b.n	80015d0 <_vfiprintf_r+0x1b8>
 80015ee:	ab03      	add	r3, sp, #12
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	462a      	mov	r2, r5
 80015f4:	4630      	mov	r0, r6
 80015f6:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <_vfiprintf_r+0x22c>)
 80015f8:	a904      	add	r1, sp, #16
 80015fa:	f3af 8000 	nop.w
 80015fe:	4607      	mov	r7, r0
 8001600:	1c78      	adds	r0, r7, #1
 8001602:	d1d6      	bne.n	80015b2 <_vfiprintf_r+0x19a>
 8001604:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001606:	07d9      	lsls	r1, r3, #31
 8001608:	d405      	bmi.n	8001616 <_vfiprintf_r+0x1fe>
 800160a:	89ab      	ldrh	r3, [r5, #12]
 800160c:	059a      	lsls	r2, r3, #22
 800160e:	d402      	bmi.n	8001616 <_vfiprintf_r+0x1fe>
 8001610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001612:	f7ff fde1 	bl	80011d8 <__retarget_lock_release_recursive>
 8001616:	89ab      	ldrh	r3, [r5, #12]
 8001618:	065b      	lsls	r3, r3, #25
 800161a:	f53f af1f 	bmi.w	800145c <_vfiprintf_r+0x44>
 800161e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001620:	e71e      	b.n	8001460 <_vfiprintf_r+0x48>
 8001622:	ab03      	add	r3, sp, #12
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	462a      	mov	r2, r5
 8001628:	4630      	mov	r0, r6
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <_vfiprintf_r+0x22c>)
 800162c:	a904      	add	r1, sp, #16
 800162e:	f000 f87d 	bl	800172c <_printf_i>
 8001632:	e7e4      	b.n	80015fe <_vfiprintf_r+0x1e6>
 8001634:	08001d4e 	.word	0x08001d4e
 8001638:	08001d54 	.word	0x08001d54
 800163c:	08001d58 	.word	0x08001d58
 8001640:	00000000 	.word	0x00000000
 8001644:	080013f3 	.word	0x080013f3

08001648 <_printf_common>:
 8001648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800164c:	4616      	mov	r6, r2
 800164e:	4698      	mov	r8, r3
 8001650:	688a      	ldr	r2, [r1, #8]
 8001652:	690b      	ldr	r3, [r1, #16]
 8001654:	4607      	mov	r7, r0
 8001656:	4293      	cmp	r3, r2
 8001658:	bfb8      	it	lt
 800165a:	4613      	movlt	r3, r2
 800165c:	6033      	str	r3, [r6, #0]
 800165e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001662:	460c      	mov	r4, r1
 8001664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001668:	b10a      	cbz	r2, 800166e <_printf_common+0x26>
 800166a:	3301      	adds	r3, #1
 800166c:	6033      	str	r3, [r6, #0]
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	0699      	lsls	r1, r3, #26
 8001672:	bf42      	ittt	mi
 8001674:	6833      	ldrmi	r3, [r6, #0]
 8001676:	3302      	addmi	r3, #2
 8001678:	6033      	strmi	r3, [r6, #0]
 800167a:	6825      	ldr	r5, [r4, #0]
 800167c:	f015 0506 	ands.w	r5, r5, #6
 8001680:	d106      	bne.n	8001690 <_printf_common+0x48>
 8001682:	f104 0a19 	add.w	sl, r4, #25
 8001686:	68e3      	ldr	r3, [r4, #12]
 8001688:	6832      	ldr	r2, [r6, #0]
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	42ab      	cmp	r3, r5
 800168e:	dc2b      	bgt.n	80016e8 <_printf_common+0xa0>
 8001690:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001694:	6822      	ldr	r2, [r4, #0]
 8001696:	3b00      	subs	r3, #0
 8001698:	bf18      	it	ne
 800169a:	2301      	movne	r3, #1
 800169c:	0692      	lsls	r2, r2, #26
 800169e:	d430      	bmi.n	8001702 <_printf_common+0xba>
 80016a0:	4641      	mov	r1, r8
 80016a2:	4638      	mov	r0, r7
 80016a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016a8:	47c8      	blx	r9
 80016aa:	3001      	adds	r0, #1
 80016ac:	d023      	beq.n	80016f6 <_printf_common+0xae>
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	6922      	ldr	r2, [r4, #16]
 80016b2:	f003 0306 	and.w	r3, r3, #6
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf14      	ite	ne
 80016ba:	2500      	movne	r5, #0
 80016bc:	6833      	ldreq	r3, [r6, #0]
 80016be:	f04f 0600 	mov.w	r6, #0
 80016c2:	bf08      	it	eq
 80016c4:	68e5      	ldreq	r5, [r4, #12]
 80016c6:	f104 041a 	add.w	r4, r4, #26
 80016ca:	bf08      	it	eq
 80016cc:	1aed      	subeq	r5, r5, r3
 80016ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80016d2:	bf08      	it	eq
 80016d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016d8:	4293      	cmp	r3, r2
 80016da:	bfc4      	itt	gt
 80016dc:	1a9b      	subgt	r3, r3, r2
 80016de:	18ed      	addgt	r5, r5, r3
 80016e0:	42b5      	cmp	r5, r6
 80016e2:	d11a      	bne.n	800171a <_printf_common+0xd2>
 80016e4:	2000      	movs	r0, #0
 80016e6:	e008      	b.n	80016fa <_printf_common+0xb2>
 80016e8:	2301      	movs	r3, #1
 80016ea:	4652      	mov	r2, sl
 80016ec:	4641      	mov	r1, r8
 80016ee:	4638      	mov	r0, r7
 80016f0:	47c8      	blx	r9
 80016f2:	3001      	adds	r0, #1
 80016f4:	d103      	bne.n	80016fe <_printf_common+0xb6>
 80016f6:	f04f 30ff 	mov.w	r0, #4294967295
 80016fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016fe:	3501      	adds	r5, #1
 8001700:	e7c1      	b.n	8001686 <_printf_common+0x3e>
 8001702:	2030      	movs	r0, #48	@ 0x30
 8001704:	18e1      	adds	r1, r4, r3
 8001706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001710:	4422      	add	r2, r4
 8001712:	3302      	adds	r3, #2
 8001714:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001718:	e7c2      	b.n	80016a0 <_printf_common+0x58>
 800171a:	2301      	movs	r3, #1
 800171c:	4622      	mov	r2, r4
 800171e:	4641      	mov	r1, r8
 8001720:	4638      	mov	r0, r7
 8001722:	47c8      	blx	r9
 8001724:	3001      	adds	r0, #1
 8001726:	d0e6      	beq.n	80016f6 <_printf_common+0xae>
 8001728:	3601      	adds	r6, #1
 800172a:	e7d9      	b.n	80016e0 <_printf_common+0x98>

0800172c <_printf_i>:
 800172c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001730:	7e0f      	ldrb	r7, [r1, #24]
 8001732:	4691      	mov	r9, r2
 8001734:	2f78      	cmp	r7, #120	@ 0x78
 8001736:	4680      	mov	r8, r0
 8001738:	460c      	mov	r4, r1
 800173a:	469a      	mov	sl, r3
 800173c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800173e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001742:	d807      	bhi.n	8001754 <_printf_i+0x28>
 8001744:	2f62      	cmp	r7, #98	@ 0x62
 8001746:	d80a      	bhi.n	800175e <_printf_i+0x32>
 8001748:	2f00      	cmp	r7, #0
 800174a:	f000 80d3 	beq.w	80018f4 <_printf_i+0x1c8>
 800174e:	2f58      	cmp	r7, #88	@ 0x58
 8001750:	f000 80ba 	beq.w	80018c8 <_printf_i+0x19c>
 8001754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800175c:	e03a      	b.n	80017d4 <_printf_i+0xa8>
 800175e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001762:	2b15      	cmp	r3, #21
 8001764:	d8f6      	bhi.n	8001754 <_printf_i+0x28>
 8001766:	a101      	add	r1, pc, #4	@ (adr r1, 800176c <_printf_i+0x40>)
 8001768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800176c:	080017c5 	.word	0x080017c5
 8001770:	080017d9 	.word	0x080017d9
 8001774:	08001755 	.word	0x08001755
 8001778:	08001755 	.word	0x08001755
 800177c:	08001755 	.word	0x08001755
 8001780:	08001755 	.word	0x08001755
 8001784:	080017d9 	.word	0x080017d9
 8001788:	08001755 	.word	0x08001755
 800178c:	08001755 	.word	0x08001755
 8001790:	08001755 	.word	0x08001755
 8001794:	08001755 	.word	0x08001755
 8001798:	080018db 	.word	0x080018db
 800179c:	08001803 	.word	0x08001803
 80017a0:	08001895 	.word	0x08001895
 80017a4:	08001755 	.word	0x08001755
 80017a8:	08001755 	.word	0x08001755
 80017ac:	080018fd 	.word	0x080018fd
 80017b0:	08001755 	.word	0x08001755
 80017b4:	08001803 	.word	0x08001803
 80017b8:	08001755 	.word	0x08001755
 80017bc:	08001755 	.word	0x08001755
 80017c0:	0800189d 	.word	0x0800189d
 80017c4:	6833      	ldr	r3, [r6, #0]
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6032      	str	r2, [r6, #0]
 80017cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017d4:	2301      	movs	r3, #1
 80017d6:	e09e      	b.n	8001916 <_printf_i+0x1ea>
 80017d8:	6833      	ldr	r3, [r6, #0]
 80017da:	6820      	ldr	r0, [r4, #0]
 80017dc:	1d19      	adds	r1, r3, #4
 80017de:	6031      	str	r1, [r6, #0]
 80017e0:	0606      	lsls	r6, r0, #24
 80017e2:	d501      	bpl.n	80017e8 <_printf_i+0xbc>
 80017e4:	681d      	ldr	r5, [r3, #0]
 80017e6:	e003      	b.n	80017f0 <_printf_i+0xc4>
 80017e8:	0645      	lsls	r5, r0, #25
 80017ea:	d5fb      	bpl.n	80017e4 <_printf_i+0xb8>
 80017ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	da03      	bge.n	80017fc <_printf_i+0xd0>
 80017f4:	232d      	movs	r3, #45	@ 0x2d
 80017f6:	426d      	negs	r5, r5
 80017f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017fc:	230a      	movs	r3, #10
 80017fe:	4859      	ldr	r0, [pc, #356]	@ (8001964 <_printf_i+0x238>)
 8001800:	e011      	b.n	8001826 <_printf_i+0xfa>
 8001802:	6821      	ldr	r1, [r4, #0]
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	0608      	lsls	r0, r1, #24
 8001808:	f853 5b04 	ldr.w	r5, [r3], #4
 800180c:	d402      	bmi.n	8001814 <_printf_i+0xe8>
 800180e:	0649      	lsls	r1, r1, #25
 8001810:	bf48      	it	mi
 8001812:	b2ad      	uxthmi	r5, r5
 8001814:	2f6f      	cmp	r7, #111	@ 0x6f
 8001816:	6033      	str	r3, [r6, #0]
 8001818:	bf14      	ite	ne
 800181a:	230a      	movne	r3, #10
 800181c:	2308      	moveq	r3, #8
 800181e:	4851      	ldr	r0, [pc, #324]	@ (8001964 <_printf_i+0x238>)
 8001820:	2100      	movs	r1, #0
 8001822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001826:	6866      	ldr	r6, [r4, #4]
 8001828:	2e00      	cmp	r6, #0
 800182a:	bfa8      	it	ge
 800182c:	6821      	ldrge	r1, [r4, #0]
 800182e:	60a6      	str	r6, [r4, #8]
 8001830:	bfa4      	itt	ge
 8001832:	f021 0104 	bicge.w	r1, r1, #4
 8001836:	6021      	strge	r1, [r4, #0]
 8001838:	b90d      	cbnz	r5, 800183e <_printf_i+0x112>
 800183a:	2e00      	cmp	r6, #0
 800183c:	d04b      	beq.n	80018d6 <_printf_i+0x1aa>
 800183e:	4616      	mov	r6, r2
 8001840:	fbb5 f1f3 	udiv	r1, r5, r3
 8001844:	fb03 5711 	mls	r7, r3, r1, r5
 8001848:	5dc7      	ldrb	r7, [r0, r7]
 800184a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800184e:	462f      	mov	r7, r5
 8001850:	42bb      	cmp	r3, r7
 8001852:	460d      	mov	r5, r1
 8001854:	d9f4      	bls.n	8001840 <_printf_i+0x114>
 8001856:	2b08      	cmp	r3, #8
 8001858:	d10b      	bne.n	8001872 <_printf_i+0x146>
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	07df      	lsls	r7, r3, #31
 800185e:	d508      	bpl.n	8001872 <_printf_i+0x146>
 8001860:	6923      	ldr	r3, [r4, #16]
 8001862:	6861      	ldr	r1, [r4, #4]
 8001864:	4299      	cmp	r1, r3
 8001866:	bfde      	ittt	le
 8001868:	2330      	movle	r3, #48	@ 0x30
 800186a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800186e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001872:	1b92      	subs	r2, r2, r6
 8001874:	6122      	str	r2, [r4, #16]
 8001876:	464b      	mov	r3, r9
 8001878:	4621      	mov	r1, r4
 800187a:	4640      	mov	r0, r8
 800187c:	f8cd a000 	str.w	sl, [sp]
 8001880:	aa03      	add	r2, sp, #12
 8001882:	f7ff fee1 	bl	8001648 <_printf_common>
 8001886:	3001      	adds	r0, #1
 8001888:	d14a      	bne.n	8001920 <_printf_i+0x1f4>
 800188a:	f04f 30ff 	mov.w	r0, #4294967295
 800188e:	b004      	add	sp, #16
 8001890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	f043 0320 	orr.w	r3, r3, #32
 800189a:	6023      	str	r3, [r4, #0]
 800189c:	2778      	movs	r7, #120	@ 0x78
 800189e:	4832      	ldr	r0, [pc, #200]	@ (8001968 <_printf_i+0x23c>)
 80018a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	6831      	ldr	r1, [r6, #0]
 80018a8:	061f      	lsls	r7, r3, #24
 80018aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80018ae:	d402      	bmi.n	80018b6 <_printf_i+0x18a>
 80018b0:	065f      	lsls	r7, r3, #25
 80018b2:	bf48      	it	mi
 80018b4:	b2ad      	uxthmi	r5, r5
 80018b6:	6031      	str	r1, [r6, #0]
 80018b8:	07d9      	lsls	r1, r3, #31
 80018ba:	bf44      	itt	mi
 80018bc:	f043 0320 	orrmi.w	r3, r3, #32
 80018c0:	6023      	strmi	r3, [r4, #0]
 80018c2:	b11d      	cbz	r5, 80018cc <_printf_i+0x1a0>
 80018c4:	2310      	movs	r3, #16
 80018c6:	e7ab      	b.n	8001820 <_printf_i+0xf4>
 80018c8:	4826      	ldr	r0, [pc, #152]	@ (8001964 <_printf_i+0x238>)
 80018ca:	e7e9      	b.n	80018a0 <_printf_i+0x174>
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	f023 0320 	bic.w	r3, r3, #32
 80018d2:	6023      	str	r3, [r4, #0]
 80018d4:	e7f6      	b.n	80018c4 <_printf_i+0x198>
 80018d6:	4616      	mov	r6, r2
 80018d8:	e7bd      	b.n	8001856 <_printf_i+0x12a>
 80018da:	6833      	ldr	r3, [r6, #0]
 80018dc:	6825      	ldr	r5, [r4, #0]
 80018de:	1d18      	adds	r0, r3, #4
 80018e0:	6961      	ldr	r1, [r4, #20]
 80018e2:	6030      	str	r0, [r6, #0]
 80018e4:	062e      	lsls	r6, r5, #24
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	d501      	bpl.n	80018ee <_printf_i+0x1c2>
 80018ea:	6019      	str	r1, [r3, #0]
 80018ec:	e002      	b.n	80018f4 <_printf_i+0x1c8>
 80018ee:	0668      	lsls	r0, r5, #25
 80018f0:	d5fb      	bpl.n	80018ea <_printf_i+0x1be>
 80018f2:	8019      	strh	r1, [r3, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	4616      	mov	r6, r2
 80018f8:	6123      	str	r3, [r4, #16]
 80018fa:	e7bc      	b.n	8001876 <_printf_i+0x14a>
 80018fc:	6833      	ldr	r3, [r6, #0]
 80018fe:	2100      	movs	r1, #0
 8001900:	1d1a      	adds	r2, r3, #4
 8001902:	6032      	str	r2, [r6, #0]
 8001904:	681e      	ldr	r6, [r3, #0]
 8001906:	6862      	ldr	r2, [r4, #4]
 8001908:	4630      	mov	r0, r6
 800190a:	f000 f97b 	bl	8001c04 <memchr>
 800190e:	b108      	cbz	r0, 8001914 <_printf_i+0x1e8>
 8001910:	1b80      	subs	r0, r0, r6
 8001912:	6060      	str	r0, [r4, #4]
 8001914:	6863      	ldr	r3, [r4, #4]
 8001916:	6123      	str	r3, [r4, #16]
 8001918:	2300      	movs	r3, #0
 800191a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800191e:	e7aa      	b.n	8001876 <_printf_i+0x14a>
 8001920:	4632      	mov	r2, r6
 8001922:	4649      	mov	r1, r9
 8001924:	4640      	mov	r0, r8
 8001926:	6923      	ldr	r3, [r4, #16]
 8001928:	47d0      	blx	sl
 800192a:	3001      	adds	r0, #1
 800192c:	d0ad      	beq.n	800188a <_printf_i+0x15e>
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	079b      	lsls	r3, r3, #30
 8001932:	d413      	bmi.n	800195c <_printf_i+0x230>
 8001934:	68e0      	ldr	r0, [r4, #12]
 8001936:	9b03      	ldr	r3, [sp, #12]
 8001938:	4298      	cmp	r0, r3
 800193a:	bfb8      	it	lt
 800193c:	4618      	movlt	r0, r3
 800193e:	e7a6      	b.n	800188e <_printf_i+0x162>
 8001940:	2301      	movs	r3, #1
 8001942:	4632      	mov	r2, r6
 8001944:	4649      	mov	r1, r9
 8001946:	4640      	mov	r0, r8
 8001948:	47d0      	blx	sl
 800194a:	3001      	adds	r0, #1
 800194c:	d09d      	beq.n	800188a <_printf_i+0x15e>
 800194e:	3501      	adds	r5, #1
 8001950:	68e3      	ldr	r3, [r4, #12]
 8001952:	9903      	ldr	r1, [sp, #12]
 8001954:	1a5b      	subs	r3, r3, r1
 8001956:	42ab      	cmp	r3, r5
 8001958:	dcf2      	bgt.n	8001940 <_printf_i+0x214>
 800195a:	e7eb      	b.n	8001934 <_printf_i+0x208>
 800195c:	2500      	movs	r5, #0
 800195e:	f104 0619 	add.w	r6, r4, #25
 8001962:	e7f5      	b.n	8001950 <_printf_i+0x224>
 8001964:	08001d5f 	.word	0x08001d5f
 8001968:	08001d70 	.word	0x08001d70

0800196c <__sflush_r>:
 800196c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001972:	0716      	lsls	r6, r2, #28
 8001974:	4605      	mov	r5, r0
 8001976:	460c      	mov	r4, r1
 8001978:	d454      	bmi.n	8001a24 <__sflush_r+0xb8>
 800197a:	684b      	ldr	r3, [r1, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dc02      	bgt.n	8001986 <__sflush_r+0x1a>
 8001980:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	dd48      	ble.n	8001a18 <__sflush_r+0xac>
 8001986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001988:	2e00      	cmp	r6, #0
 800198a:	d045      	beq.n	8001a18 <__sflush_r+0xac>
 800198c:	2300      	movs	r3, #0
 800198e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001992:	682f      	ldr	r7, [r5, #0]
 8001994:	6a21      	ldr	r1, [r4, #32]
 8001996:	602b      	str	r3, [r5, #0]
 8001998:	d030      	beq.n	80019fc <__sflush_r+0x90>
 800199a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800199c:	89a3      	ldrh	r3, [r4, #12]
 800199e:	0759      	lsls	r1, r3, #29
 80019a0:	d505      	bpl.n	80019ae <__sflush_r+0x42>
 80019a2:	6863      	ldr	r3, [r4, #4]
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80019a8:	b10b      	cbz	r3, 80019ae <__sflush_r+0x42>
 80019aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019ac:	1ad2      	subs	r2, r2, r3
 80019ae:	2300      	movs	r3, #0
 80019b0:	4628      	mov	r0, r5
 80019b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019b4:	6a21      	ldr	r1, [r4, #32]
 80019b6:	47b0      	blx	r6
 80019b8:	1c43      	adds	r3, r0, #1
 80019ba:	89a3      	ldrh	r3, [r4, #12]
 80019bc:	d106      	bne.n	80019cc <__sflush_r+0x60>
 80019be:	6829      	ldr	r1, [r5, #0]
 80019c0:	291d      	cmp	r1, #29
 80019c2:	d82b      	bhi.n	8001a1c <__sflush_r+0xb0>
 80019c4:	4a28      	ldr	r2, [pc, #160]	@ (8001a68 <__sflush_r+0xfc>)
 80019c6:	410a      	asrs	r2, r1
 80019c8:	07d6      	lsls	r6, r2, #31
 80019ca:	d427      	bmi.n	8001a1c <__sflush_r+0xb0>
 80019cc:	2200      	movs	r2, #0
 80019ce:	6062      	str	r2, [r4, #4]
 80019d0:	6922      	ldr	r2, [r4, #16]
 80019d2:	04d9      	lsls	r1, r3, #19
 80019d4:	6022      	str	r2, [r4, #0]
 80019d6:	d504      	bpl.n	80019e2 <__sflush_r+0x76>
 80019d8:	1c42      	adds	r2, r0, #1
 80019da:	d101      	bne.n	80019e0 <__sflush_r+0x74>
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	b903      	cbnz	r3, 80019e2 <__sflush_r+0x76>
 80019e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80019e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019e4:	602f      	str	r7, [r5, #0]
 80019e6:	b1b9      	cbz	r1, 8001a18 <__sflush_r+0xac>
 80019e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80019ec:	4299      	cmp	r1, r3
 80019ee:	d002      	beq.n	80019f6 <__sflush_r+0x8a>
 80019f0:	4628      	mov	r0, r5
 80019f2:	f7ff fbf3 	bl	80011dc <_free_r>
 80019f6:	2300      	movs	r3, #0
 80019f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80019fa:	e00d      	b.n	8001a18 <__sflush_r+0xac>
 80019fc:	2301      	movs	r3, #1
 80019fe:	4628      	mov	r0, r5
 8001a00:	47b0      	blx	r6
 8001a02:	4602      	mov	r2, r0
 8001a04:	1c50      	adds	r0, r2, #1
 8001a06:	d1c9      	bne.n	800199c <__sflush_r+0x30>
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0c6      	beq.n	800199c <__sflush_r+0x30>
 8001a0e:	2b1d      	cmp	r3, #29
 8001a10:	d001      	beq.n	8001a16 <__sflush_r+0xaa>
 8001a12:	2b16      	cmp	r3, #22
 8001a14:	d11d      	bne.n	8001a52 <__sflush_r+0xe6>
 8001a16:	602f      	str	r7, [r5, #0]
 8001a18:	2000      	movs	r0, #0
 8001a1a:	e021      	b.n	8001a60 <__sflush_r+0xf4>
 8001a1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	e01a      	b.n	8001a5a <__sflush_r+0xee>
 8001a24:	690f      	ldr	r7, [r1, #16]
 8001a26:	2f00      	cmp	r7, #0
 8001a28:	d0f6      	beq.n	8001a18 <__sflush_r+0xac>
 8001a2a:	0793      	lsls	r3, r2, #30
 8001a2c:	bf18      	it	ne
 8001a2e:	2300      	movne	r3, #0
 8001a30:	680e      	ldr	r6, [r1, #0]
 8001a32:	bf08      	it	eq
 8001a34:	694b      	ldreq	r3, [r1, #20]
 8001a36:	1bf6      	subs	r6, r6, r7
 8001a38:	600f      	str	r7, [r1, #0]
 8001a3a:	608b      	str	r3, [r1, #8]
 8001a3c:	2e00      	cmp	r6, #0
 8001a3e:	ddeb      	ble.n	8001a18 <__sflush_r+0xac>
 8001a40:	4633      	mov	r3, r6
 8001a42:	463a      	mov	r2, r7
 8001a44:	4628      	mov	r0, r5
 8001a46:	6a21      	ldr	r1, [r4, #32]
 8001a48:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001a4c:	47e0      	blx	ip
 8001a4e:	2800      	cmp	r0, #0
 8001a50:	dc07      	bgt.n	8001a62 <__sflush_r+0xf6>
 8001a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5e:	81a3      	strh	r3, [r4, #12]
 8001a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a62:	4407      	add	r7, r0
 8001a64:	1a36      	subs	r6, r6, r0
 8001a66:	e7e9      	b.n	8001a3c <__sflush_r+0xd0>
 8001a68:	dfbffffe 	.word	0xdfbffffe

08001a6c <_fflush_r>:
 8001a6c:	b538      	push	{r3, r4, r5, lr}
 8001a6e:	690b      	ldr	r3, [r1, #16]
 8001a70:	4605      	mov	r5, r0
 8001a72:	460c      	mov	r4, r1
 8001a74:	b913      	cbnz	r3, 8001a7c <_fflush_r+0x10>
 8001a76:	2500      	movs	r5, #0
 8001a78:	4628      	mov	r0, r5
 8001a7a:	bd38      	pop	{r3, r4, r5, pc}
 8001a7c:	b118      	cbz	r0, 8001a86 <_fflush_r+0x1a>
 8001a7e:	6a03      	ldr	r3, [r0, #32]
 8001a80:	b90b      	cbnz	r3, 8001a86 <_fflush_r+0x1a>
 8001a82:	f7ff faa3 	bl	8000fcc <__sinit>
 8001a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f3      	beq.n	8001a76 <_fflush_r+0xa>
 8001a8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001a90:	07d0      	lsls	r0, r2, #31
 8001a92:	d404      	bmi.n	8001a9e <_fflush_r+0x32>
 8001a94:	0599      	lsls	r1, r3, #22
 8001a96:	d402      	bmi.n	8001a9e <_fflush_r+0x32>
 8001a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001a9a:	f7ff fb9c 	bl	80011d6 <__retarget_lock_acquire_recursive>
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	f7ff ff63 	bl	800196c <__sflush_r>
 8001aa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001aa8:	4605      	mov	r5, r0
 8001aaa:	07da      	lsls	r2, r3, #31
 8001aac:	d4e4      	bmi.n	8001a78 <_fflush_r+0xc>
 8001aae:	89a3      	ldrh	r3, [r4, #12]
 8001ab0:	059b      	lsls	r3, r3, #22
 8001ab2:	d4e1      	bmi.n	8001a78 <_fflush_r+0xc>
 8001ab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ab6:	f7ff fb8f 	bl	80011d8 <__retarget_lock_release_recursive>
 8001aba:	e7dd      	b.n	8001a78 <_fflush_r+0xc>

08001abc <__swbuf_r>:
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001abe:	460e      	mov	r6, r1
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	4605      	mov	r5, r0
 8001ac4:	b118      	cbz	r0, 8001ace <__swbuf_r+0x12>
 8001ac6:	6a03      	ldr	r3, [r0, #32]
 8001ac8:	b90b      	cbnz	r3, 8001ace <__swbuf_r+0x12>
 8001aca:	f7ff fa7f 	bl	8000fcc <__sinit>
 8001ace:	69a3      	ldr	r3, [r4, #24]
 8001ad0:	60a3      	str	r3, [r4, #8]
 8001ad2:	89a3      	ldrh	r3, [r4, #12]
 8001ad4:	071a      	lsls	r2, r3, #28
 8001ad6:	d501      	bpl.n	8001adc <__swbuf_r+0x20>
 8001ad8:	6923      	ldr	r3, [r4, #16]
 8001ada:	b943      	cbnz	r3, 8001aee <__swbuf_r+0x32>
 8001adc:	4621      	mov	r1, r4
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f000 f82a 	bl	8001b38 <__swsetup_r>
 8001ae4:	b118      	cbz	r0, 8001aee <__swbuf_r+0x32>
 8001ae6:	f04f 37ff 	mov.w	r7, #4294967295
 8001aea:	4638      	mov	r0, r7
 8001aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	6922      	ldr	r2, [r4, #16]
 8001af2:	b2f6      	uxtb	r6, r6
 8001af4:	1a98      	subs	r0, r3, r2
 8001af6:	6963      	ldr	r3, [r4, #20]
 8001af8:	4637      	mov	r7, r6
 8001afa:	4283      	cmp	r3, r0
 8001afc:	dc05      	bgt.n	8001b0a <__swbuf_r+0x4e>
 8001afe:	4621      	mov	r1, r4
 8001b00:	4628      	mov	r0, r5
 8001b02:	f7ff ffb3 	bl	8001a6c <_fflush_r>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d1ed      	bne.n	8001ae6 <__swbuf_r+0x2a>
 8001b0a:	68a3      	ldr	r3, [r4, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60a3      	str	r3, [r4, #8]
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	6022      	str	r2, [r4, #0]
 8001b16:	701e      	strb	r6, [r3, #0]
 8001b18:	6962      	ldr	r2, [r4, #20]
 8001b1a:	1c43      	adds	r3, r0, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d004      	beq.n	8001b2a <__swbuf_r+0x6e>
 8001b20:	89a3      	ldrh	r3, [r4, #12]
 8001b22:	07db      	lsls	r3, r3, #31
 8001b24:	d5e1      	bpl.n	8001aea <__swbuf_r+0x2e>
 8001b26:	2e0a      	cmp	r6, #10
 8001b28:	d1df      	bne.n	8001aea <__swbuf_r+0x2e>
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f7ff ff9d 	bl	8001a6c <_fflush_r>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d0d9      	beq.n	8001aea <__swbuf_r+0x2e>
 8001b36:	e7d6      	b.n	8001ae6 <__swbuf_r+0x2a>

08001b38 <__swsetup_r>:
 8001b38:	b538      	push	{r3, r4, r5, lr}
 8001b3a:	4b29      	ldr	r3, [pc, #164]	@ (8001be0 <__swsetup_r+0xa8>)
 8001b3c:	4605      	mov	r5, r0
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	460c      	mov	r4, r1
 8001b42:	b118      	cbz	r0, 8001b4c <__swsetup_r+0x14>
 8001b44:	6a03      	ldr	r3, [r0, #32]
 8001b46:	b90b      	cbnz	r3, 8001b4c <__swsetup_r+0x14>
 8001b48:	f7ff fa40 	bl	8000fcc <__sinit>
 8001b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b50:	0719      	lsls	r1, r3, #28
 8001b52:	d422      	bmi.n	8001b9a <__swsetup_r+0x62>
 8001b54:	06da      	lsls	r2, r3, #27
 8001b56:	d407      	bmi.n	8001b68 <__swsetup_r+0x30>
 8001b58:	2209      	movs	r2, #9
 8001b5a:	602a      	str	r2, [r5, #0]
 8001b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	81a3      	strh	r3, [r4, #12]
 8001b66:	e033      	b.n	8001bd0 <__swsetup_r+0x98>
 8001b68:	0758      	lsls	r0, r3, #29
 8001b6a:	d512      	bpl.n	8001b92 <__swsetup_r+0x5a>
 8001b6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b6e:	b141      	cbz	r1, 8001b82 <__swsetup_r+0x4a>
 8001b70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b74:	4299      	cmp	r1, r3
 8001b76:	d002      	beq.n	8001b7e <__swsetup_r+0x46>
 8001b78:	4628      	mov	r0, r5
 8001b7a:	f7ff fb2f 	bl	80011dc <_free_r>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b82:	89a3      	ldrh	r3, [r4, #12]
 8001b84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b88:	81a3      	strh	r3, [r4, #12]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	6063      	str	r3, [r4, #4]
 8001b8e:	6923      	ldr	r3, [r4, #16]
 8001b90:	6023      	str	r3, [r4, #0]
 8001b92:	89a3      	ldrh	r3, [r4, #12]
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	81a3      	strh	r3, [r4, #12]
 8001b9a:	6923      	ldr	r3, [r4, #16]
 8001b9c:	b94b      	cbnz	r3, 8001bb2 <__swsetup_r+0x7a>
 8001b9e:	89a3      	ldrh	r3, [r4, #12]
 8001ba0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ba8:	d003      	beq.n	8001bb2 <__swsetup_r+0x7a>
 8001baa:	4621      	mov	r1, r4
 8001bac:	4628      	mov	r0, r5
 8001bae:	f000 f85c 	bl	8001c6a <__smakebuf_r>
 8001bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bb6:	f013 0201 	ands.w	r2, r3, #1
 8001bba:	d00a      	beq.n	8001bd2 <__swsetup_r+0x9a>
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	60a2      	str	r2, [r4, #8]
 8001bc0:	6962      	ldr	r2, [r4, #20]
 8001bc2:	4252      	negs	r2, r2
 8001bc4:	61a2      	str	r2, [r4, #24]
 8001bc6:	6922      	ldr	r2, [r4, #16]
 8001bc8:	b942      	cbnz	r2, 8001bdc <__swsetup_r+0xa4>
 8001bca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001bce:	d1c5      	bne.n	8001b5c <__swsetup_r+0x24>
 8001bd0:	bd38      	pop	{r3, r4, r5, pc}
 8001bd2:	0799      	lsls	r1, r3, #30
 8001bd4:	bf58      	it	pl
 8001bd6:	6962      	ldrpl	r2, [r4, #20]
 8001bd8:	60a2      	str	r2, [r4, #8]
 8001bda:	e7f4      	b.n	8001bc6 <__swsetup_r+0x8e>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e7f7      	b.n	8001bd0 <__swsetup_r+0x98>
 8001be0:	2000001c 	.word	0x2000001c

08001be4 <_sbrk_r>:
 8001be4:	b538      	push	{r3, r4, r5, lr}
 8001be6:	2300      	movs	r3, #0
 8001be8:	4d05      	ldr	r5, [pc, #20]	@ (8001c00 <_sbrk_r+0x1c>)
 8001bea:	4604      	mov	r4, r0
 8001bec:	4608      	mov	r0, r1
 8001bee:	602b      	str	r3, [r5, #0]
 8001bf0:	f7ff f900 	bl	8000df4 <_sbrk>
 8001bf4:	1c43      	adds	r3, r0, #1
 8001bf6:	d102      	bne.n	8001bfe <_sbrk_r+0x1a>
 8001bf8:	682b      	ldr	r3, [r5, #0]
 8001bfa:	b103      	cbz	r3, 8001bfe <_sbrk_r+0x1a>
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	bd38      	pop	{r3, r4, r5, pc}
 8001c00:	200001e0 	.word	0x200001e0

08001c04 <memchr>:
 8001c04:	4603      	mov	r3, r0
 8001c06:	b510      	push	{r4, lr}
 8001c08:	b2c9      	uxtb	r1, r1
 8001c0a:	4402      	add	r2, r0
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	d101      	bne.n	8001c16 <memchr+0x12>
 8001c12:	2000      	movs	r0, #0
 8001c14:	e003      	b.n	8001c1e <memchr+0x1a>
 8001c16:	7804      	ldrb	r4, [r0, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	428c      	cmp	r4, r1
 8001c1c:	d1f6      	bne.n	8001c0c <memchr+0x8>
 8001c1e:	bd10      	pop	{r4, pc}

08001c20 <__swhatbuf_r>:
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	460c      	mov	r4, r1
 8001c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c28:	4615      	mov	r5, r2
 8001c2a:	2900      	cmp	r1, #0
 8001c2c:	461e      	mov	r6, r3
 8001c2e:	b096      	sub	sp, #88	@ 0x58
 8001c30:	da0c      	bge.n	8001c4c <__swhatbuf_r+0x2c>
 8001c32:	89a3      	ldrh	r3, [r4, #12]
 8001c34:	2100      	movs	r1, #0
 8001c36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c3a:	bf14      	ite	ne
 8001c3c:	2340      	movne	r3, #64	@ 0x40
 8001c3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c42:	2000      	movs	r0, #0
 8001c44:	6031      	str	r1, [r6, #0]
 8001c46:	602b      	str	r3, [r5, #0]
 8001c48:	b016      	add	sp, #88	@ 0x58
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
 8001c4c:	466a      	mov	r2, sp
 8001c4e:	f000 f849 	bl	8001ce4 <_fstat_r>
 8001c52:	2800      	cmp	r0, #0
 8001c54:	dbed      	blt.n	8001c32 <__swhatbuf_r+0x12>
 8001c56:	9901      	ldr	r1, [sp, #4]
 8001c58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c60:	4259      	negs	r1, r3
 8001c62:	4159      	adcs	r1, r3
 8001c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c68:	e7eb      	b.n	8001c42 <__swhatbuf_r+0x22>

08001c6a <__smakebuf_r>:
 8001c6a:	898b      	ldrh	r3, [r1, #12]
 8001c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c6e:	079d      	lsls	r5, r3, #30
 8001c70:	4606      	mov	r6, r0
 8001c72:	460c      	mov	r4, r1
 8001c74:	d507      	bpl.n	8001c86 <__smakebuf_r+0x1c>
 8001c76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	6123      	str	r3, [r4, #16]
 8001c7e:	2301      	movs	r3, #1
 8001c80:	6163      	str	r3, [r4, #20]
 8001c82:	b003      	add	sp, #12
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c86:	466a      	mov	r2, sp
 8001c88:	ab01      	add	r3, sp, #4
 8001c8a:	f7ff ffc9 	bl	8001c20 <__swhatbuf_r>
 8001c8e:	9f00      	ldr	r7, [sp, #0]
 8001c90:	4605      	mov	r5, r0
 8001c92:	4639      	mov	r1, r7
 8001c94:	4630      	mov	r0, r6
 8001c96:	f7ff fb0b 	bl	80012b0 <_malloc_r>
 8001c9a:	b948      	cbnz	r0, 8001cb0 <__smakebuf_r+0x46>
 8001c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ca0:	059a      	lsls	r2, r3, #22
 8001ca2:	d4ee      	bmi.n	8001c82 <__smakebuf_r+0x18>
 8001ca4:	f023 0303 	bic.w	r3, r3, #3
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	81a3      	strh	r3, [r4, #12]
 8001cae:	e7e2      	b.n	8001c76 <__smakebuf_r+0xc>
 8001cb0:	89a3      	ldrh	r3, [r4, #12]
 8001cb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cba:	81a3      	strh	r3, [r4, #12]
 8001cbc:	9b01      	ldr	r3, [sp, #4]
 8001cbe:	6020      	str	r0, [r4, #0]
 8001cc0:	b15b      	cbz	r3, 8001cda <__smakebuf_r+0x70>
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cc8:	f000 f81e 	bl	8001d08 <_isatty_r>
 8001ccc:	b128      	cbz	r0, 8001cda <__smakebuf_r+0x70>
 8001cce:	89a3      	ldrh	r3, [r4, #12]
 8001cd0:	f023 0303 	bic.w	r3, r3, #3
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	81a3      	strh	r3, [r4, #12]
 8001cda:	89a3      	ldrh	r3, [r4, #12]
 8001cdc:	431d      	orrs	r5, r3
 8001cde:	81a5      	strh	r5, [r4, #12]
 8001ce0:	e7cf      	b.n	8001c82 <__smakebuf_r+0x18>
	...

08001ce4 <_fstat_r>:
 8001ce4:	b538      	push	{r3, r4, r5, lr}
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	4d06      	ldr	r5, [pc, #24]	@ (8001d04 <_fstat_r+0x20>)
 8001cea:	4604      	mov	r4, r0
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	f7ff f859 	bl	8000da8 <_fstat>
 8001cf6:	1c43      	adds	r3, r0, #1
 8001cf8:	d102      	bne.n	8001d00 <_fstat_r+0x1c>
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	b103      	cbz	r3, 8001d00 <_fstat_r+0x1c>
 8001cfe:	6023      	str	r3, [r4, #0]
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
 8001d02:	bf00      	nop
 8001d04:	200001e0 	.word	0x200001e0

08001d08 <_isatty_r>:
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	4d05      	ldr	r5, [pc, #20]	@ (8001d24 <_isatty_r+0x1c>)
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	602b      	str	r3, [r5, #0]
 8001d14:	f7ff f857 	bl	8000dc6 <_isatty>
 8001d18:	1c43      	adds	r3, r0, #1
 8001d1a:	d102      	bne.n	8001d22 <_isatty_r+0x1a>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	b103      	cbz	r3, 8001d22 <_isatty_r+0x1a>
 8001d20:	6023      	str	r3, [r4, #0]
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
 8001d24:	200001e0 	.word	0x200001e0

08001d28 <_init>:
 8001d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2a:	bf00      	nop
 8001d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d2e:	bc08      	pop	{r3}
 8001d30:	469e      	mov	lr, r3
 8001d32:	4770      	bx	lr

08001d34 <_fini>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	bf00      	nop
 8001d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3a:	bc08      	pop	{r3}
 8001d3c:	469e      	mov	lr, r3
 8001d3e:	4770      	bx	lr
