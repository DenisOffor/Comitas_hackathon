
Comitas_hackathon_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009bc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aec  08000af4  00001af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000aec  08000aec  00001af4  2**0
                  CONTENTS
  4 .ARM          00000000  08000aec  08000aec  00001af4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000aec  08000af4  00001af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000aec  08000aec  00001aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000af0  08000af0  00001af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001af4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000af4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000af4  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cab  00000000  00000000  00001b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044c  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00002c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b5  00000000  00000000  00002d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff09  00000000  00000000  00002dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000143e  00000000  00000000  00012cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053963  00000000  00000000  0001411c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00067a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000354  00000000  00000000  00067ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00067e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ad4 	.word	0x08000ad4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ad4 	.word	0x08000ad4

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c2:	2afd      	cmp	r2, #253	@ 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	@ 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	@ 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	db0b      	blt.n	800052a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	f003 021f 	and.w	r2, r3, #31
 8000518:	4906      	ldr	r1, [pc, #24]	@ (8000534 <__NVIC_EnableIRQ+0x34>)
 800051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051e:	095b      	lsrs	r3, r3, #5
 8000520:	2001      	movs	r0, #1
 8000522:	fa00 f202 	lsl.w	r2, r0, r2
 8000526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	e000e100 	.word	0xe000e100

08000538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000548:	2b00      	cmp	r3, #0
 800054a:	db0a      	blt.n	8000562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	b2da      	uxtb	r2, r3
 8000550:	490c      	ldr	r1, [pc, #48]	@ (8000584 <__NVIC_SetPriority+0x4c>)
 8000552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000556:	0112      	lsls	r2, r2, #4
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	440b      	add	r3, r1
 800055c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000560:	e00a      	b.n	8000578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4908      	ldr	r1, [pc, #32]	@ (8000588 <__NVIC_SetPriority+0x50>)
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	f003 030f 	and.w	r3, r3, #15
 800056e:	3b04      	subs	r3, #4
 8000570:	0112      	lsls	r2, r2, #4
 8000572:	b2d2      	uxtb	r2, r2
 8000574:	440b      	add	r3, r1
 8000576:	761a      	strb	r2, [r3, #24]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000e100 	.word	0xe000e100
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <TIM2_IRQHandler>:
DS18B20_CMD ds18b20_cmd = TEMPERATURE_CONVERTING;
uint8_t ds_buff[9];
uint16_t temp;
float temperature;

void TIM2_IRQHandler() {
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000590:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000594:	691b      	ldr	r3, [r3, #16]
 8000596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	6113      	str	r3, [r2, #16]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80005a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005aa:	f023 0301 	bic.w	r3, r3, #1
 80005ae:	6013      	str	r3, [r2, #0]
	ds18b20_cmd = TEMPERATURE_READING;
 80005b0:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <TIM2_IRQHandler+0x34>)
 80005b2:	2202      	movs	r2, #2
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	2000001c 	.word	0x2000001c

080005c4 <init_Gpio_for_ds>:

void init_Gpio_for_ds() {
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	//PIN for Data line (DQ) of One-wire interface
	RCC->APB2ENR |= RCC_PORT_DS18B20;
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <init_Gpio_for_ds+0x60>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a15      	ldr	r2, [pc, #84]	@ (8000624 <init_Gpio_for_ds+0x60>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
	PORT_DS18B20->CRH |= GPIO_MODE_DS18B20;
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <init_Gpio_for_ds+0x64>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	4a13      	ldr	r2, [pc, #76]	@ (8000628 <init_Gpio_for_ds+0x64>)
 80005da:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80005de:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->CRH |= GPIO_OPEN_DRAIN_DS18B20;
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <init_Gpio_for_ds+0x64>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <init_Gpio_for_ds+0x64>)
 80005e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005ea:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <init_Gpio_for_ds+0x64>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <init_Gpio_for_ds+0x64>)
 80005f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005f6:	60d3      	str	r3, [r2, #12]

	//PIN for LED, which will signalize about error
	RCC->APB2ENR |= RCC_PORT_LED;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <init_Gpio_for_ds+0x60>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a09      	ldr	r2, [pc, #36]	@ (8000624 <init_Gpio_for_ds+0x60>)
 80005fe:	f043 0304 	orr.w	r3, r3, #4
 8000602:	6193      	str	r3, [r2, #24]
	PORT_LED->CRH |= GPIO_MODE_LED;
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <init_Gpio_for_ds+0x64>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <init_Gpio_for_ds+0x64>)
 800060a:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 800060e:	6053      	str	r3, [r2, #4]
	PORT_LED->CRH &= GPIO_PUSH_PULL_LED;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <init_Gpio_for_ds+0x64>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <init_Gpio_for_ds+0x64>)
 8000616:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800061a:	6053      	str	r3, [r2, #4]
	//PORT_LED->ODR |= (1 << PIN_LED);
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000
 8000628:	40010800 	.word	0x40010800

0800062c <init_tim1_for_us>:

void init_tim1_for_us() {
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <init_tim1_for_us+0x28>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a07      	ldr	r2, [pc, #28]	@ (8000654 <init_tim1_for_us+0x28>)
 8000636:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800063a:	6193      	str	r3, [r2, #24]
	TIM1->ARR = 1000;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <init_tim1_for_us+0x2c>)
 800063e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 8;
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <init_tim1_for_us+0x2c>)
 8000646:	2208      	movs	r2, #8
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	40012c00 	.word	0x40012c00

0800065c <init_tim2_for_delay>:

void init_tim2_for_delay() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <init_tim2_for_delay+0x50>)
 8000662:	69db      	ldr	r3, [r3, #28]
 8000664:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <init_tim2_for_delay+0x50>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	61d3      	str	r3, [r2, #28]
	TIM2->ARR = 8000;
 800066c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000670:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 1000;
 8000676:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800067a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800067e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->DIER |= TIM_DIER_UIE;
 8000680:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000684:	68db      	ldr	r3, [r3, #12]
 8000686:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 8000690:	201c      	movs	r0, #28
 8000692:	f7ff ff35 	bl	8000500 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8000696:	2101      	movs	r1, #1
 8000698:	201c      	movs	r0, #28
 800069a:	f7ff ff4d 	bl	8000538 <__NVIC_SetPriority>
	TIM2->CR1 = TIM_CR1_CEN;
 800069e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a2:	2201      	movs	r2, #1
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000

080006b0 <ds_reset_pulse>:

void ds_reset_pulse()
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
	uint8_t result;
	//line should be in high state
	if((PORT_DS18B20->IDR & (1 << PIN_DS18B20)) == 0) {
 80006b6:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <ds_reset_pulse+0x90>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d103      	bne.n	80006ca <ds_reset_pulse+0x1a>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <ds_reset_pulse+0x94>)
 80006c4:	2203      	movs	r2, #3
 80006c6:	701a      	strb	r2, [r3, #0]
		return;
 80006c8:	e036      	b.n	8000738 <ds_reset_pulse+0x88>
	}
	TIM1->CNT = 0;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <ds_reset_pulse+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <ds_reset_pulse+0x98>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000748 <ds_reset_pulse+0x98>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]
	//make the line go to low and wait in this state 480-960 us
	PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <ds_reset_pulse+0x90>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a17      	ldr	r2, [pc, #92]	@ (8000740 <ds_reset_pulse+0x90>)
 80006e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e6:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 480) {};
 80006e8:	bf00      	nop
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <ds_reset_pulse+0x98>)
 80006ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ee:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80006f2:	d3fa      	bcc.n	80006ea <ds_reset_pulse+0x3a>
	//release the line (let go it to high) and wait to respond of DS18B20 after 15-60 us of wait
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <ds_reset_pulse+0x90>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	4a11      	ldr	r2, [pc, #68]	@ (8000740 <ds_reset_pulse+0x90>)
 80006fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006fe:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 520) {};
 8000700:	bf00      	nop
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <ds_reset_pulse+0x98>)
 8000704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000706:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800070a:	d3fa      	bcc.n	8000702 <ds_reset_pulse+0x52>
	//read line in order to check answer from DS18B20
	result = PORT_DS18B20->IDR & (1 << PIN_DS18B20);
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <ds_reset_pulse+0x90>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	2300      	movs	r3, #0
 8000712:	71fb      	strb	r3, [r7, #7]
//	//wait minimum 480us from moment, where we release the line
	while(TIM1->CNT < 960) {};
 8000714:	bf00      	nop
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <ds_reset_pulse+0x98>)
 8000718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800071a:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 800071e:	d3fa      	bcc.n	8000716 <ds_reset_pulse+0x66>
//	//if line was in high state - there are no answer from DS18B20 :(
	if(result)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d002      	beq.n	800072c <ds_reset_pulse+0x7c>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <ds_reset_pulse+0x94>)
 8000728:	2203      	movs	r2, #3
 800072a:	701a      	strb	r2, [r3, #0]
	TIM1->CR1 &= ~TIM_CR1_CEN;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <ds_reset_pulse+0x98>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a05      	ldr	r2, [pc, #20]	@ (8000748 <ds_reset_pulse+0x98>)
 8000732:	f023 0301 	bic.w	r3, r3, #1
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40010800 	.word	0x40010800
 8000744:	2000001c 	.word	0x2000001c
 8000748:	40012c00 	.word	0x40012c00

0800074c <ds_write_bit>:

void ds_write_bit(uint8_t bit)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	TIM1->CNT = 0;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <ds_write_bit+0x70>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <ds_write_bit+0x70>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <ds_write_bit+0x70>)
 8000762:	f043 0301 	orr.w	r3, r3, #1
 8000766:	6013      	str	r3, [r2, #0]
	//make the line go to low and wait in this state at least 1 us
    PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <ds_write_bit+0x74>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	4a14      	ldr	r2, [pc, #80]	@ (80007c0 <ds_write_bit+0x74>)
 800076e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000772:	60d3      	str	r3, [r2, #12]
    while(TIM1->CNT < 2) {};
 8000774:	bf00      	nop
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <ds_write_bit+0x70>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	2b01      	cmp	r3, #1
 800077c:	d9fb      	bls.n	8000776 <ds_write_bit+0x2a>
    //set bit on line
    if(bit)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <ds_write_bit+0x44>
	  PORT_DS18B20->ODR |=  (1 << PIN_DS18B20);
 8000784:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <ds_write_bit+0x74>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	4a0d      	ldr	r2, [pc, #52]	@ (80007c0 <ds_write_bit+0x74>)
 800078a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800078e:	60d3      	str	r3, [r2, #12]
    //"write operation" with bit last 60-120us
    while(TIM1->CNT < 60) {};
 8000790:	bf00      	nop
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <ds_write_bit+0x70>)
 8000794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000796:	2b3b      	cmp	r3, #59	@ 0x3b
 8000798:	d9fb      	bls.n	8000792 <ds_write_bit+0x46>
    //release line again
    PORT_DS18B20->ODR |=  (1 << PIN_DS18B20);
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <ds_write_bit+0x74>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a08      	ldr	r2, [pc, #32]	@ (80007c0 <ds_write_bit+0x74>)
 80007a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007a4:	60d3      	str	r3, [r2, #12]
    TIM1->CR1 &= ~TIM_CR1_CEN;
 80007a6:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <ds_write_bit+0x70>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a04      	ldr	r2, [pc, #16]	@ (80007bc <ds_write_bit+0x70>)
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	6013      	str	r3, [r2, #0]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40012c00 	.word	0x40012c00
 80007c0:	40010800 	.word	0x40010800

080007c4 <ds_write_byte>:

void ds_write_byte(uint8_t byte)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8; i++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	e00f      	b.n	80007f4 <ds_write_byte+0x30>
		ds_write_bit(byte & (1 << i));
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2201      	movs	r2, #1
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	b25a      	sxtb	r2, r3
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	4013      	ands	r3, r2
 80007e4:	b25b      	sxtb	r3, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ffaf 	bl	800074c <ds_write_bit>
	for(uint8_t i = 0; i < 8; i++)
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	3301      	adds	r3, #1
 80007f2:	73fb      	strb	r3, [r7, #15]
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	2b07      	cmp	r3, #7
 80007f8:	d9ec      	bls.n	80007d4 <ds_write_byte+0x10>
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <ds_read_bit>:

uint8_t ds_read_bit()
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
	uint8_t result;
	TIM1->CNT=0;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <ds_read_bit+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <ds_read_bit+0x74>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a18      	ldr	r2, [pc, #96]	@ (8000878 <ds_read_bit+0x74>)
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6013      	str	r3, [r2, #0]
	//make the line go to low and wait in this state at least 1 us
	PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 800081c:	4b17      	ldr	r3, [pc, #92]	@ (800087c <ds_read_bit+0x78>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	4a16      	ldr	r2, [pc, #88]	@ (800087c <ds_read_bit+0x78>)
 8000822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000826:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 2) {};
 8000828:	bf00      	nop
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <ds_read_bit+0x74>)
 800082c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082e:	2b01      	cmp	r3, #1
 8000830:	d9fb      	bls.n	800082a <ds_read_bit+0x26>
	//release line in order to DS18B20 set bit on line
	PORT_DS18B20->ODR |=  (1 << PIN_DS18B20);
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <ds_read_bit+0x78>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	4a11      	ldr	r2, [pc, #68]	@ (800087c <ds_read_bit+0x78>)
 8000838:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800083c:	60d3      	str	r3, [r2, #12]
	//wait at least 15us before read bit
	while(TIM1->CNT < 15) {};
 800083e:	bf00      	nop
 8000840:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <ds_read_bit+0x74>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000844:	2b0e      	cmp	r3, #14
 8000846:	d9fb      	bls.n	8000840 <ds_read_bit+0x3c>
	//read bit
	result = (PORT_DS18B20->IDR & (1 << PIN_DS18B20)) >> PIN_DS18B20;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <ds_read_bit+0x78>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	0b1b      	lsrs	r3, r3, #12
 800084e:	b2db      	uxtb	r3, r3
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	71fb      	strb	r3, [r7, #7]
	while(TIM1->CNT < 60 ) {};
 8000856:	bf00      	nop
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <ds_read_bit+0x74>)
 800085a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800085c:	2b3b      	cmp	r3, #59	@ 0x3b
 800085e:	d9fb      	bls.n	8000858 <ds_read_bit+0x54>
	//"read operation" with bit at least 60
	TIM1->CR1 &= ~TIM_CR1_CEN;
 8000860:	4b05      	ldr	r3, [pc, #20]	@ (8000878 <ds_read_bit+0x74>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a04      	ldr	r2, [pc, #16]	@ (8000878 <ds_read_bit+0x74>)
 8000866:	f023 0301 	bic.w	r3, r3, #1
 800086a:	6013      	str	r3, [r2, #0]
	return result;
 800086c:	79fb      	ldrb	r3, [r7, #7]
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40012c00 	.word	0x40012c00
 800087c:	40010800 	.word	0x40010800

08000880 <ds_read_byte>:

uint8_t ds_read_byte()
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8; i++)
 800088a:	2300      	movs	r3, #0
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	e00f      	b.n	80008b0 <ds_read_byte+0x30>
		result |= (ds_read_bit() << i);
 8000890:	f7ff ffb8 	bl	8000804 <ds_read_bit>
 8000894:	4603      	mov	r3, r0
 8000896:	461a      	mov	r2, r3
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	b25a      	sxtb	r2, r3
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b25b      	sxtb	r3, r3
 80008a8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8; i++)
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	3301      	adds	r3, #1
 80008ae:	71bb      	strb	r3, [r7, #6]
 80008b0:	79bb      	ldrb	r3, [r7, #6]
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	d9ec      	bls.n	8000890 <ds_read_byte+0x10>
	return result;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <TIM_1sec_on>:

void TIM_1sec_on() {
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 80008c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 80008cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <temperature_measurment_start>:

void temperature_measurment_start() {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 80008e8:	f7ff fee2 	bl	80006b0 <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <temperature_measurment_start+0x28>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b03      	cmp	r3, #3
 80008f2:	d008      	beq.n	8000906 <temperature_measurment_start+0x22>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 80008f4:	20cc      	movs	r0, #204	@ 0xcc
 80008f6:	f7ff ff65 	bl	80007c4 <ds_write_byte>
	ds_write_byte(CONVERT_TEMP);
 80008fa:	2044      	movs	r0, #68	@ 0x44
 80008fc:	f7ff ff62 	bl	80007c4 <ds_write_byte>

	TIM_1sec_on();
 8000900:	f7ff ffde 	bl	80008c0 <TIM_1sec_on>
 8000904:	e000      	b.n	8000908 <temperature_measurment_start+0x24>
		return;
 8000906:	bf00      	nop
}
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000001c 	.word	0x2000001c

08000910 <temprepature_measurment_read>:

void temprepature_measurment_read() {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 8000916:	f7ff fecb 	bl	80006b0 <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <temprepature_measurment_read+0x94>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b03      	cmp	r3, #3
 8000920:	d03b      	beq.n	800099a <temprepature_measurment_read+0x8a>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 8000922:	20cc      	movs	r0, #204	@ 0xcc
 8000924:	f7ff ff4e 	bl	80007c4 <ds_write_byte>
	ds_write_byte(READ_DATA);
 8000928:	20be      	movs	r0, #190	@ 0xbe
 800092a:	f7ff ff4b 	bl	80007c4 <ds_write_byte>

	for(int i = 0; i < 9; i++ )
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	e00b      	b.n	800094c <temprepature_measurment_read+0x3c>
		ds_buff[i] = ds_read_byte();
 8000934:	f7ff ffa4 	bl	8000880 <ds_read_byte>
 8000938:	4603      	mov	r3, r0
 800093a:	4619      	mov	r1, r3
 800093c:	4a1a      	ldr	r2, [pc, #104]	@ (80009a8 <temprepature_measurment_read+0x98>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	460a      	mov	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 9; i++ )
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3301      	adds	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b08      	cmp	r3, #8
 8000950:	ddf0      	ble.n	8000934 <temprepature_measurment_read+0x24>

	//convert temperature
	temp = ds_buff[1];
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <temprepature_measurment_read+0x98>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	461a      	mov	r2, r3
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <temprepature_measurment_read+0x9c>)
 800095a:	801a      	strh	r2, [r3, #0]
	temp = temp << 8;
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <temprepature_measurment_read+0x9c>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b29a      	uxth	r2, r3
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <temprepature_measurment_read+0x9c>)
 8000966:	801a      	strh	r2, [r3, #0]
	temp |= ds_buff[0];
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <temprepature_measurment_read+0x98>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <temprepature_measurment_read+0x9c>)
 8000970:	881b      	ldrh	r3, [r3, #0]
 8000972:	4313      	orrs	r3, r2
 8000974:	b29a      	uxth	r2, r3
 8000976:	4b0d      	ldr	r3, [pc, #52]	@ (80009ac <temprepature_measurment_read+0x9c>)
 8000978:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp * 0.0625;
 800097a:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <temprepature_measurment_read+0x9c>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fd60 	bl	8000444 <__aeabi_ui2f>
 8000984:	4603      	mov	r3, r0
 8000986:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fbf0 	bl	8000170 <__aeabi_fmul>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <temprepature_measurment_read+0xa0>)
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	e000      	b.n	800099c <temprepature_measurment_read+0x8c>
		return;
 800099a:	bf00      	nop
}
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000001c 	.word	0x2000001c
 80009a8:	20000020 	.word	0x20000020
 80009ac:	2000002a 	.word	0x2000002a
 80009b0:	2000002c 	.word	0x2000002c

080009b4 <init_DS18B20>:

void init_DS18B20() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	init_Gpio_for_ds();
 80009b8:	f7ff fe04 	bl	80005c4 <init_Gpio_for_ds>
	init_tim1_for_us();
 80009bc:	f7ff fe36 	bl	800062c <init_tim1_for_us>
	init_tim2_for_delay();
 80009c0:	f7ff fe4c 	bl	800065c <init_tim2_for_delay>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <DS18B20_measure_temperature>:

void DS18B20_measure_temperature() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	switch(ds18b20_cmd) {
 80009cc:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <DS18B20_measure_temperature+0x58>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d81e      	bhi.n	8000a12 <DS18B20_measure_temperature+0x4a>
 80009d4:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <DS18B20_measure_temperature+0x14>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	08000a1b 	.word	0x08000a1b
 80009e4:	080009f9 	.word	0x080009f9
 80009e8:	08000a05 	.word	0x08000a05
		case TEMPERATURE_CONVERTING:
			ds18b20_cmd = WAITING_1SEC;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <DS18B20_measure_temperature+0x58>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
			temperature_measurment_start();
 80009f2:	f7ff ff77 	bl	80008e4 <temperature_measurment_start>
			break;
 80009f6:	e011      	b.n	8000a1c <DS18B20_measure_temperature+0x54>
		case TEMPERATURE_READING:
			temprepature_measurment_read();
 80009f8:	f7ff ff8a 	bl	8000910 <temprepature_measurment_read>
			ds18b20_cmd = TEMPERATURE_CONVERTING;
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <DS18B20_measure_temperature+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
			break;
 8000a02:	e00b      	b.n	8000a1c <DS18B20_measure_temperature+0x54>
		case ERROR_WITH_SENSOR:
			PORT_LED->ODR |= (1 << PIN_LED);
 8000a04:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <DS18B20_measure_temperature+0x5c>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	4a06      	ldr	r2, [pc, #24]	@ (8000a24 <DS18B20_measure_temperature+0x5c>)
 8000a0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a0e:	60d3      	str	r3, [r2, #12]
			//ds18b20_cmd = TEMPERATURE_CONVERTING;
			break;
 8000a10:	e004      	b.n	8000a1c <DS18B20_measure_temperature+0x54>
		case WAITING_1SEC:
		break;
		default: ds18b20_cmd = TEMPERATURE_CONVERTING;
 8000a12:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <DS18B20_measure_temperature+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
			break;
 8000a18:	e000      	b.n	8000a1c <DS18B20_measure_temperature+0x54>
		break;
 8000a1a:	bf00      	nop
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000001c 	.word	0x2000001c
 8000a24:	40010800 	.word	0x40010800

08000a28 <main>:
#include "ds18b20.h"

int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	init_DS18B20();
 8000a2c:	f7ff ffc2 	bl	80009b4 <init_DS18B20>

  while (1)
  {
	  DS18B20_measure_temperature();
 8000a30:	f7ff ffca 	bl	80009c8 <DS18B20_measure_temperature>
 8000a34:	e7fc      	b.n	8000a30 <main+0x8>
	...

08000a38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a38:	480d      	ldr	r0, [pc, #52]	@ (8000a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a3c:	f7ff fd5a 	bl	80004f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	@ (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	@ (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	@ (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a66:	f000 f811 	bl	8000a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6a:	f7ff ffdd 	bl	8000a28 <main>

08000a6e <LoopForever>:

LoopForever:
  b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   r0, =_estack
 8000a70:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a7c:	08000af4 	.word	0x08000af4
  ldr r2, =_sbss
 8000a80:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a84:	20000030 	.word	0x20000030

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <__libc_init_array>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	2600      	movs	r6, #0
 8000a90:	4d0c      	ldr	r5, [pc, #48]	@ (8000ac4 <__libc_init_array+0x38>)
 8000a92:	4c0d      	ldr	r4, [pc, #52]	@ (8000ac8 <__libc_init_array+0x3c>)
 8000a94:	1b64      	subs	r4, r4, r5
 8000a96:	10a4      	asrs	r4, r4, #2
 8000a98:	42a6      	cmp	r6, r4
 8000a9a:	d109      	bne.n	8000ab0 <__libc_init_array+0x24>
 8000a9c:	f000 f81a 	bl	8000ad4 <_init>
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	4d0a      	ldr	r5, [pc, #40]	@ (8000acc <__libc_init_array+0x40>)
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ad0 <__libc_init_array+0x44>)
 8000aa6:	1b64      	subs	r4, r4, r5
 8000aa8:	10a4      	asrs	r4, r4, #2
 8000aaa:	42a6      	cmp	r6, r4
 8000aac:	d105      	bne.n	8000aba <__libc_init_array+0x2e>
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab4:	4798      	blx	r3
 8000ab6:	3601      	adds	r6, #1
 8000ab8:	e7ee      	b.n	8000a98 <__libc_init_array+0xc>
 8000aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8000abe:	4798      	blx	r3
 8000ac0:	3601      	adds	r6, #1
 8000ac2:	e7f2      	b.n	8000aaa <__libc_init_array+0x1e>
 8000ac4:	08000aec 	.word	0x08000aec
 8000ac8:	08000aec 	.word	0x08000aec
 8000acc:	08000aec 	.word	0x08000aec
 8000ad0:	08000af0 	.word	0x08000af0

08000ad4 <_init>:
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad6:	bf00      	nop
 8000ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ada:	bc08      	pop	{r3}
 8000adc:	469e      	mov	lr, r3
 8000ade:	4770      	bx	lr

08000ae0 <_fini>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	bf00      	nop
 8000ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae6:	bc08      	pop	{r3}
 8000ae8:	469e      	mov	lr, r3
 8000aea:	4770      	bx	lr
