
Comitas_hackathon_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001afc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001c2c  08001c2c  00002c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c70  08001c70  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c70  08001c70  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c70  08001c70  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c70  08001c70  00002c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c74  08001c74  00002c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001c78  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000006c  08001ce4  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08001ce4  000031f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dc0  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000098d  00000000  00000000  00004e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  000057e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000017f  00000000  00000000  00005a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011d53  00000000  00000000  00005ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b86  00000000  00000000  000178fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059571  00000000  00000000  0001a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000739f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f44  00000000  00000000  00073a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00074978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001c14 	.word	0x08001c14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08001c14 	.word	0x08001c14

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c2:	2afd      	cmp	r2, #253	@ 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	@ 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	@ 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_f2iz>:
 80004f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004fc:	d30f      	bcc.n	800051e <__aeabi_f2iz+0x2a>
 80004fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000502:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000506:	d90d      	bls.n	8000524 <__aeabi_f2iz+0x30>
 8000508:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800050c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000510:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000514:	fa23 f002 	lsr.w	r0, r3, r2
 8000518:	bf18      	it	ne
 800051a:	4240      	negne	r0, r0
 800051c:	4770      	bx	lr
 800051e:	f04f 0000 	mov.w	r0, #0
 8000522:	4770      	bx	lr
 8000524:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000528:	d101      	bne.n	800052e <__aeabi_f2iz+0x3a>
 800052a:	0242      	lsls	r2, r0, #9
 800052c:	d105      	bne.n	800053a <__aeabi_f2iz+0x46>
 800052e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000532:	bf08      	it	eq
 8000534:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000538:	4770      	bx	lr
 800053a:	f04f 0000 	mov.w	r0, #0
 800053e:	4770      	bx	lr

08000540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
 800055c:	db0b      	blt.n	8000576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f003 021f 	and.w	r2, r3, #31
 8000564:	4906      	ldr	r1, [pc, #24]	@ (8000580 <__NVIC_EnableIRQ+0x34>)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	095b      	lsrs	r3, r3, #5
 800056c:	2001      	movs	r0, #1
 800056e:	fa00 f202 	lsl.w	r2, r0, r2
 8000572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	e000e100 	.word	0xe000e100

08000584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	db0a      	blt.n	80005ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <__NVIC_SetPriority+0x4c>)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	0112      	lsls	r2, r2, #4
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	440b      	add	r3, r1
 80005a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ac:	e00a      	b.n	80005c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4908      	ldr	r1, [pc, #32]	@ (80005d4 <__NVIC_SetPriority+0x50>)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 030f 	and.w	r3, r3, #15
 80005ba:	3b04      	subs	r3, #4
 80005bc:	0112      	lsls	r2, r2, #4
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	440b      	add	r3, r1
 80005c2:	761a      	strb	r2, [r3, #24]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	e000e100 	.word	0xe000e100
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <DMA1_Channel4_IRQHandler>:
#include "UART_for_PC.h"

uint8_t UART_tx_buf[] = "Comitas\r\n";


void DMA1_Channel4_IRQHandler(void) {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF4;
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <DMA1_Channel4_IRQHandler+0x24>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <DMA1_Channel4_IRQHandler+0x24>)
 80005e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005e6:	6053      	str	r3, [r2, #4]
	DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <DMA1_Channel4_IRQHandler+0x28>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <DMA1_Channel4_IRQHandler+0x28>)
 80005ee:	f023 0301 	bic.w	r3, r3, #1
 80005f2:	6013      	str	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	40020000 	.word	0x40020000
 8000600:	40020044 	.word	0x40020044

08000604 <init_GPIO_for_USART>:

void init_GPIO_for_USART() {
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <init_GPIO_for_USART+0x24>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <init_GPIO_for_USART+0x24>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
	GPIOA->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1;
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <init_GPIO_for_USART+0x28>)
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <init_GPIO_for_USART+0x28>)
 800061a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800061e:	6053      	str	r3, [r2, #4]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	40021000 	.word	0x40021000
 800062c:	40010800 	.word	0x40010800

08000630 <init_USART>:

void init_USART() {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	init_GPIO_for_USART();
 8000634:	f7ff ffe6 	bl	8000604 <init_GPIO_for_USART>
	init_DMA_for_USART();
 8000638:	f000 f82a 	bl	8000690 <init_DMA_for_USART>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <init_USART+0x50>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a0f      	ldr	r2, [pc, #60]	@ (8000680 <init_USART+0x50>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000646:	6193      	str	r3, [r2, #24]
	USART1->CR1 |= USART_CR1_TE;
 8000648:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <init_USART+0x54>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4a0d      	ldr	r2, [pc, #52]	@ (8000684 <init_USART+0x54>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	60d3      	str	r3, [r2, #12]
	USART1->BRR = SystemCoreClock / 115200;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <init_USART+0x58>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <init_USART+0x54>)
 800065a:	490c      	ldr	r1, [pc, #48]	@ (800068c <init_USART+0x5c>)
 800065c:	fba1 1303 	umull	r1, r3, r1, r3
 8000660:	0c1b      	lsrs	r3, r3, #16
 8000662:	6093      	str	r3, [r2, #8]
	USART1->CR3 |= USART_CR3_DMAT;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <init_USART+0x54>)
 8000666:	695b      	ldr	r3, [r3, #20]
 8000668:	4a06      	ldr	r2, [pc, #24]	@ (8000684 <init_USART+0x54>)
 800066a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800066e:	6153      	str	r3, [r2, #20]
	USART1->CR1 |= USART_CR1_UE;
 8000670:	4b04      	ldr	r3, [pc, #16]	@ (8000684 <init_USART+0x54>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4a03      	ldr	r2, [pc, #12]	@ (8000684 <init_USART+0x54>)
 8000676:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000
 8000684:	40013800 	.word	0x40013800
 8000688:	20000000 	.word	0x20000000
 800068c:	91a2b3c5 	.word	0x91a2b3c5

08000690 <init_DMA_for_USART>:


void init_DMA_for_USART() {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <init_DMA_for_USART+0x4c>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a10      	ldr	r2, [pc, #64]	@ (80006dc <init_DMA_for_USART+0x4c>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6153      	str	r3, [r2, #20]
	//USART TX channel - 4
	DMA1_Channel4->CCR |= DMA_CCR_DIR | DMA_CCR_MINC;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <init_DMA_for_USART+0x50>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0e      	ldr	r2, [pc, #56]	@ (80006e0 <init_DMA_for_USART+0x50>)
 80006a6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80006aa:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CMAR = (uint32_t)(&UART_tx_buf[0]);
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <init_DMA_for_USART+0x50>)
 80006ae:	4a0d      	ldr	r2, [pc, #52]	@ (80006e4 <init_DMA_for_USART+0x54>)
 80006b0:	60da      	str	r2, [r3, #12]
	DMA1_Channel4->CPAR = (uint32_t)(&(USART1->DR));
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <init_DMA_for_USART+0x50>)
 80006b4:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <init_DMA_for_USART+0x58>)
 80006b6:	609a      	str	r2, [r3, #8]
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <init_DMA_for_USART+0x50>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <init_DMA_for_USART+0x50>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CNDTR = 0;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <init_DMA_for_USART+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]

	NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006ca:	200e      	movs	r0, #14
 80006cc:	f7ff ff3e 	bl	800054c <__NVIC_EnableIRQ>
	NVIC_SetPriority(DMA1_Channel4_IRQn, 3);
 80006d0:	2103      	movs	r1, #3
 80006d2:	200e      	movs	r0, #14
 80006d4:	f7ff ff56 	bl	8000584 <__NVIC_SetPriority>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40020044 	.word	0x40020044
 80006e4:	20000004 	.word	0x20000004
 80006e8:	40013804 	.word	0x40013804

080006ec <UART_send_data>:

void UART_send_data(uint8_t ch8) {
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	UART_tx_buf[0] = ch8;
 80006f6:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <UART_send_data+0x58>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	7013      	strb	r3, [r2, #0]
	DMA1_Channel4->CMAR = (uint32_t)(&UART_tx_buf[0]);
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <UART_send_data+0x5c>)
 80006fe:	4a11      	ldr	r2, [pc, #68]	@ (8000744 <UART_send_data+0x58>)
 8000700:	60da      	str	r2, [r3, #12]
	DMA1_Channel4->CNDTR = 1;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <UART_send_data+0x5c>)
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
	DMA1_Channel4->CCR |= DMA_CCR_EN;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <UART_send_data+0x5c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0e      	ldr	r2, [pc, #56]	@ (8000748 <UART_send_data+0x5c>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]
	while(DMA1_Channel4->CCR & DMA_CCR_EN) {};
 8000714:	bf00      	nop
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <UART_send_data+0x5c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1f9      	bne.n	8000716 <UART_send_data+0x2a>
	for(int i = 0; i < 100; i++);
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e002      	b.n	800072e <UART_send_data+0x42>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b63      	cmp	r3, #99	@ 0x63
 8000732:	ddf9      	ble.n	8000728 <UART_send_data+0x3c>
	flag = 0;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <UART_send_data+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000004 	.word	0x20000004
 8000748:	40020044 	.word	0x40020044
 800074c:	20000088 	.word	0x20000088

08000750 <__NVIC_EnableIRQ>:
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	2b00      	cmp	r3, #0
 8000760:	db0b      	blt.n	800077a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 021f 	and.w	r2, r3, #31
 8000768:	4906      	ldr	r1, [pc, #24]	@ (8000784 <__NVIC_EnableIRQ+0x34>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	095b      	lsrs	r3, r3, #5
 8000770:	2001      	movs	r0, #1
 8000772:	fa00 f202 	lsl.w	r2, r0, r2
 8000776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100

08000788 <__NVIC_SetPriority>:
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	6039      	str	r1, [r7, #0]
 8000792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	db0a      	blt.n	80007b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	490c      	ldr	r1, [pc, #48]	@ (80007d4 <__NVIC_SetPriority+0x4c>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	0112      	lsls	r2, r2, #4
 80007a8:	b2d2      	uxtb	r2, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007b0:	e00a      	b.n	80007c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4908      	ldr	r1, [pc, #32]	@ (80007d8 <__NVIC_SetPriority+0x50>)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	3b04      	subs	r3, #4
 80007c0:	0112      	lsls	r2, r2, #4
 80007c2:	b2d2      	uxtb	r2, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	761a      	strb	r2, [r3, #24]
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <TIM2_IRQHandler>:
DS18B20_CMD ds18b20_cmd = TEMPERATURE_CONVERTING;
uint8_t ds_buff[9];
uint16_t temp;
float temperature = 0;

void TIM2_IRQHandler() {
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80007e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ea:	f023 0301 	bic.w	r3, r3, #1
 80007ee:	6113      	str	r3, [r2, #16]
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80007f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007fa:	f023 0301 	bic.w	r3, r3, #1
 80007fe:	6013      	str	r3, [r2, #0]
	flag = 1;
 8000800:	4b04      	ldr	r3, [pc, #16]	@ (8000814 <TIM2_IRQHandler+0x38>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
	ds18b20_cmd = TEMPERATURE_READING;
 8000806:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <TIM2_IRQHandler+0x3c>)
 8000808:	2202      	movs	r2, #2
 800080a:	701a      	strb	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	20000088 	.word	0x20000088
 8000818:	2000008c 	.word	0x2000008c

0800081c <init_Gpio_for_ds>:

void init_Gpio_for_ds() {
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
	//PIN for Data line (DQ) of One-wire interface
	RCC->APB2ENR |= RCC_PORT_DS18B20;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <init_Gpio_for_ds+0x54>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <init_Gpio_for_ds+0x54>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
	PORT_DS18B20->CRH |= GPIO_MODE_DS18B20;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <init_Gpio_for_ds+0x58>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <init_Gpio_for_ds+0x58>)
 8000832:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000836:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->CRH |= GPIO_OPEN_DRAIN_DS18B20;
 8000838:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <init_Gpio_for_ds+0x58>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <init_Gpio_for_ds+0x58>)
 800083e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000842:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000844:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <init_Gpio_for_ds+0x58>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <init_Gpio_for_ds+0x58>)
 800084a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800084e:	60d3      	str	r3, [r2, #12]

	//PIN for LED, which will signalize about error
	RCC->APB2ENR |= RCC_PORT_LED;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <init_Gpio_for_ds+0x54>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <init_Gpio_for_ds+0x54>)
 8000856:	f043 0304 	orr.w	r3, r3, #4
 800085a:	6193      	str	r3, [r2, #24]
	PORT_LED->CRH |= GPIO_MODE_LED;
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <init_Gpio_for_ds+0x58>)
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	4a04      	ldr	r2, [pc, #16]	@ (8000874 <init_Gpio_for_ds+0x58>)
 8000862:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000866:	6053      	str	r3, [r2, #4]
	//PORT_LED->ODR |= (1 << PIN_LED);
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800

08000878 <init_tim1_for_us>:

void init_tim1_for_us() {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <init_tim1_for_us+0x28>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <init_tim1_for_us+0x28>)
 8000882:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000886:	6193      	str	r3, [r2, #24]
	TIM1->ARR = 1000;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <init_tim1_for_us+0x2c>)
 800088a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800088e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 8;
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <init_tim1_for_us+0x2c>)
 8000892:	2208      	movs	r2, #8
 8000894:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40012c00 	.word	0x40012c00

080008a8 <init_tim2_for_delay>:

void init_tim2_for_delay() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <init_tim2_for_delay+0x50>)
 80008ae:	69db      	ldr	r3, [r3, #28]
 80008b0:	4a11      	ldr	r2, [pc, #68]	@ (80008f8 <init_tim2_for_delay+0x50>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	61d3      	str	r3, [r2, #28]
	TIM2->ARR = 8000;
 80008b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008bc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80008c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 1000;
 80008c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->DIER |= TIM_DIER_UIE;
 80008cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80008dc:	201c      	movs	r0, #28
 80008de:	f7ff ff37 	bl	8000750 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 80008e2:	2101      	movs	r1, #1
 80008e4:	201c      	movs	r0, #28
 80008e6:	f7ff ff4f 	bl	8000788 <__NVIC_SetPriority>
	TIM2->CR1 = TIM_CR1_CEN;
 80008ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <ds_reset_pulse>:

void ds_reset_pulse()
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
	uint8_t result;
	//line should be in high state
	if((PORT_DS18B20->IDR & (1 << PIN_DS18B20)) == 0) {
 8000902:	4b22      	ldr	r3, [pc, #136]	@ (800098c <ds_reset_pulse+0x90>)
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800090a:	2b00      	cmp	r3, #0
 800090c:	d103      	bne.n	8000916 <ds_reset_pulse+0x1a>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 800090e:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <ds_reset_pulse+0x94>)
 8000910:	2203      	movs	r2, #3
 8000912:	701a      	strb	r2, [r3, #0]
		return;
 8000914:	e036      	b.n	8000984 <ds_reset_pulse+0x88>
	}
	TIM1->CNT = 0;
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <ds_reset_pulse+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 800091c:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <ds_reset_pulse+0x98>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a1c      	ldr	r2, [pc, #112]	@ (8000994 <ds_reset_pulse+0x98>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]
	//make the line go to low and wait in this state 480-960 us
	PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <ds_reset_pulse+0x90>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a17      	ldr	r2, [pc, #92]	@ (800098c <ds_reset_pulse+0x90>)
 800092e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000932:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 480) {};
 8000934:	bf00      	nop
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <ds_reset_pulse+0x98>)
 8000938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800093a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800093e:	d3fa      	bcc.n	8000936 <ds_reset_pulse+0x3a>
	//release the line (let go it to high) and wait to respond of DS18B20 after 15-60 us of wait
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <ds_reset_pulse+0x90>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a11      	ldr	r2, [pc, #68]	@ (800098c <ds_reset_pulse+0x90>)
 8000946:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800094a:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 520) {};
 800094c:	bf00      	nop
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <ds_reset_pulse+0x98>)
 8000950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000952:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8000956:	d3fa      	bcc.n	800094e <ds_reset_pulse+0x52>
	//read line in order to check answer from DS18B20
	result = PORT_DS18B20->IDR & (1 << PIN_DS18B20);
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <ds_reset_pulse+0x90>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2300      	movs	r3, #0
 800095e:	71fb      	strb	r3, [r7, #7]
//	//wait minimum 480us from moment, where we release the line
	while(TIM1->CNT < 960) {};
 8000960:	bf00      	nop
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <ds_reset_pulse+0x98>)
 8000964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000966:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 800096a:	d3fa      	bcc.n	8000962 <ds_reset_pulse+0x66>
//	//if line was in high state - there are no answer from DS18B20 :(
	if(result)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <ds_reset_pulse+0x7c>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <ds_reset_pulse+0x94>)
 8000974:	2203      	movs	r2, #3
 8000976:	701a      	strb	r2, [r3, #0]
	TIM1->CR1 &= ~TIM_CR1_CEN;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <ds_reset_pulse+0x98>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <ds_reset_pulse+0x98>)
 800097e:	f023 0301 	bic.w	r3, r3, #1
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40010800 	.word	0x40010800
 8000990:	2000008c 	.word	0x2000008c
 8000994:	40012c00 	.word	0x40012c00

08000998 <ds_write_bit>:

void ds_write_bit(uint8_t bit)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	TIM1->CNT = 0;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <ds_write_bit+0x7c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <ds_write_bit+0x7c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <ds_write_bit+0x7c>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6013      	str	r3, [r2, #0]
	while(TIM1->CNT < 5) {};
 80009b4:	bf00      	nop
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <ds_write_bit+0x7c>)
 80009b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d9fb      	bls.n	80009b6 <ds_write_bit+0x1e>
	//make the line go to low and wait in this state at least 1 us
    PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <ds_write_bit+0x80>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <ds_write_bit+0x80>)
 80009c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009c8:	60d3      	str	r3, [r2, #12]
    while(TIM1->CNT < 10) {};
 80009ca:	bf00      	nop
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <ds_write_bit+0x7c>)
 80009ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009d0:	2b09      	cmp	r3, #9
 80009d2:	d9fb      	bls.n	80009cc <ds_write_bit+0x34>
    //set bit on line
    if(bit)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d005      	beq.n	80009e6 <ds_write_bit+0x4e>
    	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <ds_write_bit+0x80>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <ds_write_bit+0x80>)
 80009e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009e4:	60d3      	str	r3, [r2, #12]
    //"write operation" with bit last 60-120us
    while(TIM1->CNT < 70) {};
 80009e6:	bf00      	nop
 80009e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <ds_write_bit+0x7c>)
 80009ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ec:	2b45      	cmp	r3, #69	@ 0x45
 80009ee:	d9fb      	bls.n	80009e8 <ds_write_bit+0x50>
    //release line again
    PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <ds_write_bit+0x80>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	4a08      	ldr	r2, [pc, #32]	@ (8000a18 <ds_write_bit+0x80>)
 80009f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80009fa:	60d3      	str	r3, [r2, #12]
    TIM1->CR1 &= ~TIM_CR1_CEN;
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <ds_write_bit+0x7c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <ds_write_bit+0x7c>)
 8000a02:	f023 0301 	bic.w	r3, r3, #1
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40012c00 	.word	0x40012c00
 8000a18:	40010800 	.word	0x40010800

08000a1c <ds_write_byte>:

void ds_write_byte(uint8_t byte)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8; i++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]
 8000a2a:	e00f      	b.n	8000a4c <ds_write_byte+0x30>
		ds_write_bit(byte & (1 << i));
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	2201      	movs	r2, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	b25a      	sxtb	r2, r3
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ffa9 	bl	8000998 <ds_write_bit>
	for(uint8_t i = 0; i < 8; i++)
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	d9ec      	bls.n	8000a2c <ds_write_byte+0x10>
}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <TIM_1sec_on>:
	for(uint8_t i = 0; i < 8; i++)
		result |= (ds_read_bit() << i);
	return result;
}

void TIM_1sec_on() {
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8000a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8000a68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <temperature_measurment_start>:

void temperature_measurment_start() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 8000a84:	f7ff ff3a 	bl	80008fc <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <temperature_measurment_start+0x28>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d008      	beq.n	8000aa2 <temperature_measurment_start+0x22>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 8000a90:	20cc      	movs	r0, #204	@ 0xcc
 8000a92:	f7ff ffc3 	bl	8000a1c <ds_write_byte>
	ds_write_byte(CONVERT_TEMP);
 8000a96:	2044      	movs	r0, #68	@ 0x44
 8000a98:	f7ff ffc0 	bl	8000a1c <ds_write_byte>
	TIM_1sec_on();
 8000a9c:	f7ff ffde 	bl	8000a5c <TIM_1sec_on>
 8000aa0:	e000      	b.n	8000aa4 <temperature_measurment_start+0x24>
		return;
 8000aa2:	bf00      	nop
}
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000008c 	.word	0x2000008c

08000aac <temprepature_measurment_read>:

void temprepature_measurment_read() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 8000ab0:	f7ff ff24 	bl	80008fc <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 8000ab4:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <temprepature_measurment_read+0x68>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d029      	beq.n	8000b10 <temprepature_measurment_read+0x64>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 8000abc:	20cc      	movs	r0, #204	@ 0xcc
 8000abe:	f7ff ffad 	bl	8000a1c <ds_write_byte>
	ds_write_byte(READ_DATA);
 8000ac2:	20be      	movs	r0, #190	@ 0xbe
 8000ac4:	f7ff ffaa 	bl	8000a1c <ds_write_byte>

	//for(int i = 0; i < 9; i++ )
	//	ds_buff[i] = ds_read_byte();

	//convert temperature
	temp = ds_buff[1];
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <temprepature_measurment_read+0x6c>)
 8000aca:	785b      	ldrb	r3, [r3, #1]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b13      	ldr	r3, [pc, #76]	@ (8000b1c <temprepature_measurment_read+0x70>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	temp = temp << 8;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <temprepature_measurment_read+0x70>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <temprepature_measurment_read+0x70>)
 8000adc:	801a      	strh	r2, [r3, #0]
	temp |= ds_buff[0];
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <temprepature_measurment_read+0x6c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <temprepature_measurment_read+0x70>)
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <temprepature_measurment_read+0x70>)
 8000aee:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp * 0.0625;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <temprepature_measurment_read+0x70>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fca5 	bl	8000444 <__aeabi_ui2f>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fb35 	bl	8000170 <__aeabi_fmul>
 8000b06:	4603      	mov	r3, r0
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <temprepature_measurment_read+0x74>)
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e000      	b.n	8000b12 <temprepature_measurment_read+0x66>
		return;
 8000b10:	bf00      	nop
}
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000008c 	.word	0x2000008c
 8000b18:	20000090 	.word	0x20000090
 8000b1c:	2000009a 	.word	0x2000009a
 8000b20:	2000009c 	.word	0x2000009c

08000b24 <init_DS18B20>:

void init_DS18B20() {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	init_Gpio_for_ds();
 8000b28:	f7ff fe78 	bl	800081c <init_Gpio_for_ds>
	init_tim1_for_us();
 8000b2c:	f7ff fea4 	bl	8000878 <init_tim1_for_us>
	init_tim2_for_delay();
 8000b30:	f7ff feba 	bl	80008a8 <init_tim2_for_delay>
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <DS18B20_measure_temperature>:

void DS18B20_measure_temperature() {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	switch(ds18b20_cmd) {
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <DS18B20_measure_temperature+0x64>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d824      	bhi.n	8000b8e <DS18B20_measure_temperature+0x56>
 8000b44:	a201      	add	r2, pc, #4	@ (adr r2, 8000b4c <DS18B20_measure_temperature+0x14>)
 8000b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b4a:	bf00      	nop
 8000b4c:	08000b5d 	.word	0x08000b5d
 8000b50:	08000b97 	.word	0x08000b97
 8000b54:	08000b69 	.word	0x08000b69
 8000b58:	08000b81 	.word	0x08000b81
		case TEMPERATURE_CONVERTING:
			temperature_measurment_start();
 8000b5c:	f7ff ff90 	bl	8000a80 <temperature_measurment_start>
			ds18b20_cmd = WAITING_1SEC;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <DS18B20_measure_temperature+0x64>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
			break;
 8000b66:	e017      	b.n	8000b98 <DS18B20_measure_temperature+0x60>
		case TEMPERATURE_READING:
			PORT_LED->ODR ^= (1 << PIN_LED);
 8000b68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <DS18B20_measure_temperature+0x68>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba0 <DS18B20_measure_temperature+0x68>)
 8000b6e:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 8000b72:	60d3      	str	r3, [r2, #12]
			temprepature_measurment_read();
 8000b74:	f7ff ff9a 	bl	8000aac <temprepature_measurment_read>
			ds18b20_cmd = TEMPERATURE_CONVERTING;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <DS18B20_measure_temperature+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
			break;
 8000b7e:	e00b      	b.n	8000b98 <DS18B20_measure_temperature+0x60>
		case ERROR_WITH_SENSOR:
			PORT_LED->ODR |= (1 << PIN_LED);
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <DS18B20_measure_temperature+0x68>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <DS18B20_measure_temperature+0x68>)
 8000b86:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b8a:	60d3      	str	r3, [r2, #12]
			//ds18b20_cmd = TEMPERATURE_CONVERTING;
			break;
 8000b8c:	e004      	b.n	8000b98 <DS18B20_measure_temperature+0x60>
		case WAITING_1SEC:
		break;
		default: ds18b20_cmd = TEMPERATURE_CONVERTING;
 8000b8e:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <DS18B20_measure_temperature+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
			break;
 8000b94:	e000      	b.n	8000b98 <DS18B20_measure_temperature+0x60>
		break;
 8000b96:	bf00      	nop
	}
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <__io_putchar>:
#include "ds18b20.h"
#include "TH02.h"
#include "UART_for_PC.h"
#include <stdio.h>

int __io_putchar(int ch) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	uint8_t ch8 = ch & 0xFF;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
	UART_send_data(ch8);
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fd9a 	bl	80006ec <UART_send_data>
	return ch;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <main>:

int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	init_DS18B20();
 8000bc8:	f7ff ffac 	bl	8000b24 <init_DS18B20>
	init_USART();
 8000bcc:	f7ff fd30 	bl	8000630 <init_USART>
	flag = 0;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <main+0x3c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
	TIM_1sec_on();
 8000bd6:	f7ff ff41 	bl	8000a5c <TIM_1sec_on>
  while (1)
  {
	  DS18B20_measure_temperature();
 8000bda:	f7ff ffad 	bl	8000b38 <DS18B20_measure_temperature>
	  if(flag == 1)
 8000bde:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <main+0x3c>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d1f9      	bne.n	8000bda <main+0x16>
		  printf(" temp: %d C\r\n", (int8_t)(temperature));
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <main+0x40>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fc82 	bl	80004f4 <__aeabi_f2iz>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b25b      	sxtb	r3, r3
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <main+0x44>)
 8000bf8:	f000 f994 	bl	8000f24 <iprintf>
	  DS18B20_measure_temperature();
 8000bfc:	e7ed      	b.n	8000bda <main+0x16>
 8000bfe:	bf00      	nop
 8000c00:	20000088 	.word	0x20000088
 8000c04:	2000009c 	.word	0x2000009c
 8000c08:	08001c2c 	.word	0x08001c2c

08000c0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e00a      	b.n	8000c34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c1e:	f3af 8000 	nop.w
 8000c22:	4601      	mov	r1, r0
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60ba      	str	r2, [r7, #8]
 8000c2a:	b2ca      	uxtb	r2, r1
 8000c2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dbf0      	blt.n	8000c1e <_read+0x12>
  }

  return len;
 8000c3c:	687b      	ldr	r3, [r7, #4]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b086      	sub	sp, #24
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	60f8      	str	r0, [r7, #12]
 8000c4e:	60b9      	str	r1, [r7, #8]
 8000c50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e009      	b.n	8000c6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	60ba      	str	r2, [r7, #8]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff9f 	bl	8000ba4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf1      	blt.n	8000c58 <_write+0x12>
  }
  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_close>:

int _close(int file)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr

08000cb2 <_isatty>:

int _isatty(int file)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
	...

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f000 f9ac 	bl	800106c <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20002800 	.word	0x20002800
 8000d40:	00000400 	.word	0x00000400
 8000d44:	200000a0 	.word	0x200000a0
 8000d48:	200001f0 	.word	0x200001f0

08000d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d4c:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d50:	f7ff fbf6 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7a:	f000 f97d 	bl	8001078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff ff21 	bl	8000bc4 <main>

08000d82 <LoopForever>:

LoopForever:
  b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   r0, =_estack
 8000d84:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d90:	08001c78 	.word	0x08001c78
  ldr r2, =_sbss
 8000d94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d98:	200001f0 	.word	0x200001f0

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>
	...

08000da0 <std>:
 8000da0:	2300      	movs	r3, #0
 8000da2:	b510      	push	{r4, lr}
 8000da4:	4604      	mov	r4, r0
 8000da6:	e9c0 3300 	strd	r3, r3, [r0]
 8000daa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dae:	6083      	str	r3, [r0, #8]
 8000db0:	8181      	strh	r1, [r0, #12]
 8000db2:	6643      	str	r3, [r0, #100]	@ 0x64
 8000db4:	81c2      	strh	r2, [r0, #14]
 8000db6:	6183      	str	r3, [r0, #24]
 8000db8:	4619      	mov	r1, r3
 8000dba:	2208      	movs	r2, #8
 8000dbc:	305c      	adds	r0, #92	@ 0x5c
 8000dbe:	f000 f906 	bl	8000fce <memset>
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <std+0x58>)
 8000dc4:	6224      	str	r4, [r4, #32]
 8000dc6:	6263      	str	r3, [r4, #36]	@ 0x24
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <std+0x5c>)
 8000dca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <std+0x60>)
 8000dce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <std+0x64>)
 8000dd2:	6323      	str	r3, [r4, #48]	@ 0x30
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <std+0x68>)
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	d006      	beq.n	8000de8 <std+0x48>
 8000dda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000dde:	4294      	cmp	r4, r2
 8000de0:	d002      	beq.n	8000de8 <std+0x48>
 8000de2:	33d0      	adds	r3, #208	@ 0xd0
 8000de4:	429c      	cmp	r4, r3
 8000de6:	d105      	bne.n	8000df4 <std+0x54>
 8000de8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000df0:	f000 b966 	b.w	80010c0 <__retarget_lock_init_recursive>
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	bf00      	nop
 8000df8:	08000f49 	.word	0x08000f49
 8000dfc:	08000f6b 	.word	0x08000f6b
 8000e00:	08000fa3 	.word	0x08000fa3
 8000e04:	08000fc7 	.word	0x08000fc7
 8000e08:	200000a4 	.word	0x200000a4

08000e0c <stdio_exit_handler>:
 8000e0c:	4a02      	ldr	r2, [pc, #8]	@ (8000e18 <stdio_exit_handler+0xc>)
 8000e0e:	4903      	ldr	r1, [pc, #12]	@ (8000e1c <stdio_exit_handler+0x10>)
 8000e10:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <stdio_exit_handler+0x14>)
 8000e12:	f000 b869 	b.w	8000ee8 <_fwalk_sglue>
 8000e16:	bf00      	nop
 8000e18:	20000010 	.word	0x20000010
 8000e1c:	08001959 	.word	0x08001959
 8000e20:	20000020 	.word	0x20000020

08000e24 <cleanup_stdio>:
 8000e24:	6841      	ldr	r1, [r0, #4]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <cleanup_stdio+0x34>)
 8000e28:	b510      	push	{r4, lr}
 8000e2a:	4299      	cmp	r1, r3
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	d001      	beq.n	8000e34 <cleanup_stdio+0x10>
 8000e30:	f000 fd92 	bl	8001958 <_fflush_r>
 8000e34:	68a1      	ldr	r1, [r4, #8]
 8000e36:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <cleanup_stdio+0x38>)
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d002      	beq.n	8000e42 <cleanup_stdio+0x1e>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f000 fd8b 	bl	8001958 <_fflush_r>
 8000e42:	68e1      	ldr	r1, [r4, #12]
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <cleanup_stdio+0x3c>)
 8000e46:	4299      	cmp	r1, r3
 8000e48:	d004      	beq.n	8000e54 <cleanup_stdio+0x30>
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e50:	f000 bd82 	b.w	8001958 <_fflush_r>
 8000e54:	bd10      	pop	{r4, pc}
 8000e56:	bf00      	nop
 8000e58:	200000a4 	.word	0x200000a4
 8000e5c:	2000010c 	.word	0x2000010c
 8000e60:	20000174 	.word	0x20000174

08000e64 <global_stdio_init.part.0>:
 8000e64:	b510      	push	{r4, lr}
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <global_stdio_init.part.0+0x30>)
 8000e68:	4c0b      	ldr	r4, [pc, #44]	@ (8000e98 <global_stdio_init.part.0+0x34>)
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <global_stdio_init.part.0+0x38>)
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	2104      	movs	r1, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	f7ff ff94 	bl	8000da0 <std>
 8000e78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	2109      	movs	r1, #9
 8000e80:	f7ff ff8e 	bl	8000da0 <std>
 8000e84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000e88:	2202      	movs	r2, #2
 8000e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e8e:	2112      	movs	r1, #18
 8000e90:	f7ff bf86 	b.w	8000da0 <std>
 8000e94:	200001dc 	.word	0x200001dc
 8000e98:	200000a4 	.word	0x200000a4
 8000e9c:	08000e0d 	.word	0x08000e0d

08000ea0 <__sfp_lock_acquire>:
 8000ea0:	4801      	ldr	r0, [pc, #4]	@ (8000ea8 <__sfp_lock_acquire+0x8>)
 8000ea2:	f000 b90e 	b.w	80010c2 <__retarget_lock_acquire_recursive>
 8000ea6:	bf00      	nop
 8000ea8:	200001e5 	.word	0x200001e5

08000eac <__sfp_lock_release>:
 8000eac:	4801      	ldr	r0, [pc, #4]	@ (8000eb4 <__sfp_lock_release+0x8>)
 8000eae:	f000 b909 	b.w	80010c4 <__retarget_lock_release_recursive>
 8000eb2:	bf00      	nop
 8000eb4:	200001e5 	.word	0x200001e5

08000eb8 <__sinit>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	f7ff fff0 	bl	8000ea0 <__sfp_lock_acquire>
 8000ec0:	6a23      	ldr	r3, [r4, #32]
 8000ec2:	b11b      	cbz	r3, 8000ecc <__sinit+0x14>
 8000ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec8:	f7ff bff0 	b.w	8000eac <__sfp_lock_release>
 8000ecc:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <__sinit+0x28>)
 8000ece:	6223      	str	r3, [r4, #32]
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__sinit+0x2c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f5      	bne.n	8000ec4 <__sinit+0xc>
 8000ed8:	f7ff ffc4 	bl	8000e64 <global_stdio_init.part.0>
 8000edc:	e7f2      	b.n	8000ec4 <__sinit+0xc>
 8000ede:	bf00      	nop
 8000ee0:	08000e25 	.word	0x08000e25
 8000ee4:	200001dc 	.word	0x200001dc

08000ee8 <_fwalk_sglue>:
 8000ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000eec:	4607      	mov	r7, r0
 8000eee:	4688      	mov	r8, r1
 8000ef0:	4614      	mov	r4, r2
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ef8:	f1b9 0901 	subs.w	r9, r9, #1
 8000efc:	d505      	bpl.n	8000f0a <_fwalk_sglue+0x22>
 8000efe:	6824      	ldr	r4, [r4, #0]
 8000f00:	2c00      	cmp	r4, #0
 8000f02:	d1f7      	bne.n	8000ef4 <_fwalk_sglue+0xc>
 8000f04:	4630      	mov	r0, r6
 8000f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f0a:	89ab      	ldrh	r3, [r5, #12]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d907      	bls.n	8000f20 <_fwalk_sglue+0x38>
 8000f10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f14:	3301      	adds	r3, #1
 8000f16:	d003      	beq.n	8000f20 <_fwalk_sglue+0x38>
 8000f18:	4629      	mov	r1, r5
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	47c0      	blx	r8
 8000f1e:	4306      	orrs	r6, r0
 8000f20:	3568      	adds	r5, #104	@ 0x68
 8000f22:	e7e9      	b.n	8000ef8 <_fwalk_sglue+0x10>

08000f24 <iprintf>:
 8000f24:	b40f      	push	{r0, r1, r2, r3}
 8000f26:	b507      	push	{r0, r1, r2, lr}
 8000f28:	4906      	ldr	r1, [pc, #24]	@ (8000f44 <iprintf+0x20>)
 8000f2a:	ab04      	add	r3, sp, #16
 8000f2c:	6808      	ldr	r0, [r1, #0]
 8000f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f32:	6881      	ldr	r1, [r0, #8]
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	f000 f9e5 	bl	8001304 <_vfiprintf_r>
 8000f3a:	b003      	add	sp, #12
 8000f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr
 8000f44:	2000001c 	.word	0x2000001c

08000f48 <__sread>:
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	460c      	mov	r4, r1
 8000f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f50:	f000 f868 	bl	8001024 <_read_r>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	bfab      	itete	ge
 8000f58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000f5a:	89a3      	ldrhlt	r3, [r4, #12]
 8000f5c:	181b      	addge	r3, r3, r0
 8000f5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000f62:	bfac      	ite	ge
 8000f64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000f66:	81a3      	strhlt	r3, [r4, #12]
 8000f68:	bd10      	pop	{r4, pc}

08000f6a <__swrite>:
 8000f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6e:	461f      	mov	r7, r3
 8000f70:	898b      	ldrh	r3, [r1, #12]
 8000f72:	4605      	mov	r5, r0
 8000f74:	05db      	lsls	r3, r3, #23
 8000f76:	460c      	mov	r4, r1
 8000f78:	4616      	mov	r6, r2
 8000f7a:	d505      	bpl.n	8000f88 <__swrite+0x1e>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f84:	f000 f83c 	bl	8001000 <_lseek_r>
 8000f88:	89a3      	ldrh	r3, [r4, #12]
 8000f8a:	4632      	mov	r2, r6
 8000f8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f90:	81a3      	strh	r3, [r4, #12]
 8000f92:	4628      	mov	r0, r5
 8000f94:	463b      	mov	r3, r7
 8000f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f9e:	f000 b853 	b.w	8001048 <_write_r>

08000fa2 <__sseek>:
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	460c      	mov	r4, r1
 8000fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000faa:	f000 f829 	bl	8001000 <_lseek_r>
 8000fae:	1c43      	adds	r3, r0, #1
 8000fb0:	89a3      	ldrh	r3, [r4, #12]
 8000fb2:	bf15      	itete	ne
 8000fb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000fb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000fba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000fbe:	81a3      	strheq	r3, [r4, #12]
 8000fc0:	bf18      	it	ne
 8000fc2:	81a3      	strhne	r3, [r4, #12]
 8000fc4:	bd10      	pop	{r4, pc}

08000fc6 <__sclose>:
 8000fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fca:	f000 b809 	b.w	8000fe0 <_close_r>

08000fce <memset>:
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4402      	add	r2, r0
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d100      	bne.n	8000fd8 <memset+0xa>
 8000fd6:	4770      	bx	lr
 8000fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8000fdc:	e7f9      	b.n	8000fd2 <memset+0x4>
	...

08000fe0 <_close_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	4d05      	ldr	r5, [pc, #20]	@ (8000ffc <_close_r+0x1c>)
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4608      	mov	r0, r1
 8000fea:	602b      	str	r3, [r5, #0]
 8000fec:	f7ff fe47 	bl	8000c7e <_close>
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	d102      	bne.n	8000ffa <_close_r+0x1a>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	b103      	cbz	r3, 8000ffa <_close_r+0x1a>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	200001e0 	.word	0x200001e0

08001000 <_lseek_r>:
 8001000:	b538      	push	{r3, r4, r5, lr}
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	4611      	mov	r1, r2
 8001008:	2200      	movs	r2, #0
 800100a:	4d05      	ldr	r5, [pc, #20]	@ (8001020 <_lseek_r+0x20>)
 800100c:	602a      	str	r2, [r5, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	f7ff fe59 	bl	8000cc6 <_lseek>
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	d102      	bne.n	800101e <_lseek_r+0x1e>
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	b103      	cbz	r3, 800101e <_lseek_r+0x1e>
 800101c:	6023      	str	r3, [r4, #0]
 800101e:	bd38      	pop	{r3, r4, r5, pc}
 8001020:	200001e0 	.word	0x200001e0

08001024 <_read_r>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	2200      	movs	r2, #0
 800102e:	4d05      	ldr	r5, [pc, #20]	@ (8001044 <_read_r+0x20>)
 8001030:	602a      	str	r2, [r5, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f7ff fdea 	bl	8000c0c <_read>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d102      	bne.n	8001042 <_read_r+0x1e>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	b103      	cbz	r3, 8001042 <_read_r+0x1e>
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	bd38      	pop	{r3, r4, r5, pc}
 8001044:	200001e0 	.word	0x200001e0

08001048 <_write_r>:
 8001048:	b538      	push	{r3, r4, r5, lr}
 800104a:	4604      	mov	r4, r0
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	2200      	movs	r2, #0
 8001052:	4d05      	ldr	r5, [pc, #20]	@ (8001068 <_write_r+0x20>)
 8001054:	602a      	str	r2, [r5, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	f7ff fdf5 	bl	8000c46 <_write>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d102      	bne.n	8001066 <_write_r+0x1e>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	b103      	cbz	r3, 8001066 <_write_r+0x1e>
 8001064:	6023      	str	r3, [r4, #0]
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	200001e0 	.word	0x200001e0

0800106c <__errno>:
 800106c:	4b01      	ldr	r3, [pc, #4]	@ (8001074 <__errno+0x8>)
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	2000001c 	.word	0x2000001c

08001078 <__libc_init_array>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	2600      	movs	r6, #0
 800107c:	4d0c      	ldr	r5, [pc, #48]	@ (80010b0 <__libc_init_array+0x38>)
 800107e:	4c0d      	ldr	r4, [pc, #52]	@ (80010b4 <__libc_init_array+0x3c>)
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	10a4      	asrs	r4, r4, #2
 8001084:	42a6      	cmp	r6, r4
 8001086:	d109      	bne.n	800109c <__libc_init_array+0x24>
 8001088:	f000 fdc4 	bl	8001c14 <_init>
 800108c:	2600      	movs	r6, #0
 800108e:	4d0a      	ldr	r5, [pc, #40]	@ (80010b8 <__libc_init_array+0x40>)
 8001090:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <__libc_init_array+0x44>)
 8001092:	1b64      	subs	r4, r4, r5
 8001094:	10a4      	asrs	r4, r4, #2
 8001096:	42a6      	cmp	r6, r4
 8001098:	d105      	bne.n	80010a6 <__libc_init_array+0x2e>
 800109a:	bd70      	pop	{r4, r5, r6, pc}
 800109c:	f855 3b04 	ldr.w	r3, [r5], #4
 80010a0:	4798      	blx	r3
 80010a2:	3601      	adds	r6, #1
 80010a4:	e7ee      	b.n	8001084 <__libc_init_array+0xc>
 80010a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80010aa:	4798      	blx	r3
 80010ac:	3601      	adds	r6, #1
 80010ae:	e7f2      	b.n	8001096 <__libc_init_array+0x1e>
 80010b0:	08001c70 	.word	0x08001c70
 80010b4:	08001c70 	.word	0x08001c70
 80010b8:	08001c70 	.word	0x08001c70
 80010bc:	08001c74 	.word	0x08001c74

080010c0 <__retarget_lock_init_recursive>:
 80010c0:	4770      	bx	lr

080010c2 <__retarget_lock_acquire_recursive>:
 80010c2:	4770      	bx	lr

080010c4 <__retarget_lock_release_recursive>:
 80010c4:	4770      	bx	lr
	...

080010c8 <_free_r>:
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4605      	mov	r5, r0
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d040      	beq.n	8001152 <_free_r+0x8a>
 80010d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010d4:	1f0c      	subs	r4, r1, #4
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bfb8      	it	lt
 80010da:	18e4      	addlt	r4, r4, r3
 80010dc:	f000 f8de 	bl	800129c <__malloc_lock>
 80010e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <_free_r+0x8c>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	b933      	cbnz	r3, 80010f4 <_free_r+0x2c>
 80010e6:	6063      	str	r3, [r4, #4]
 80010e8:	6014      	str	r4, [r2, #0]
 80010ea:	4628      	mov	r0, r5
 80010ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010f0:	f000 b8da 	b.w	80012a8 <__malloc_unlock>
 80010f4:	42a3      	cmp	r3, r4
 80010f6:	d908      	bls.n	800110a <_free_r+0x42>
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	1821      	adds	r1, r4, r0
 80010fc:	428b      	cmp	r3, r1
 80010fe:	bf01      	itttt	eq
 8001100:	6819      	ldreq	r1, [r3, #0]
 8001102:	685b      	ldreq	r3, [r3, #4]
 8001104:	1809      	addeq	r1, r1, r0
 8001106:	6021      	streq	r1, [r4, #0]
 8001108:	e7ed      	b.n	80010e6 <_free_r+0x1e>
 800110a:	461a      	mov	r2, r3
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	b10b      	cbz	r3, 8001114 <_free_r+0x4c>
 8001110:	42a3      	cmp	r3, r4
 8001112:	d9fa      	bls.n	800110a <_free_r+0x42>
 8001114:	6811      	ldr	r1, [r2, #0]
 8001116:	1850      	adds	r0, r2, r1
 8001118:	42a0      	cmp	r0, r4
 800111a:	d10b      	bne.n	8001134 <_free_r+0x6c>
 800111c:	6820      	ldr	r0, [r4, #0]
 800111e:	4401      	add	r1, r0
 8001120:	1850      	adds	r0, r2, r1
 8001122:	4283      	cmp	r3, r0
 8001124:	6011      	str	r1, [r2, #0]
 8001126:	d1e0      	bne.n	80010ea <_free_r+0x22>
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	4408      	add	r0, r1
 800112e:	6010      	str	r0, [r2, #0]
 8001130:	6053      	str	r3, [r2, #4]
 8001132:	e7da      	b.n	80010ea <_free_r+0x22>
 8001134:	d902      	bls.n	800113c <_free_r+0x74>
 8001136:	230c      	movs	r3, #12
 8001138:	602b      	str	r3, [r5, #0]
 800113a:	e7d6      	b.n	80010ea <_free_r+0x22>
 800113c:	6820      	ldr	r0, [r4, #0]
 800113e:	1821      	adds	r1, r4, r0
 8001140:	428b      	cmp	r3, r1
 8001142:	bf01      	itttt	eq
 8001144:	6819      	ldreq	r1, [r3, #0]
 8001146:	685b      	ldreq	r3, [r3, #4]
 8001148:	1809      	addeq	r1, r1, r0
 800114a:	6021      	streq	r1, [r4, #0]
 800114c:	6063      	str	r3, [r4, #4]
 800114e:	6054      	str	r4, [r2, #4]
 8001150:	e7cb      	b.n	80010ea <_free_r+0x22>
 8001152:	bd38      	pop	{r3, r4, r5, pc}
 8001154:	200001ec 	.word	0x200001ec

08001158 <sbrk_aligned>:
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	4e0f      	ldr	r6, [pc, #60]	@ (8001198 <sbrk_aligned+0x40>)
 800115c:	460c      	mov	r4, r1
 800115e:	6831      	ldr	r1, [r6, #0]
 8001160:	4605      	mov	r5, r0
 8001162:	b911      	cbnz	r1, 800116a <sbrk_aligned+0x12>
 8001164:	f000 fcb4 	bl	8001ad0 <_sbrk_r>
 8001168:	6030      	str	r0, [r6, #0]
 800116a:	4621      	mov	r1, r4
 800116c:	4628      	mov	r0, r5
 800116e:	f000 fcaf 	bl	8001ad0 <_sbrk_r>
 8001172:	1c43      	adds	r3, r0, #1
 8001174:	d103      	bne.n	800117e <sbrk_aligned+0x26>
 8001176:	f04f 34ff 	mov.w	r4, #4294967295
 800117a:	4620      	mov	r0, r4
 800117c:	bd70      	pop	{r4, r5, r6, pc}
 800117e:	1cc4      	adds	r4, r0, #3
 8001180:	f024 0403 	bic.w	r4, r4, #3
 8001184:	42a0      	cmp	r0, r4
 8001186:	d0f8      	beq.n	800117a <sbrk_aligned+0x22>
 8001188:	1a21      	subs	r1, r4, r0
 800118a:	4628      	mov	r0, r5
 800118c:	f000 fca0 	bl	8001ad0 <_sbrk_r>
 8001190:	3001      	adds	r0, #1
 8001192:	d1f2      	bne.n	800117a <sbrk_aligned+0x22>
 8001194:	e7ef      	b.n	8001176 <sbrk_aligned+0x1e>
 8001196:	bf00      	nop
 8001198:	200001e8 	.word	0x200001e8

0800119c <_malloc_r>:
 800119c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011a0:	1ccd      	adds	r5, r1, #3
 80011a2:	f025 0503 	bic.w	r5, r5, #3
 80011a6:	3508      	adds	r5, #8
 80011a8:	2d0c      	cmp	r5, #12
 80011aa:	bf38      	it	cc
 80011ac:	250c      	movcc	r5, #12
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	4606      	mov	r6, r0
 80011b2:	db01      	blt.n	80011b8 <_malloc_r+0x1c>
 80011b4:	42a9      	cmp	r1, r5
 80011b6:	d904      	bls.n	80011c2 <_malloc_r+0x26>
 80011b8:	230c      	movs	r3, #12
 80011ba:	6033      	str	r3, [r6, #0]
 80011bc:	2000      	movs	r0, #0
 80011be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001298 <_malloc_r+0xfc>
 80011c6:	f000 f869 	bl	800129c <__malloc_lock>
 80011ca:	f8d8 3000 	ldr.w	r3, [r8]
 80011ce:	461c      	mov	r4, r3
 80011d0:	bb44      	cbnz	r4, 8001224 <_malloc_r+0x88>
 80011d2:	4629      	mov	r1, r5
 80011d4:	4630      	mov	r0, r6
 80011d6:	f7ff ffbf 	bl	8001158 <sbrk_aligned>
 80011da:	1c43      	adds	r3, r0, #1
 80011dc:	4604      	mov	r4, r0
 80011de:	d158      	bne.n	8001292 <_malloc_r+0xf6>
 80011e0:	f8d8 4000 	ldr.w	r4, [r8]
 80011e4:	4627      	mov	r7, r4
 80011e6:	2f00      	cmp	r7, #0
 80011e8:	d143      	bne.n	8001272 <_malloc_r+0xd6>
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	d04b      	beq.n	8001286 <_malloc_r+0xea>
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	4639      	mov	r1, r7
 80011f2:	4630      	mov	r0, r6
 80011f4:	eb04 0903 	add.w	r9, r4, r3
 80011f8:	f000 fc6a 	bl	8001ad0 <_sbrk_r>
 80011fc:	4581      	cmp	r9, r0
 80011fe:	d142      	bne.n	8001286 <_malloc_r+0xea>
 8001200:	6821      	ldr	r1, [r4, #0]
 8001202:	4630      	mov	r0, r6
 8001204:	1a6d      	subs	r5, r5, r1
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff ffa6 	bl	8001158 <sbrk_aligned>
 800120c:	3001      	adds	r0, #1
 800120e:	d03a      	beq.n	8001286 <_malloc_r+0xea>
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	442b      	add	r3, r5
 8001214:	6023      	str	r3, [r4, #0]
 8001216:	f8d8 3000 	ldr.w	r3, [r8]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	bb62      	cbnz	r2, 8001278 <_malloc_r+0xdc>
 800121e:	f8c8 7000 	str.w	r7, [r8]
 8001222:	e00f      	b.n	8001244 <_malloc_r+0xa8>
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	1b52      	subs	r2, r2, r5
 8001228:	d420      	bmi.n	800126c <_malloc_r+0xd0>
 800122a:	2a0b      	cmp	r2, #11
 800122c:	d917      	bls.n	800125e <_malloc_r+0xc2>
 800122e:	1961      	adds	r1, r4, r5
 8001230:	42a3      	cmp	r3, r4
 8001232:	6025      	str	r5, [r4, #0]
 8001234:	bf18      	it	ne
 8001236:	6059      	strne	r1, [r3, #4]
 8001238:	6863      	ldr	r3, [r4, #4]
 800123a:	bf08      	it	eq
 800123c:	f8c8 1000 	streq.w	r1, [r8]
 8001240:	5162      	str	r2, [r4, r5]
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	4630      	mov	r0, r6
 8001246:	f000 f82f 	bl	80012a8 <__malloc_unlock>
 800124a:	f104 000b 	add.w	r0, r4, #11
 800124e:	1d23      	adds	r3, r4, #4
 8001250:	f020 0007 	bic.w	r0, r0, #7
 8001254:	1ac2      	subs	r2, r0, r3
 8001256:	bf1c      	itt	ne
 8001258:	1a1b      	subne	r3, r3, r0
 800125a:	50a3      	strne	r3, [r4, r2]
 800125c:	e7af      	b.n	80011be <_malloc_r+0x22>
 800125e:	6862      	ldr	r2, [r4, #4]
 8001260:	42a3      	cmp	r3, r4
 8001262:	bf0c      	ite	eq
 8001264:	f8c8 2000 	streq.w	r2, [r8]
 8001268:	605a      	strne	r2, [r3, #4]
 800126a:	e7eb      	b.n	8001244 <_malloc_r+0xa8>
 800126c:	4623      	mov	r3, r4
 800126e:	6864      	ldr	r4, [r4, #4]
 8001270:	e7ae      	b.n	80011d0 <_malloc_r+0x34>
 8001272:	463c      	mov	r4, r7
 8001274:	687f      	ldr	r7, [r7, #4]
 8001276:	e7b6      	b.n	80011e6 <_malloc_r+0x4a>
 8001278:	461a      	mov	r2, r3
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	42a3      	cmp	r3, r4
 800127e:	d1fb      	bne.n	8001278 <_malloc_r+0xdc>
 8001280:	2300      	movs	r3, #0
 8001282:	6053      	str	r3, [r2, #4]
 8001284:	e7de      	b.n	8001244 <_malloc_r+0xa8>
 8001286:	230c      	movs	r3, #12
 8001288:	4630      	mov	r0, r6
 800128a:	6033      	str	r3, [r6, #0]
 800128c:	f000 f80c 	bl	80012a8 <__malloc_unlock>
 8001290:	e794      	b.n	80011bc <_malloc_r+0x20>
 8001292:	6005      	str	r5, [r0, #0]
 8001294:	e7d6      	b.n	8001244 <_malloc_r+0xa8>
 8001296:	bf00      	nop
 8001298:	200001ec 	.word	0x200001ec

0800129c <__malloc_lock>:
 800129c:	4801      	ldr	r0, [pc, #4]	@ (80012a4 <__malloc_lock+0x8>)
 800129e:	f7ff bf10 	b.w	80010c2 <__retarget_lock_acquire_recursive>
 80012a2:	bf00      	nop
 80012a4:	200001e4 	.word	0x200001e4

080012a8 <__malloc_unlock>:
 80012a8:	4801      	ldr	r0, [pc, #4]	@ (80012b0 <__malloc_unlock+0x8>)
 80012aa:	f7ff bf0b 	b.w	80010c4 <__retarget_lock_release_recursive>
 80012ae:	bf00      	nop
 80012b0:	200001e4 	.word	0x200001e4

080012b4 <__sfputc_r>:
 80012b4:	6893      	ldr	r3, [r2, #8]
 80012b6:	b410      	push	{r4}
 80012b8:	3b01      	subs	r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	6093      	str	r3, [r2, #8]
 80012be:	da07      	bge.n	80012d0 <__sfputc_r+0x1c>
 80012c0:	6994      	ldr	r4, [r2, #24]
 80012c2:	42a3      	cmp	r3, r4
 80012c4:	db01      	blt.n	80012ca <__sfputc_r+0x16>
 80012c6:	290a      	cmp	r1, #10
 80012c8:	d102      	bne.n	80012d0 <__sfputc_r+0x1c>
 80012ca:	bc10      	pop	{r4}
 80012cc:	f000 bb6c 	b.w	80019a8 <__swbuf_r>
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	1c58      	adds	r0, r3, #1
 80012d4:	6010      	str	r0, [r2, #0]
 80012d6:	7019      	strb	r1, [r3, #0]
 80012d8:	4608      	mov	r0, r1
 80012da:	bc10      	pop	{r4}
 80012dc:	4770      	bx	lr

080012de <__sfputs_r>:
 80012de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012e0:	4606      	mov	r6, r0
 80012e2:	460f      	mov	r7, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	18d5      	adds	r5, r2, r3
 80012e8:	42ac      	cmp	r4, r5
 80012ea:	d101      	bne.n	80012f0 <__sfputs_r+0x12>
 80012ec:	2000      	movs	r0, #0
 80012ee:	e007      	b.n	8001300 <__sfputs_r+0x22>
 80012f0:	463a      	mov	r2, r7
 80012f2:	4630      	mov	r0, r6
 80012f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80012f8:	f7ff ffdc 	bl	80012b4 <__sfputc_r>
 80012fc:	1c43      	adds	r3, r0, #1
 80012fe:	d1f3      	bne.n	80012e8 <__sfputs_r+0xa>
 8001300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001304 <_vfiprintf_r>:
 8001304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001308:	460d      	mov	r5, r1
 800130a:	4614      	mov	r4, r2
 800130c:	4698      	mov	r8, r3
 800130e:	4606      	mov	r6, r0
 8001310:	b09d      	sub	sp, #116	@ 0x74
 8001312:	b118      	cbz	r0, 800131c <_vfiprintf_r+0x18>
 8001314:	6a03      	ldr	r3, [r0, #32]
 8001316:	b90b      	cbnz	r3, 800131c <_vfiprintf_r+0x18>
 8001318:	f7ff fdce 	bl	8000eb8 <__sinit>
 800131c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800131e:	07d9      	lsls	r1, r3, #31
 8001320:	d405      	bmi.n	800132e <_vfiprintf_r+0x2a>
 8001322:	89ab      	ldrh	r3, [r5, #12]
 8001324:	059a      	lsls	r2, r3, #22
 8001326:	d402      	bmi.n	800132e <_vfiprintf_r+0x2a>
 8001328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800132a:	f7ff feca 	bl	80010c2 <__retarget_lock_acquire_recursive>
 800132e:	89ab      	ldrh	r3, [r5, #12]
 8001330:	071b      	lsls	r3, r3, #28
 8001332:	d501      	bpl.n	8001338 <_vfiprintf_r+0x34>
 8001334:	692b      	ldr	r3, [r5, #16]
 8001336:	b99b      	cbnz	r3, 8001360 <_vfiprintf_r+0x5c>
 8001338:	4629      	mov	r1, r5
 800133a:	4630      	mov	r0, r6
 800133c:	f000 fb72 	bl	8001a24 <__swsetup_r>
 8001340:	b170      	cbz	r0, 8001360 <_vfiprintf_r+0x5c>
 8001342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001344:	07dc      	lsls	r4, r3, #31
 8001346:	d504      	bpl.n	8001352 <_vfiprintf_r+0x4e>
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	b01d      	add	sp, #116	@ 0x74
 800134e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001352:	89ab      	ldrh	r3, [r5, #12]
 8001354:	0598      	lsls	r0, r3, #22
 8001356:	d4f7      	bmi.n	8001348 <_vfiprintf_r+0x44>
 8001358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800135a:	f7ff feb3 	bl	80010c4 <__retarget_lock_release_recursive>
 800135e:	e7f3      	b.n	8001348 <_vfiprintf_r+0x44>
 8001360:	2300      	movs	r3, #0
 8001362:	9309      	str	r3, [sp, #36]	@ 0x24
 8001364:	2320      	movs	r3, #32
 8001366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800136a:	2330      	movs	r3, #48	@ 0x30
 800136c:	f04f 0901 	mov.w	r9, #1
 8001370:	f8cd 800c 	str.w	r8, [sp, #12]
 8001374:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001520 <_vfiprintf_r+0x21c>
 8001378:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800137c:	4623      	mov	r3, r4
 800137e:	469a      	mov	sl, r3
 8001380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001384:	b10a      	cbz	r2, 800138a <_vfiprintf_r+0x86>
 8001386:	2a25      	cmp	r2, #37	@ 0x25
 8001388:	d1f9      	bne.n	800137e <_vfiprintf_r+0x7a>
 800138a:	ebba 0b04 	subs.w	fp, sl, r4
 800138e:	d00b      	beq.n	80013a8 <_vfiprintf_r+0xa4>
 8001390:	465b      	mov	r3, fp
 8001392:	4622      	mov	r2, r4
 8001394:	4629      	mov	r1, r5
 8001396:	4630      	mov	r0, r6
 8001398:	f7ff ffa1 	bl	80012de <__sfputs_r>
 800139c:	3001      	adds	r0, #1
 800139e:	f000 80a7 	beq.w	80014f0 <_vfiprintf_r+0x1ec>
 80013a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80013a4:	445a      	add	r2, fp
 80013a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80013a8:	f89a 3000 	ldrb.w	r3, [sl]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 809f 	beq.w	80014f0 <_vfiprintf_r+0x1ec>
 80013b2:	2300      	movs	r3, #0
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295
 80013b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80013bc:	f10a 0a01 	add.w	sl, sl, #1
 80013c0:	9304      	str	r3, [sp, #16]
 80013c2:	9307      	str	r3, [sp, #28]
 80013c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80013c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80013ca:	4654      	mov	r4, sl
 80013cc:	2205      	movs	r2, #5
 80013ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d2:	4853      	ldr	r0, [pc, #332]	@ (8001520 <_vfiprintf_r+0x21c>)
 80013d4:	f000 fb8c 	bl	8001af0 <memchr>
 80013d8:	9a04      	ldr	r2, [sp, #16]
 80013da:	b9d8      	cbnz	r0, 8001414 <_vfiprintf_r+0x110>
 80013dc:	06d1      	lsls	r1, r2, #27
 80013de:	bf44      	itt	mi
 80013e0:	2320      	movmi	r3, #32
 80013e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013e6:	0713      	lsls	r3, r2, #28
 80013e8:	bf44      	itt	mi
 80013ea:	232b      	movmi	r3, #43	@ 0x2b
 80013ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80013f0:	f89a 3000 	ldrb.w	r3, [sl]
 80013f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80013f6:	d015      	beq.n	8001424 <_vfiprintf_r+0x120>
 80013f8:	4654      	mov	r4, sl
 80013fa:	2000      	movs	r0, #0
 80013fc:	f04f 0c0a 	mov.w	ip, #10
 8001400:	9a07      	ldr	r2, [sp, #28]
 8001402:	4621      	mov	r1, r4
 8001404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001408:	3b30      	subs	r3, #48	@ 0x30
 800140a:	2b09      	cmp	r3, #9
 800140c:	d94b      	bls.n	80014a6 <_vfiprintf_r+0x1a2>
 800140e:	b1b0      	cbz	r0, 800143e <_vfiprintf_r+0x13a>
 8001410:	9207      	str	r2, [sp, #28]
 8001412:	e014      	b.n	800143e <_vfiprintf_r+0x13a>
 8001414:	eba0 0308 	sub.w	r3, r0, r8
 8001418:	fa09 f303 	lsl.w	r3, r9, r3
 800141c:	4313      	orrs	r3, r2
 800141e:	46a2      	mov	sl, r4
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	e7d2      	b.n	80013ca <_vfiprintf_r+0xc6>
 8001424:	9b03      	ldr	r3, [sp, #12]
 8001426:	1d19      	adds	r1, r3, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	9103      	str	r1, [sp, #12]
 800142c:	2b00      	cmp	r3, #0
 800142e:	bfbb      	ittet	lt
 8001430:	425b      	neglt	r3, r3
 8001432:	f042 0202 	orrlt.w	r2, r2, #2
 8001436:	9307      	strge	r3, [sp, #28]
 8001438:	9307      	strlt	r3, [sp, #28]
 800143a:	bfb8      	it	lt
 800143c:	9204      	strlt	r2, [sp, #16]
 800143e:	7823      	ldrb	r3, [r4, #0]
 8001440:	2b2e      	cmp	r3, #46	@ 0x2e
 8001442:	d10a      	bne.n	800145a <_vfiprintf_r+0x156>
 8001444:	7863      	ldrb	r3, [r4, #1]
 8001446:	2b2a      	cmp	r3, #42	@ 0x2a
 8001448:	d132      	bne.n	80014b0 <_vfiprintf_r+0x1ac>
 800144a:	9b03      	ldr	r3, [sp, #12]
 800144c:	3402      	adds	r4, #2
 800144e:	1d1a      	adds	r2, r3, #4
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	9203      	str	r2, [sp, #12]
 8001454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001458:	9305      	str	r3, [sp, #20]
 800145a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001524 <_vfiprintf_r+0x220>
 800145e:	2203      	movs	r2, #3
 8001460:	4650      	mov	r0, sl
 8001462:	7821      	ldrb	r1, [r4, #0]
 8001464:	f000 fb44 	bl	8001af0 <memchr>
 8001468:	b138      	cbz	r0, 800147a <_vfiprintf_r+0x176>
 800146a:	2240      	movs	r2, #64	@ 0x40
 800146c:	9b04      	ldr	r3, [sp, #16]
 800146e:	eba0 000a 	sub.w	r0, r0, sl
 8001472:	4082      	lsls	r2, r0
 8001474:	4313      	orrs	r3, r2
 8001476:	3401      	adds	r4, #1
 8001478:	9304      	str	r3, [sp, #16]
 800147a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800147e:	2206      	movs	r2, #6
 8001480:	4829      	ldr	r0, [pc, #164]	@ (8001528 <_vfiprintf_r+0x224>)
 8001482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001486:	f000 fb33 	bl	8001af0 <memchr>
 800148a:	2800      	cmp	r0, #0
 800148c:	d03f      	beq.n	800150e <_vfiprintf_r+0x20a>
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <_vfiprintf_r+0x228>)
 8001490:	bb1b      	cbnz	r3, 80014da <_vfiprintf_r+0x1d6>
 8001492:	9b03      	ldr	r3, [sp, #12]
 8001494:	3307      	adds	r3, #7
 8001496:	f023 0307 	bic.w	r3, r3, #7
 800149a:	3308      	adds	r3, #8
 800149c:	9303      	str	r3, [sp, #12]
 800149e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80014a0:	443b      	add	r3, r7
 80014a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80014a4:	e76a      	b.n	800137c <_vfiprintf_r+0x78>
 80014a6:	460c      	mov	r4, r1
 80014a8:	2001      	movs	r0, #1
 80014aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80014ae:	e7a8      	b.n	8001402 <_vfiprintf_r+0xfe>
 80014b0:	2300      	movs	r3, #0
 80014b2:	f04f 0c0a 	mov.w	ip, #10
 80014b6:	4619      	mov	r1, r3
 80014b8:	3401      	adds	r4, #1
 80014ba:	9305      	str	r3, [sp, #20]
 80014bc:	4620      	mov	r0, r4
 80014be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80014c2:	3a30      	subs	r2, #48	@ 0x30
 80014c4:	2a09      	cmp	r2, #9
 80014c6:	d903      	bls.n	80014d0 <_vfiprintf_r+0x1cc>
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0c6      	beq.n	800145a <_vfiprintf_r+0x156>
 80014cc:	9105      	str	r1, [sp, #20]
 80014ce:	e7c4      	b.n	800145a <_vfiprintf_r+0x156>
 80014d0:	4604      	mov	r4, r0
 80014d2:	2301      	movs	r3, #1
 80014d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80014d8:	e7f0      	b.n	80014bc <_vfiprintf_r+0x1b8>
 80014da:	ab03      	add	r3, sp, #12
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	462a      	mov	r2, r5
 80014e0:	4630      	mov	r0, r6
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <_vfiprintf_r+0x22c>)
 80014e4:	a904      	add	r1, sp, #16
 80014e6:	f3af 8000 	nop.w
 80014ea:	4607      	mov	r7, r0
 80014ec:	1c78      	adds	r0, r7, #1
 80014ee:	d1d6      	bne.n	800149e <_vfiprintf_r+0x19a>
 80014f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80014f2:	07d9      	lsls	r1, r3, #31
 80014f4:	d405      	bmi.n	8001502 <_vfiprintf_r+0x1fe>
 80014f6:	89ab      	ldrh	r3, [r5, #12]
 80014f8:	059a      	lsls	r2, r3, #22
 80014fa:	d402      	bmi.n	8001502 <_vfiprintf_r+0x1fe>
 80014fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80014fe:	f7ff fde1 	bl	80010c4 <__retarget_lock_release_recursive>
 8001502:	89ab      	ldrh	r3, [r5, #12]
 8001504:	065b      	lsls	r3, r3, #25
 8001506:	f53f af1f 	bmi.w	8001348 <_vfiprintf_r+0x44>
 800150a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800150c:	e71e      	b.n	800134c <_vfiprintf_r+0x48>
 800150e:	ab03      	add	r3, sp, #12
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	462a      	mov	r2, r5
 8001514:	4630      	mov	r0, r6
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <_vfiprintf_r+0x22c>)
 8001518:	a904      	add	r1, sp, #16
 800151a:	f000 f87d 	bl	8001618 <_printf_i>
 800151e:	e7e4      	b.n	80014ea <_vfiprintf_r+0x1e6>
 8001520:	08001c3a 	.word	0x08001c3a
 8001524:	08001c40 	.word	0x08001c40
 8001528:	08001c44 	.word	0x08001c44
 800152c:	00000000 	.word	0x00000000
 8001530:	080012df 	.word	0x080012df

08001534 <_printf_common>:
 8001534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001538:	4616      	mov	r6, r2
 800153a:	4698      	mov	r8, r3
 800153c:	688a      	ldr	r2, [r1, #8]
 800153e:	690b      	ldr	r3, [r1, #16]
 8001540:	4607      	mov	r7, r0
 8001542:	4293      	cmp	r3, r2
 8001544:	bfb8      	it	lt
 8001546:	4613      	movlt	r3, r2
 8001548:	6033      	str	r3, [r6, #0]
 800154a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800154e:	460c      	mov	r4, r1
 8001550:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001554:	b10a      	cbz	r2, 800155a <_printf_common+0x26>
 8001556:	3301      	adds	r3, #1
 8001558:	6033      	str	r3, [r6, #0]
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	0699      	lsls	r1, r3, #26
 800155e:	bf42      	ittt	mi
 8001560:	6833      	ldrmi	r3, [r6, #0]
 8001562:	3302      	addmi	r3, #2
 8001564:	6033      	strmi	r3, [r6, #0]
 8001566:	6825      	ldr	r5, [r4, #0]
 8001568:	f015 0506 	ands.w	r5, r5, #6
 800156c:	d106      	bne.n	800157c <_printf_common+0x48>
 800156e:	f104 0a19 	add.w	sl, r4, #25
 8001572:	68e3      	ldr	r3, [r4, #12]
 8001574:	6832      	ldr	r2, [r6, #0]
 8001576:	1a9b      	subs	r3, r3, r2
 8001578:	42ab      	cmp	r3, r5
 800157a:	dc2b      	bgt.n	80015d4 <_printf_common+0xa0>
 800157c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001580:	6822      	ldr	r2, [r4, #0]
 8001582:	3b00      	subs	r3, #0
 8001584:	bf18      	it	ne
 8001586:	2301      	movne	r3, #1
 8001588:	0692      	lsls	r2, r2, #26
 800158a:	d430      	bmi.n	80015ee <_printf_common+0xba>
 800158c:	4641      	mov	r1, r8
 800158e:	4638      	mov	r0, r7
 8001590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001594:	47c8      	blx	r9
 8001596:	3001      	adds	r0, #1
 8001598:	d023      	beq.n	80015e2 <_printf_common+0xae>
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	6922      	ldr	r2, [r4, #16]
 800159e:	f003 0306 	and.w	r3, r3, #6
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf14      	ite	ne
 80015a6:	2500      	movne	r5, #0
 80015a8:	6833      	ldreq	r3, [r6, #0]
 80015aa:	f04f 0600 	mov.w	r6, #0
 80015ae:	bf08      	it	eq
 80015b0:	68e5      	ldreq	r5, [r4, #12]
 80015b2:	f104 041a 	add.w	r4, r4, #26
 80015b6:	bf08      	it	eq
 80015b8:	1aed      	subeq	r5, r5, r3
 80015ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80015be:	bf08      	it	eq
 80015c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80015c4:	4293      	cmp	r3, r2
 80015c6:	bfc4      	itt	gt
 80015c8:	1a9b      	subgt	r3, r3, r2
 80015ca:	18ed      	addgt	r5, r5, r3
 80015cc:	42b5      	cmp	r5, r6
 80015ce:	d11a      	bne.n	8001606 <_printf_common+0xd2>
 80015d0:	2000      	movs	r0, #0
 80015d2:	e008      	b.n	80015e6 <_printf_common+0xb2>
 80015d4:	2301      	movs	r3, #1
 80015d6:	4652      	mov	r2, sl
 80015d8:	4641      	mov	r1, r8
 80015da:	4638      	mov	r0, r7
 80015dc:	47c8      	blx	r9
 80015de:	3001      	adds	r0, #1
 80015e0:	d103      	bne.n	80015ea <_printf_common+0xb6>
 80015e2:	f04f 30ff 	mov.w	r0, #4294967295
 80015e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ea:	3501      	adds	r5, #1
 80015ec:	e7c1      	b.n	8001572 <_printf_common+0x3e>
 80015ee:	2030      	movs	r0, #48	@ 0x30
 80015f0:	18e1      	adds	r1, r4, r3
 80015f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80015fc:	4422      	add	r2, r4
 80015fe:	3302      	adds	r3, #2
 8001600:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001604:	e7c2      	b.n	800158c <_printf_common+0x58>
 8001606:	2301      	movs	r3, #1
 8001608:	4622      	mov	r2, r4
 800160a:	4641      	mov	r1, r8
 800160c:	4638      	mov	r0, r7
 800160e:	47c8      	blx	r9
 8001610:	3001      	adds	r0, #1
 8001612:	d0e6      	beq.n	80015e2 <_printf_common+0xae>
 8001614:	3601      	adds	r6, #1
 8001616:	e7d9      	b.n	80015cc <_printf_common+0x98>

08001618 <_printf_i>:
 8001618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800161c:	7e0f      	ldrb	r7, [r1, #24]
 800161e:	4691      	mov	r9, r2
 8001620:	2f78      	cmp	r7, #120	@ 0x78
 8001622:	4680      	mov	r8, r0
 8001624:	460c      	mov	r4, r1
 8001626:	469a      	mov	sl, r3
 8001628:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800162a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800162e:	d807      	bhi.n	8001640 <_printf_i+0x28>
 8001630:	2f62      	cmp	r7, #98	@ 0x62
 8001632:	d80a      	bhi.n	800164a <_printf_i+0x32>
 8001634:	2f00      	cmp	r7, #0
 8001636:	f000 80d3 	beq.w	80017e0 <_printf_i+0x1c8>
 800163a:	2f58      	cmp	r7, #88	@ 0x58
 800163c:	f000 80ba 	beq.w	80017b4 <_printf_i+0x19c>
 8001640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001648:	e03a      	b.n	80016c0 <_printf_i+0xa8>
 800164a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800164e:	2b15      	cmp	r3, #21
 8001650:	d8f6      	bhi.n	8001640 <_printf_i+0x28>
 8001652:	a101      	add	r1, pc, #4	@ (adr r1, 8001658 <_printf_i+0x40>)
 8001654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016c5 	.word	0x080016c5
 8001660:	08001641 	.word	0x08001641
 8001664:	08001641 	.word	0x08001641
 8001668:	08001641 	.word	0x08001641
 800166c:	08001641 	.word	0x08001641
 8001670:	080016c5 	.word	0x080016c5
 8001674:	08001641 	.word	0x08001641
 8001678:	08001641 	.word	0x08001641
 800167c:	08001641 	.word	0x08001641
 8001680:	08001641 	.word	0x08001641
 8001684:	080017c7 	.word	0x080017c7
 8001688:	080016ef 	.word	0x080016ef
 800168c:	08001781 	.word	0x08001781
 8001690:	08001641 	.word	0x08001641
 8001694:	08001641 	.word	0x08001641
 8001698:	080017e9 	.word	0x080017e9
 800169c:	08001641 	.word	0x08001641
 80016a0:	080016ef 	.word	0x080016ef
 80016a4:	08001641 	.word	0x08001641
 80016a8:	08001641 	.word	0x08001641
 80016ac:	08001789 	.word	0x08001789
 80016b0:	6833      	ldr	r3, [r6, #0]
 80016b2:	1d1a      	adds	r2, r3, #4
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6032      	str	r2, [r6, #0]
 80016b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80016bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80016c0:	2301      	movs	r3, #1
 80016c2:	e09e      	b.n	8001802 <_printf_i+0x1ea>
 80016c4:	6833      	ldr	r3, [r6, #0]
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	1d19      	adds	r1, r3, #4
 80016ca:	6031      	str	r1, [r6, #0]
 80016cc:	0606      	lsls	r6, r0, #24
 80016ce:	d501      	bpl.n	80016d4 <_printf_i+0xbc>
 80016d0:	681d      	ldr	r5, [r3, #0]
 80016d2:	e003      	b.n	80016dc <_printf_i+0xc4>
 80016d4:	0645      	lsls	r5, r0, #25
 80016d6:	d5fb      	bpl.n	80016d0 <_printf_i+0xb8>
 80016d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80016dc:	2d00      	cmp	r5, #0
 80016de:	da03      	bge.n	80016e8 <_printf_i+0xd0>
 80016e0:	232d      	movs	r3, #45	@ 0x2d
 80016e2:	426d      	negs	r5, r5
 80016e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80016e8:	230a      	movs	r3, #10
 80016ea:	4859      	ldr	r0, [pc, #356]	@ (8001850 <_printf_i+0x238>)
 80016ec:	e011      	b.n	8001712 <_printf_i+0xfa>
 80016ee:	6821      	ldr	r1, [r4, #0]
 80016f0:	6833      	ldr	r3, [r6, #0]
 80016f2:	0608      	lsls	r0, r1, #24
 80016f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80016f8:	d402      	bmi.n	8001700 <_printf_i+0xe8>
 80016fa:	0649      	lsls	r1, r1, #25
 80016fc:	bf48      	it	mi
 80016fe:	b2ad      	uxthmi	r5, r5
 8001700:	2f6f      	cmp	r7, #111	@ 0x6f
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	bf14      	ite	ne
 8001706:	230a      	movne	r3, #10
 8001708:	2308      	moveq	r3, #8
 800170a:	4851      	ldr	r0, [pc, #324]	@ (8001850 <_printf_i+0x238>)
 800170c:	2100      	movs	r1, #0
 800170e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001712:	6866      	ldr	r6, [r4, #4]
 8001714:	2e00      	cmp	r6, #0
 8001716:	bfa8      	it	ge
 8001718:	6821      	ldrge	r1, [r4, #0]
 800171a:	60a6      	str	r6, [r4, #8]
 800171c:	bfa4      	itt	ge
 800171e:	f021 0104 	bicge.w	r1, r1, #4
 8001722:	6021      	strge	r1, [r4, #0]
 8001724:	b90d      	cbnz	r5, 800172a <_printf_i+0x112>
 8001726:	2e00      	cmp	r6, #0
 8001728:	d04b      	beq.n	80017c2 <_printf_i+0x1aa>
 800172a:	4616      	mov	r6, r2
 800172c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001730:	fb03 5711 	mls	r7, r3, r1, r5
 8001734:	5dc7      	ldrb	r7, [r0, r7]
 8001736:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800173a:	462f      	mov	r7, r5
 800173c:	42bb      	cmp	r3, r7
 800173e:	460d      	mov	r5, r1
 8001740:	d9f4      	bls.n	800172c <_printf_i+0x114>
 8001742:	2b08      	cmp	r3, #8
 8001744:	d10b      	bne.n	800175e <_printf_i+0x146>
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	07df      	lsls	r7, r3, #31
 800174a:	d508      	bpl.n	800175e <_printf_i+0x146>
 800174c:	6923      	ldr	r3, [r4, #16]
 800174e:	6861      	ldr	r1, [r4, #4]
 8001750:	4299      	cmp	r1, r3
 8001752:	bfde      	ittt	le
 8001754:	2330      	movle	r3, #48	@ 0x30
 8001756:	f806 3c01 	strble.w	r3, [r6, #-1]
 800175a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800175e:	1b92      	subs	r2, r2, r6
 8001760:	6122      	str	r2, [r4, #16]
 8001762:	464b      	mov	r3, r9
 8001764:	4621      	mov	r1, r4
 8001766:	4640      	mov	r0, r8
 8001768:	f8cd a000 	str.w	sl, [sp]
 800176c:	aa03      	add	r2, sp, #12
 800176e:	f7ff fee1 	bl	8001534 <_printf_common>
 8001772:	3001      	adds	r0, #1
 8001774:	d14a      	bne.n	800180c <_printf_i+0x1f4>
 8001776:	f04f 30ff 	mov.w	r0, #4294967295
 800177a:	b004      	add	sp, #16
 800177c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	f043 0320 	orr.w	r3, r3, #32
 8001786:	6023      	str	r3, [r4, #0]
 8001788:	2778      	movs	r7, #120	@ 0x78
 800178a:	4832      	ldr	r0, [pc, #200]	@ (8001854 <_printf_i+0x23c>)
 800178c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001790:	6823      	ldr	r3, [r4, #0]
 8001792:	6831      	ldr	r1, [r6, #0]
 8001794:	061f      	lsls	r7, r3, #24
 8001796:	f851 5b04 	ldr.w	r5, [r1], #4
 800179a:	d402      	bmi.n	80017a2 <_printf_i+0x18a>
 800179c:	065f      	lsls	r7, r3, #25
 800179e:	bf48      	it	mi
 80017a0:	b2ad      	uxthmi	r5, r5
 80017a2:	6031      	str	r1, [r6, #0]
 80017a4:	07d9      	lsls	r1, r3, #31
 80017a6:	bf44      	itt	mi
 80017a8:	f043 0320 	orrmi.w	r3, r3, #32
 80017ac:	6023      	strmi	r3, [r4, #0]
 80017ae:	b11d      	cbz	r5, 80017b8 <_printf_i+0x1a0>
 80017b0:	2310      	movs	r3, #16
 80017b2:	e7ab      	b.n	800170c <_printf_i+0xf4>
 80017b4:	4826      	ldr	r0, [pc, #152]	@ (8001850 <_printf_i+0x238>)
 80017b6:	e7e9      	b.n	800178c <_printf_i+0x174>
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	f023 0320 	bic.w	r3, r3, #32
 80017be:	6023      	str	r3, [r4, #0]
 80017c0:	e7f6      	b.n	80017b0 <_printf_i+0x198>
 80017c2:	4616      	mov	r6, r2
 80017c4:	e7bd      	b.n	8001742 <_printf_i+0x12a>
 80017c6:	6833      	ldr	r3, [r6, #0]
 80017c8:	6825      	ldr	r5, [r4, #0]
 80017ca:	1d18      	adds	r0, r3, #4
 80017cc:	6961      	ldr	r1, [r4, #20]
 80017ce:	6030      	str	r0, [r6, #0]
 80017d0:	062e      	lsls	r6, r5, #24
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	d501      	bpl.n	80017da <_printf_i+0x1c2>
 80017d6:	6019      	str	r1, [r3, #0]
 80017d8:	e002      	b.n	80017e0 <_printf_i+0x1c8>
 80017da:	0668      	lsls	r0, r5, #25
 80017dc:	d5fb      	bpl.n	80017d6 <_printf_i+0x1be>
 80017de:	8019      	strh	r1, [r3, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	4616      	mov	r6, r2
 80017e4:	6123      	str	r3, [r4, #16]
 80017e6:	e7bc      	b.n	8001762 <_printf_i+0x14a>
 80017e8:	6833      	ldr	r3, [r6, #0]
 80017ea:	2100      	movs	r1, #0
 80017ec:	1d1a      	adds	r2, r3, #4
 80017ee:	6032      	str	r2, [r6, #0]
 80017f0:	681e      	ldr	r6, [r3, #0]
 80017f2:	6862      	ldr	r2, [r4, #4]
 80017f4:	4630      	mov	r0, r6
 80017f6:	f000 f97b 	bl	8001af0 <memchr>
 80017fa:	b108      	cbz	r0, 8001800 <_printf_i+0x1e8>
 80017fc:	1b80      	subs	r0, r0, r6
 80017fe:	6060      	str	r0, [r4, #4]
 8001800:	6863      	ldr	r3, [r4, #4]
 8001802:	6123      	str	r3, [r4, #16]
 8001804:	2300      	movs	r3, #0
 8001806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800180a:	e7aa      	b.n	8001762 <_printf_i+0x14a>
 800180c:	4632      	mov	r2, r6
 800180e:	4649      	mov	r1, r9
 8001810:	4640      	mov	r0, r8
 8001812:	6923      	ldr	r3, [r4, #16]
 8001814:	47d0      	blx	sl
 8001816:	3001      	adds	r0, #1
 8001818:	d0ad      	beq.n	8001776 <_printf_i+0x15e>
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	079b      	lsls	r3, r3, #30
 800181e:	d413      	bmi.n	8001848 <_printf_i+0x230>
 8001820:	68e0      	ldr	r0, [r4, #12]
 8001822:	9b03      	ldr	r3, [sp, #12]
 8001824:	4298      	cmp	r0, r3
 8001826:	bfb8      	it	lt
 8001828:	4618      	movlt	r0, r3
 800182a:	e7a6      	b.n	800177a <_printf_i+0x162>
 800182c:	2301      	movs	r3, #1
 800182e:	4632      	mov	r2, r6
 8001830:	4649      	mov	r1, r9
 8001832:	4640      	mov	r0, r8
 8001834:	47d0      	blx	sl
 8001836:	3001      	adds	r0, #1
 8001838:	d09d      	beq.n	8001776 <_printf_i+0x15e>
 800183a:	3501      	adds	r5, #1
 800183c:	68e3      	ldr	r3, [r4, #12]
 800183e:	9903      	ldr	r1, [sp, #12]
 8001840:	1a5b      	subs	r3, r3, r1
 8001842:	42ab      	cmp	r3, r5
 8001844:	dcf2      	bgt.n	800182c <_printf_i+0x214>
 8001846:	e7eb      	b.n	8001820 <_printf_i+0x208>
 8001848:	2500      	movs	r5, #0
 800184a:	f104 0619 	add.w	r6, r4, #25
 800184e:	e7f5      	b.n	800183c <_printf_i+0x224>
 8001850:	08001c4b 	.word	0x08001c4b
 8001854:	08001c5c 	.word	0x08001c5c

08001858 <__sflush_r>:
 8001858:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	0716      	lsls	r6, r2, #28
 8001860:	4605      	mov	r5, r0
 8001862:	460c      	mov	r4, r1
 8001864:	d454      	bmi.n	8001910 <__sflush_r+0xb8>
 8001866:	684b      	ldr	r3, [r1, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dc02      	bgt.n	8001872 <__sflush_r+0x1a>
 800186c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	dd48      	ble.n	8001904 <__sflush_r+0xac>
 8001872:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001874:	2e00      	cmp	r6, #0
 8001876:	d045      	beq.n	8001904 <__sflush_r+0xac>
 8001878:	2300      	movs	r3, #0
 800187a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800187e:	682f      	ldr	r7, [r5, #0]
 8001880:	6a21      	ldr	r1, [r4, #32]
 8001882:	602b      	str	r3, [r5, #0]
 8001884:	d030      	beq.n	80018e8 <__sflush_r+0x90>
 8001886:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001888:	89a3      	ldrh	r3, [r4, #12]
 800188a:	0759      	lsls	r1, r3, #29
 800188c:	d505      	bpl.n	800189a <__sflush_r+0x42>
 800188e:	6863      	ldr	r3, [r4, #4]
 8001890:	1ad2      	subs	r2, r2, r3
 8001892:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001894:	b10b      	cbz	r3, 800189a <__sflush_r+0x42>
 8001896:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001898:	1ad2      	subs	r2, r2, r3
 800189a:	2300      	movs	r3, #0
 800189c:	4628      	mov	r0, r5
 800189e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80018a0:	6a21      	ldr	r1, [r4, #32]
 80018a2:	47b0      	blx	r6
 80018a4:	1c43      	adds	r3, r0, #1
 80018a6:	89a3      	ldrh	r3, [r4, #12]
 80018a8:	d106      	bne.n	80018b8 <__sflush_r+0x60>
 80018aa:	6829      	ldr	r1, [r5, #0]
 80018ac:	291d      	cmp	r1, #29
 80018ae:	d82b      	bhi.n	8001908 <__sflush_r+0xb0>
 80018b0:	4a28      	ldr	r2, [pc, #160]	@ (8001954 <__sflush_r+0xfc>)
 80018b2:	410a      	asrs	r2, r1
 80018b4:	07d6      	lsls	r6, r2, #31
 80018b6:	d427      	bmi.n	8001908 <__sflush_r+0xb0>
 80018b8:	2200      	movs	r2, #0
 80018ba:	6062      	str	r2, [r4, #4]
 80018bc:	6922      	ldr	r2, [r4, #16]
 80018be:	04d9      	lsls	r1, r3, #19
 80018c0:	6022      	str	r2, [r4, #0]
 80018c2:	d504      	bpl.n	80018ce <__sflush_r+0x76>
 80018c4:	1c42      	adds	r2, r0, #1
 80018c6:	d101      	bne.n	80018cc <__sflush_r+0x74>
 80018c8:	682b      	ldr	r3, [r5, #0]
 80018ca:	b903      	cbnz	r3, 80018ce <__sflush_r+0x76>
 80018cc:	6560      	str	r0, [r4, #84]	@ 0x54
 80018ce:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018d0:	602f      	str	r7, [r5, #0]
 80018d2:	b1b9      	cbz	r1, 8001904 <__sflush_r+0xac>
 80018d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018d8:	4299      	cmp	r1, r3
 80018da:	d002      	beq.n	80018e2 <__sflush_r+0x8a>
 80018dc:	4628      	mov	r0, r5
 80018de:	f7ff fbf3 	bl	80010c8 <_free_r>
 80018e2:	2300      	movs	r3, #0
 80018e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80018e6:	e00d      	b.n	8001904 <__sflush_r+0xac>
 80018e8:	2301      	movs	r3, #1
 80018ea:	4628      	mov	r0, r5
 80018ec:	47b0      	blx	r6
 80018ee:	4602      	mov	r2, r0
 80018f0:	1c50      	adds	r0, r2, #1
 80018f2:	d1c9      	bne.n	8001888 <__sflush_r+0x30>
 80018f4:	682b      	ldr	r3, [r5, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0c6      	beq.n	8001888 <__sflush_r+0x30>
 80018fa:	2b1d      	cmp	r3, #29
 80018fc:	d001      	beq.n	8001902 <__sflush_r+0xaa>
 80018fe:	2b16      	cmp	r3, #22
 8001900:	d11d      	bne.n	800193e <__sflush_r+0xe6>
 8001902:	602f      	str	r7, [r5, #0]
 8001904:	2000      	movs	r0, #0
 8001906:	e021      	b.n	800194c <__sflush_r+0xf4>
 8001908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800190c:	b21b      	sxth	r3, r3
 800190e:	e01a      	b.n	8001946 <__sflush_r+0xee>
 8001910:	690f      	ldr	r7, [r1, #16]
 8001912:	2f00      	cmp	r7, #0
 8001914:	d0f6      	beq.n	8001904 <__sflush_r+0xac>
 8001916:	0793      	lsls	r3, r2, #30
 8001918:	bf18      	it	ne
 800191a:	2300      	movne	r3, #0
 800191c:	680e      	ldr	r6, [r1, #0]
 800191e:	bf08      	it	eq
 8001920:	694b      	ldreq	r3, [r1, #20]
 8001922:	1bf6      	subs	r6, r6, r7
 8001924:	600f      	str	r7, [r1, #0]
 8001926:	608b      	str	r3, [r1, #8]
 8001928:	2e00      	cmp	r6, #0
 800192a:	ddeb      	ble.n	8001904 <__sflush_r+0xac>
 800192c:	4633      	mov	r3, r6
 800192e:	463a      	mov	r2, r7
 8001930:	4628      	mov	r0, r5
 8001932:	6a21      	ldr	r1, [r4, #32]
 8001934:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001938:	47e0      	blx	ip
 800193a:	2800      	cmp	r0, #0
 800193c:	dc07      	bgt.n	800194e <__sflush_r+0xf6>
 800193e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001946:	f04f 30ff 	mov.w	r0, #4294967295
 800194a:	81a3      	strh	r3, [r4, #12]
 800194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800194e:	4407      	add	r7, r0
 8001950:	1a36      	subs	r6, r6, r0
 8001952:	e7e9      	b.n	8001928 <__sflush_r+0xd0>
 8001954:	dfbffffe 	.word	0xdfbffffe

08001958 <_fflush_r>:
 8001958:	b538      	push	{r3, r4, r5, lr}
 800195a:	690b      	ldr	r3, [r1, #16]
 800195c:	4605      	mov	r5, r0
 800195e:	460c      	mov	r4, r1
 8001960:	b913      	cbnz	r3, 8001968 <_fflush_r+0x10>
 8001962:	2500      	movs	r5, #0
 8001964:	4628      	mov	r0, r5
 8001966:	bd38      	pop	{r3, r4, r5, pc}
 8001968:	b118      	cbz	r0, 8001972 <_fflush_r+0x1a>
 800196a:	6a03      	ldr	r3, [r0, #32]
 800196c:	b90b      	cbnz	r3, 8001972 <_fflush_r+0x1a>
 800196e:	f7ff faa3 	bl	8000eb8 <__sinit>
 8001972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f3      	beq.n	8001962 <_fflush_r+0xa>
 800197a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800197c:	07d0      	lsls	r0, r2, #31
 800197e:	d404      	bmi.n	800198a <_fflush_r+0x32>
 8001980:	0599      	lsls	r1, r3, #22
 8001982:	d402      	bmi.n	800198a <_fflush_r+0x32>
 8001984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001986:	f7ff fb9c 	bl	80010c2 <__retarget_lock_acquire_recursive>
 800198a:	4628      	mov	r0, r5
 800198c:	4621      	mov	r1, r4
 800198e:	f7ff ff63 	bl	8001858 <__sflush_r>
 8001992:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001994:	4605      	mov	r5, r0
 8001996:	07da      	lsls	r2, r3, #31
 8001998:	d4e4      	bmi.n	8001964 <_fflush_r+0xc>
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	059b      	lsls	r3, r3, #22
 800199e:	d4e1      	bmi.n	8001964 <_fflush_r+0xc>
 80019a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80019a2:	f7ff fb8f 	bl	80010c4 <__retarget_lock_release_recursive>
 80019a6:	e7dd      	b.n	8001964 <_fflush_r+0xc>

080019a8 <__swbuf_r>:
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019aa:	460e      	mov	r6, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	4605      	mov	r5, r0
 80019b0:	b118      	cbz	r0, 80019ba <__swbuf_r+0x12>
 80019b2:	6a03      	ldr	r3, [r0, #32]
 80019b4:	b90b      	cbnz	r3, 80019ba <__swbuf_r+0x12>
 80019b6:	f7ff fa7f 	bl	8000eb8 <__sinit>
 80019ba:	69a3      	ldr	r3, [r4, #24]
 80019bc:	60a3      	str	r3, [r4, #8]
 80019be:	89a3      	ldrh	r3, [r4, #12]
 80019c0:	071a      	lsls	r2, r3, #28
 80019c2:	d501      	bpl.n	80019c8 <__swbuf_r+0x20>
 80019c4:	6923      	ldr	r3, [r4, #16]
 80019c6:	b943      	cbnz	r3, 80019da <__swbuf_r+0x32>
 80019c8:	4621      	mov	r1, r4
 80019ca:	4628      	mov	r0, r5
 80019cc:	f000 f82a 	bl	8001a24 <__swsetup_r>
 80019d0:	b118      	cbz	r0, 80019da <__swbuf_r+0x32>
 80019d2:	f04f 37ff 	mov.w	r7, #4294967295
 80019d6:	4638      	mov	r0, r7
 80019d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	6922      	ldr	r2, [r4, #16]
 80019de:	b2f6      	uxtb	r6, r6
 80019e0:	1a98      	subs	r0, r3, r2
 80019e2:	6963      	ldr	r3, [r4, #20]
 80019e4:	4637      	mov	r7, r6
 80019e6:	4283      	cmp	r3, r0
 80019e8:	dc05      	bgt.n	80019f6 <__swbuf_r+0x4e>
 80019ea:	4621      	mov	r1, r4
 80019ec:	4628      	mov	r0, r5
 80019ee:	f7ff ffb3 	bl	8001958 <_fflush_r>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	d1ed      	bne.n	80019d2 <__swbuf_r+0x2a>
 80019f6:	68a3      	ldr	r3, [r4, #8]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60a3      	str	r3, [r4, #8]
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	6022      	str	r2, [r4, #0]
 8001a02:	701e      	strb	r6, [r3, #0]
 8001a04:	6962      	ldr	r2, [r4, #20]
 8001a06:	1c43      	adds	r3, r0, #1
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d004      	beq.n	8001a16 <__swbuf_r+0x6e>
 8001a0c:	89a3      	ldrh	r3, [r4, #12]
 8001a0e:	07db      	lsls	r3, r3, #31
 8001a10:	d5e1      	bpl.n	80019d6 <__swbuf_r+0x2e>
 8001a12:	2e0a      	cmp	r6, #10
 8001a14:	d1df      	bne.n	80019d6 <__swbuf_r+0x2e>
 8001a16:	4621      	mov	r1, r4
 8001a18:	4628      	mov	r0, r5
 8001a1a:	f7ff ff9d 	bl	8001958 <_fflush_r>
 8001a1e:	2800      	cmp	r0, #0
 8001a20:	d0d9      	beq.n	80019d6 <__swbuf_r+0x2e>
 8001a22:	e7d6      	b.n	80019d2 <__swbuf_r+0x2a>

08001a24 <__swsetup_r>:
 8001a24:	b538      	push	{r3, r4, r5, lr}
 8001a26:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <__swsetup_r+0xa8>)
 8001a28:	4605      	mov	r5, r0
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	b118      	cbz	r0, 8001a38 <__swsetup_r+0x14>
 8001a30:	6a03      	ldr	r3, [r0, #32]
 8001a32:	b90b      	cbnz	r3, 8001a38 <__swsetup_r+0x14>
 8001a34:	f7ff fa40 	bl	8000eb8 <__sinit>
 8001a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a3c:	0719      	lsls	r1, r3, #28
 8001a3e:	d422      	bmi.n	8001a86 <__swsetup_r+0x62>
 8001a40:	06da      	lsls	r2, r3, #27
 8001a42:	d407      	bmi.n	8001a54 <__swsetup_r+0x30>
 8001a44:	2209      	movs	r2, #9
 8001a46:	602a      	str	r2, [r5, #0]
 8001a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	81a3      	strh	r3, [r4, #12]
 8001a52:	e033      	b.n	8001abc <__swsetup_r+0x98>
 8001a54:	0758      	lsls	r0, r3, #29
 8001a56:	d512      	bpl.n	8001a7e <__swsetup_r+0x5a>
 8001a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a5a:	b141      	cbz	r1, 8001a6e <__swsetup_r+0x4a>
 8001a5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a60:	4299      	cmp	r1, r3
 8001a62:	d002      	beq.n	8001a6a <__swsetup_r+0x46>
 8001a64:	4628      	mov	r0, r5
 8001a66:	f7ff fb2f 	bl	80010c8 <_free_r>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a6e:	89a3      	ldrh	r3, [r4, #12]
 8001a70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a74:	81a3      	strh	r3, [r4, #12]
 8001a76:	2300      	movs	r3, #0
 8001a78:	6063      	str	r3, [r4, #4]
 8001a7a:	6923      	ldr	r3, [r4, #16]
 8001a7c:	6023      	str	r3, [r4, #0]
 8001a7e:	89a3      	ldrh	r3, [r4, #12]
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	81a3      	strh	r3, [r4, #12]
 8001a86:	6923      	ldr	r3, [r4, #16]
 8001a88:	b94b      	cbnz	r3, 8001a9e <__swsetup_r+0x7a>
 8001a8a:	89a3      	ldrh	r3, [r4, #12]
 8001a8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a94:	d003      	beq.n	8001a9e <__swsetup_r+0x7a>
 8001a96:	4621      	mov	r1, r4
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 f85c 	bl	8001b56 <__smakebuf_r>
 8001a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aa2:	f013 0201 	ands.w	r2, r3, #1
 8001aa6:	d00a      	beq.n	8001abe <__swsetup_r+0x9a>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60a2      	str	r2, [r4, #8]
 8001aac:	6962      	ldr	r2, [r4, #20]
 8001aae:	4252      	negs	r2, r2
 8001ab0:	61a2      	str	r2, [r4, #24]
 8001ab2:	6922      	ldr	r2, [r4, #16]
 8001ab4:	b942      	cbnz	r2, 8001ac8 <__swsetup_r+0xa4>
 8001ab6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001aba:	d1c5      	bne.n	8001a48 <__swsetup_r+0x24>
 8001abc:	bd38      	pop	{r3, r4, r5, pc}
 8001abe:	0799      	lsls	r1, r3, #30
 8001ac0:	bf58      	it	pl
 8001ac2:	6962      	ldrpl	r2, [r4, #20]
 8001ac4:	60a2      	str	r2, [r4, #8]
 8001ac6:	e7f4      	b.n	8001ab2 <__swsetup_r+0x8e>
 8001ac8:	2000      	movs	r0, #0
 8001aca:	e7f7      	b.n	8001abc <__swsetup_r+0x98>
 8001acc:	2000001c 	.word	0x2000001c

08001ad0 <_sbrk_r>:
 8001ad0:	b538      	push	{r3, r4, r5, lr}
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	4d05      	ldr	r5, [pc, #20]	@ (8001aec <_sbrk_r+0x1c>)
 8001ad6:	4604      	mov	r4, r0
 8001ad8:	4608      	mov	r0, r1
 8001ada:	602b      	str	r3, [r5, #0]
 8001adc:	f7ff f900 	bl	8000ce0 <_sbrk>
 8001ae0:	1c43      	adds	r3, r0, #1
 8001ae2:	d102      	bne.n	8001aea <_sbrk_r+0x1a>
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	b103      	cbz	r3, 8001aea <_sbrk_r+0x1a>
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	bd38      	pop	{r3, r4, r5, pc}
 8001aec:	200001e0 	.word	0x200001e0

08001af0 <memchr>:
 8001af0:	4603      	mov	r3, r0
 8001af2:	b510      	push	{r4, lr}
 8001af4:	b2c9      	uxtb	r1, r1
 8001af6:	4402      	add	r2, r0
 8001af8:	4293      	cmp	r3, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	d101      	bne.n	8001b02 <memchr+0x12>
 8001afe:	2000      	movs	r0, #0
 8001b00:	e003      	b.n	8001b0a <memchr+0x1a>
 8001b02:	7804      	ldrb	r4, [r0, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	428c      	cmp	r4, r1
 8001b08:	d1f6      	bne.n	8001af8 <memchr+0x8>
 8001b0a:	bd10      	pop	{r4, pc}

08001b0c <__swhatbuf_r>:
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	460c      	mov	r4, r1
 8001b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b14:	4615      	mov	r5, r2
 8001b16:	2900      	cmp	r1, #0
 8001b18:	461e      	mov	r6, r3
 8001b1a:	b096      	sub	sp, #88	@ 0x58
 8001b1c:	da0c      	bge.n	8001b38 <__swhatbuf_r+0x2c>
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	2100      	movs	r1, #0
 8001b22:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001b26:	bf14      	ite	ne
 8001b28:	2340      	movne	r3, #64	@ 0x40
 8001b2a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001b2e:	2000      	movs	r0, #0
 8001b30:	6031      	str	r1, [r6, #0]
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	b016      	add	sp, #88	@ 0x58
 8001b36:	bd70      	pop	{r4, r5, r6, pc}
 8001b38:	466a      	mov	r2, sp
 8001b3a:	f000 f849 	bl	8001bd0 <_fstat_r>
 8001b3e:	2800      	cmp	r0, #0
 8001b40:	dbed      	blt.n	8001b1e <__swhatbuf_r+0x12>
 8001b42:	9901      	ldr	r1, [sp, #4]
 8001b44:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001b48:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001b4c:	4259      	negs	r1, r3
 8001b4e:	4159      	adcs	r1, r3
 8001b50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b54:	e7eb      	b.n	8001b2e <__swhatbuf_r+0x22>

08001b56 <__smakebuf_r>:
 8001b56:	898b      	ldrh	r3, [r1, #12]
 8001b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b5a:	079d      	lsls	r5, r3, #30
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	d507      	bpl.n	8001b72 <__smakebuf_r+0x1c>
 8001b62:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001b66:	6023      	str	r3, [r4, #0]
 8001b68:	6123      	str	r3, [r4, #16]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	6163      	str	r3, [r4, #20]
 8001b6e:	b003      	add	sp, #12
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b72:	466a      	mov	r2, sp
 8001b74:	ab01      	add	r3, sp, #4
 8001b76:	f7ff ffc9 	bl	8001b0c <__swhatbuf_r>
 8001b7a:	9f00      	ldr	r7, [sp, #0]
 8001b7c:	4605      	mov	r5, r0
 8001b7e:	4639      	mov	r1, r7
 8001b80:	4630      	mov	r0, r6
 8001b82:	f7ff fb0b 	bl	800119c <_malloc_r>
 8001b86:	b948      	cbnz	r0, 8001b9c <__smakebuf_r+0x46>
 8001b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b8c:	059a      	lsls	r2, r3, #22
 8001b8e:	d4ee      	bmi.n	8001b6e <__smakebuf_r+0x18>
 8001b90:	f023 0303 	bic.w	r3, r3, #3
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	81a3      	strh	r3, [r4, #12]
 8001b9a:	e7e2      	b.n	8001b62 <__smakebuf_r+0xc>
 8001b9c:	89a3      	ldrh	r3, [r4, #12]
 8001b9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ba6:	81a3      	strh	r3, [r4, #12]
 8001ba8:	9b01      	ldr	r3, [sp, #4]
 8001baa:	6020      	str	r0, [r4, #0]
 8001bac:	b15b      	cbz	r3, 8001bc6 <__smakebuf_r+0x70>
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bb4:	f000 f81e 	bl	8001bf4 <_isatty_r>
 8001bb8:	b128      	cbz	r0, 8001bc6 <__smakebuf_r+0x70>
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	f023 0303 	bic.w	r3, r3, #3
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	81a3      	strh	r3, [r4, #12]
 8001bc6:	89a3      	ldrh	r3, [r4, #12]
 8001bc8:	431d      	orrs	r5, r3
 8001bca:	81a5      	strh	r5, [r4, #12]
 8001bcc:	e7cf      	b.n	8001b6e <__smakebuf_r+0x18>
	...

08001bd0 <_fstat_r>:
 8001bd0:	b538      	push	{r3, r4, r5, lr}
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	4d06      	ldr	r5, [pc, #24]	@ (8001bf0 <_fstat_r+0x20>)
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	4611      	mov	r1, r2
 8001bdc:	602b      	str	r3, [r5, #0]
 8001bde:	f7ff f859 	bl	8000c94 <_fstat>
 8001be2:	1c43      	adds	r3, r0, #1
 8001be4:	d102      	bne.n	8001bec <_fstat_r+0x1c>
 8001be6:	682b      	ldr	r3, [r5, #0]
 8001be8:	b103      	cbz	r3, 8001bec <_fstat_r+0x1c>
 8001bea:	6023      	str	r3, [r4, #0]
 8001bec:	bd38      	pop	{r3, r4, r5, pc}
 8001bee:	bf00      	nop
 8001bf0:	200001e0 	.word	0x200001e0

08001bf4 <_isatty_r>:
 8001bf4:	b538      	push	{r3, r4, r5, lr}
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4d05      	ldr	r5, [pc, #20]	@ (8001c10 <_isatty_r+0x1c>)
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	4608      	mov	r0, r1
 8001bfe:	602b      	str	r3, [r5, #0]
 8001c00:	f7ff f857 	bl	8000cb2 <_isatty>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d102      	bne.n	8001c0e <_isatty_r+0x1a>
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	b103      	cbz	r3, 8001c0e <_isatty_r+0x1a>
 8001c0c:	6023      	str	r3, [r4, #0]
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
 8001c10:	200001e0 	.word	0x200001e0

08001c14 <_init>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	bf00      	nop
 8001c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1a:	bc08      	pop	{r3}
 8001c1c:	469e      	mov	lr, r3
 8001c1e:	4770      	bx	lr

08001c20 <_fini>:
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	bf00      	nop
 8001c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c26:	bc08      	pop	{r3}
 8001c28:	469e      	mov	lr, r3
 8001c2a:	4770      	bx	lr
