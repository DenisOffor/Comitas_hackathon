
Comitas_hackathon_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c24  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001d54  08001d54  00002d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d98  08001d98  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d98  08001d98  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d98  08001d98  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d98  08001d98  00002d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001d9c  08001d9c  00002d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08001da0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000006c  08001e0c  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08001e0c  000031f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002134  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ae3  00000000  00000000  000051c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000278  00000000  00000000  00005cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a6  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e27  00000000  00000000  000060ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000324d  00000000  00000000  00017ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000595e6  00000000  00000000  0001b142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00074728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fe0  00000000  00000000  0007476c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0007574c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d3c 	.word	0x08001d3c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08001d3c 	.word	0x08001d3c

08000170 <__aeabi_fmul>:
 8000170:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000174:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000178:	bf1e      	ittt	ne
 800017a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800017e:	ea92 0f0c 	teqne	r2, ip
 8000182:	ea93 0f0c 	teqne	r3, ip
 8000186:	d06f      	beq.n	8000268 <__aeabi_fmul+0xf8>
 8000188:	441a      	add	r2, r3
 800018a:	ea80 0c01 	eor.w	ip, r0, r1
 800018e:	0240      	lsls	r0, r0, #9
 8000190:	bf18      	it	ne
 8000192:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000196:	d01e      	beq.n	80001d6 <__aeabi_fmul+0x66>
 8000198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800019c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a4:	fba0 3101 	umull	r3, r1, r0, r1
 80001a8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001ac:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b0:	bf3e      	ittt	cc
 80001b2:	0049      	lslcc	r1, r1, #1
 80001b4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001b8:	005b      	lslcc	r3, r3, #1
 80001ba:	ea40 0001 	orr.w	r0, r0, r1
 80001be:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c2:	2afd      	cmp	r2, #253	@ 0xfd
 80001c4:	d81d      	bhi.n	8000202 <__aeabi_fmul+0x92>
 80001c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ce:	bf08      	it	eq
 80001d0:	f020 0001 	biceq.w	r0, r0, #1
 80001d4:	4770      	bx	lr
 80001d6:	f090 0f00 	teq	r0, #0
 80001da:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001de:	bf08      	it	eq
 80001e0:	0249      	lsleq	r1, r1, #9
 80001e2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001e6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ea:	3a7f      	subs	r2, #127	@ 0x7f
 80001ec:	bfc2      	ittt	gt
 80001ee:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001f6:	4770      	bxgt	lr
 80001f8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001fc:	f04f 0300 	mov.w	r3, #0
 8000200:	3a01      	subs	r2, #1
 8000202:	dc5d      	bgt.n	80002c0 <__aeabi_fmul+0x150>
 8000204:	f112 0f19 	cmn.w	r2, #25
 8000208:	bfdc      	itt	le
 800020a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800020e:	4770      	bxle	lr
 8000210:	f1c2 0200 	rsb	r2, r2, #0
 8000214:	0041      	lsls	r1, r0, #1
 8000216:	fa21 f102 	lsr.w	r1, r1, r2
 800021a:	f1c2 0220 	rsb	r2, r2, #32
 800021e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000222:	ea5f 0031 	movs.w	r0, r1, rrx
 8000226:	f140 0000 	adc.w	r0, r0, #0
 800022a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800022e:	bf08      	it	eq
 8000230:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000234:	4770      	bx	lr
 8000236:	f092 0f00 	teq	r2, #0
 800023a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800023e:	bf02      	ittt	eq
 8000240:	0040      	lsleq	r0, r0, #1
 8000242:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000246:	3a01      	subeq	r2, #1
 8000248:	d0f9      	beq.n	800023e <__aeabi_fmul+0xce>
 800024a:	ea40 000c 	orr.w	r0, r0, ip
 800024e:	f093 0f00 	teq	r3, #0
 8000252:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000256:	bf02      	ittt	eq
 8000258:	0049      	lsleq	r1, r1, #1
 800025a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800025e:	3b01      	subeq	r3, #1
 8000260:	d0f9      	beq.n	8000256 <__aeabi_fmul+0xe6>
 8000262:	ea41 010c 	orr.w	r1, r1, ip
 8000266:	e78f      	b.n	8000188 <__aeabi_fmul+0x18>
 8000268:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800026c:	ea92 0f0c 	teq	r2, ip
 8000270:	bf18      	it	ne
 8000272:	ea93 0f0c 	teqne	r3, ip
 8000276:	d00a      	beq.n	800028e <__aeabi_fmul+0x11e>
 8000278:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800027c:	bf18      	it	ne
 800027e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000282:	d1d8      	bne.n	8000236 <__aeabi_fmul+0xc6>
 8000284:	ea80 0001 	eor.w	r0, r0, r1
 8000288:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	bf17      	itett	ne
 8000294:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000298:	4608      	moveq	r0, r1
 800029a:	f091 0f00 	teqne	r1, #0
 800029e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a2:	d014      	beq.n	80002ce <__aeabi_fmul+0x15e>
 80002a4:	ea92 0f0c 	teq	r2, ip
 80002a8:	d101      	bne.n	80002ae <__aeabi_fmul+0x13e>
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	d10f      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002ae:	ea93 0f0c 	teq	r3, ip
 80002b2:	d103      	bne.n	80002bc <__aeabi_fmul+0x14c>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	bf18      	it	ne
 80002b8:	4608      	movne	r0, r1
 80002ba:	d108      	bne.n	80002ce <__aeabi_fmul+0x15e>
 80002bc:	ea80 0001 	eor.w	r0, r0, r1
 80002c0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002cc:	4770      	bx	lr
 80002ce:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002d6:	4770      	bx	lr

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	@ 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_f2iz>:
 80004f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004fc:	d30f      	bcc.n	800051e <__aeabi_f2iz+0x2a>
 80004fe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000502:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000506:	d90d      	bls.n	8000524 <__aeabi_f2iz+0x30>
 8000508:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800050c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000510:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000514:	fa23 f002 	lsr.w	r0, r3, r2
 8000518:	bf18      	it	ne
 800051a:	4240      	negne	r0, r0
 800051c:	4770      	bx	lr
 800051e:	f04f 0000 	mov.w	r0, #0
 8000522:	4770      	bx	lr
 8000524:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000528:	d101      	bne.n	800052e <__aeabi_f2iz+0x3a>
 800052a:	0242      	lsls	r2, r0, #9
 800052c:	d105      	bne.n	800053a <__aeabi_f2iz+0x46>
 800052e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000532:	bf08      	it	eq
 8000534:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000538:	4770      	bx	lr
 800053a:	f04f 0000 	mov.w	r0, #0
 800053e:	4770      	bx	lr

08000540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <init_GPIO_for_I2C>:


#include <TH02.h>

void init_GPIO_for_I2C() {
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <init_GPIO_for_I2C+0x30>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a09      	ldr	r2, [pc, #36]	@ (800057c <init_GPIO_for_I2C+0x30>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
	GPIOB->CRL |= GPIO_CRL_MODE6 | GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_CNF7;
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 8000562:	f043 434f 	orr.w	r3, r3, #3472883712	@ 0xcf000000
 8000566:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= GPIO_ODR_ODR6 | GPIO_ODR_ODR7;
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <init_GPIO_for_I2C+0x34>)
 800056e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000
 8000580:	40010c00 	.word	0x40010c00

08000584 <I2C_for_TH_init>:

void I2C_for_TH_init() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	init_GPIO_for_I2C();
 8000588:	f7ff ffe0 	bl	800054c <init_GPIO_for_I2C>

	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800058c:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <I2C_for_TH_init+0x58>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <I2C_for_TH_init+0x58>)
 8000592:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000596:	61d3      	str	r3, [r2, #28]
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a10      	ldr	r2, [pc, #64]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 800059e:	f023 0301 	bic.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]

	I2C1->CR2 |= I2C_CR2_FREQ_3; //8
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	6053      	str	r3, [r2, #4]
	I2C1->CCR |= 0x0028;
 80005b0:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	4a0a      	ldr	r2, [pc, #40]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005b6:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80005ba:	61d3      	str	r3, [r2, #28]
	I2C1->TRISE |= 0x0009;
 80005bc:	4b08      	ldr	r3, [pc, #32]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005c2:	f043 0309 	orr.w	r3, r3, #9
 80005c6:	6213      	str	r3, [r2, #32]
	I2C1->CR1 |= I2C_CR1_PE | I2C_CR1_ACK;
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <I2C_for_TH_init+0x5c>)
 80005ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40005400 	.word	0x40005400

080005e4 <I2C_TH_SendByte>:

void I2C_TH_SendByte(uint8_t addr, uint8_t byte) {
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	460a      	mov	r2, r1
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	4613      	mov	r3, r2
 80005f2:	71bb      	strb	r3, [r7, #6]
	I2C1->CR1 |= I2C_CR1_START;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	@ (800066c <I2C_TH_SendByte+0x88>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1c      	ldr	r2, [pc, #112]	@ (800066c <I2C_TH_SendByte+0x88>)
 80005fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005fe:	6013      	str	r3, [r2, #0]
	while((I2C1->SR1 & I2C_SR1_SB) != I2C_SR1_SB);
 8000600:	bf00      	nop
 8000602:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	2b01      	cmp	r3, #1
 800060c:	d1f9      	bne.n	8000602 <I2C_TH_SendByte+0x1e>
	(void) I2C1->SR1;
 800060e:	4b17      	ldr	r3, [pc, #92]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000610:	695b      	ldr	r3, [r3, #20]
	I2C1->DR = addr & ~0x01;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4a15      	ldr	r2, [pc, #84]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000616:	f023 0301 	bic.w	r3, r3, #1
 800061a:	6113      	str	r3, [r2, #16]
	while((I2C1->SR1 & I2C_SR1_ADDR) != I2C_SR1_ADDR);
 800061c:	bf00      	nop
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b02      	cmp	r3, #2
 8000628:	d1f9      	bne.n	800061e <I2C_TH_SendByte+0x3a>
	(void) I2C1->SR1;  // clear ADDR
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <I2C_TH_SendByte+0x88>)
 800062c:	695b      	ldr	r3, [r3, #20]
	(void) I2C1->SR2;  // clear ADDR
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000630:	699b      	ldr	r3, [r3, #24]
	I2C1->DR= byte;
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000634:	79bb      	ldrb	r3, [r7, #6]
 8000636:	6113      	str	r3, [r2, #16]
	while((I2C1->SR1 & I2C_SR1_TXE) != I2C_SR1_TXE);
 8000638:	bf00      	nop
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <I2C_TH_SendByte+0x88>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000642:	2b80      	cmp	r3, #128	@ 0x80
 8000644:	d1f9      	bne.n	800063a <I2C_TH_SendByte+0x56>
	I2C1->CR1 |= I2C_CR1_STOP;
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a08      	ldr	r2, [pc, #32]	@ (800066c <I2C_TH_SendByte+0x88>)
 800064c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000650:	6013      	str	r3, [r2, #0]
	while((I2C1->SR1 & I2C_SR1_STOPF) != I2C_SR1_STOPF);
 8000652:	bf00      	nop
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <I2C_TH_SendByte+0x88>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f003 0310 	and.w	r3, r3, #16
 800065c:	2b10      	cmp	r3, #16
 800065e:	d1f9      	bne.n	8000654 <I2C_TH_SendByte+0x70>
}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	40005400 	.word	0x40005400

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4906      	ldr	r1, [pc, #24]	@ (80006a4 <__NVIC_EnableIRQ+0x34>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	@ (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	@ (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <DMA1_Channel4_IRQHandler>:
#include "UART_for_PC.h"

uint8_t UART_tx_buf[] = "Comitas\r\n";


void DMA1_Channel4_IRQHandler(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	DMA1->IFCR |= DMA_IFCR_CTCIF4;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <DMA1_Channel4_IRQHandler+0x24>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	4a06      	ldr	r2, [pc, #24]	@ (8000720 <DMA1_Channel4_IRQHandler+0x24>)
 8000706:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800070a:	6053      	str	r3, [r2, #4]
	DMA1_Channel4->CCR &= ~DMA_CCR_EN;
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <DMA1_Channel4_IRQHandler+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <DMA1_Channel4_IRQHandler+0x28>)
 8000712:	f023 0301 	bic.w	r3, r3, #1
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40020000 	.word	0x40020000
 8000724:	40020044 	.word	0x40020044

08000728 <init_GPIO_for_USART>:

void init_GPIO_for_USART() {
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <init_GPIO_for_USART+0x24>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a06      	ldr	r2, [pc, #24]	@ (800074c <init_GPIO_for_USART+0x24>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
	GPIOA->CRH |= GPIO_CRH_MODE9 | GPIO_CRH_CNF9_1;
 8000738:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <init_GPIO_for_USART+0x28>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <init_GPIO_for_USART+0x28>)
 800073e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000742:	6053      	str	r3, [r2, #4]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	40021000 	.word	0x40021000
 8000750:	40010800 	.word	0x40010800

08000754 <init_USART>:

void init_USART() {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	init_GPIO_for_USART();
 8000758:	f7ff ffe6 	bl	8000728 <init_GPIO_for_USART>
	init_DMA_for_USART();
 800075c:	f000 f82a 	bl	80007b4 <init_DMA_for_USART>

	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000760:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <init_USART+0x50>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <init_USART+0x50>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076a:	6193      	str	r3, [r2, #24]
	USART1->CR1 |= USART_CR1_TE;
 800076c:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <init_USART+0x54>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a0d      	ldr	r2, [pc, #52]	@ (80007a8 <init_USART+0x54>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	60d3      	str	r3, [r2, #12]
	USART1->BRR = SystemCoreClock / 115200;
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <init_USART+0x58>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <init_USART+0x54>)
 800077e:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <init_USART+0x5c>)
 8000780:	fba1 1303 	umull	r1, r3, r1, r3
 8000784:	0c1b      	lsrs	r3, r3, #16
 8000786:	6093      	str	r3, [r2, #8]
	USART1->CR3 |= USART_CR3_DMAT;
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <init_USART+0x54>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a06      	ldr	r2, [pc, #24]	@ (80007a8 <init_USART+0x54>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000792:	6153      	str	r3, [r2, #20]
	USART1->CR1 |= USART_CR1_UE;
 8000794:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <init_USART+0x54>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	4a03      	ldr	r2, [pc, #12]	@ (80007a8 <init_USART+0x54>)
 800079a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40013800 	.word	0x40013800
 80007ac:	20000000 	.word	0x20000000
 80007b0:	91a2b3c5 	.word	0x91a2b3c5

080007b4 <init_DMA_for_USART>:


void init_DMA_for_USART() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <init_DMA_for_USART+0x4c>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <init_DMA_for_USART+0x4c>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6153      	str	r3, [r2, #20]
	//USART TX channel - 4
	DMA1_Channel4->CCR |= DMA_CCR_DIR | DMA_CCR_MINC;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <init_DMA_for_USART+0x50>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <init_DMA_for_USART+0x50>)
 80007ca:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80007ce:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CMAR = (uint32_t)(&UART_tx_buf[0]);
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <init_DMA_for_USART+0x50>)
 80007d2:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <init_DMA_for_USART+0x54>)
 80007d4:	60da      	str	r2, [r3, #12]
	DMA1_Channel4->CPAR = (uint32_t)(&(USART1->DR));
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <init_DMA_for_USART+0x50>)
 80007d8:	4a0c      	ldr	r2, [pc, #48]	@ (800080c <init_DMA_for_USART+0x58>)
 80007da:	609a      	str	r2, [r3, #8]
	DMA1_Channel4->CCR |= DMA_CCR_TCIE;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <init_DMA_for_USART+0x50>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <init_DMA_for_USART+0x50>)
 80007e2:	f043 0302 	orr.w	r3, r3, #2
 80007e6:	6013      	str	r3, [r2, #0]
	DMA1_Channel4->CNDTR = 0;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <init_DMA_for_USART+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]

	NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007ee:	200e      	movs	r0, #14
 80007f0:	f7ff ff3e 	bl	8000670 <__NVIC_EnableIRQ>
	NVIC_SetPriority(DMA1_Channel4_IRQn, 3);
 80007f4:	2103      	movs	r1, #3
 80007f6:	200e      	movs	r0, #14
 80007f8:	f7ff ff56 	bl	80006a8 <__NVIC_SetPriority>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	40020044 	.word	0x40020044
 8000808:	20000004 	.word	0x20000004
 800080c:	40013804 	.word	0x40013804

08000810 <UART_send_data>:

void UART_send_data(uint8_t ch8) {
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	UART_tx_buf[0] = ch8;
 800081a:	4a13      	ldr	r2, [pc, #76]	@ (8000868 <UART_send_data+0x58>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	7013      	strb	r3, [r2, #0]
	DMA1_Channel4->CMAR = (uint32_t)(&UART_tx_buf[0]);
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <UART_send_data+0x5c>)
 8000822:	4a11      	ldr	r2, [pc, #68]	@ (8000868 <UART_send_data+0x58>)
 8000824:	60da      	str	r2, [r3, #12]
	DMA1_Channel4->CNDTR = 1;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <UART_send_data+0x5c>)
 8000828:	2201      	movs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
	DMA1_Channel4->CCR |= DMA_CCR_EN;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <UART_send_data+0x5c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <UART_send_data+0x5c>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6013      	str	r3, [r2, #0]
	while(DMA1_Channel4->CCR & DMA_CCR_EN) {};
 8000838:	bf00      	nop
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <UART_send_data+0x5c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f9      	bne.n	800083a <UART_send_data+0x2a>
	for(int i = 0; i < 100; i++);
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e002      	b.n	8000852 <UART_send_data+0x42>
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	2b63      	cmp	r3, #99	@ 0x63
 8000856:	ddf9      	ble.n	800084c <UART_send_data+0x3c>
	flag = 0;
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <UART_send_data+0x60>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000004 	.word	0x20000004
 800086c:	40020044 	.word	0x40020044
 8000870:	20000088 	.word	0x20000088

08000874 <__NVIC_EnableIRQ>:
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4906      	ldr	r1, [pc, #24]	@ (80008a8 <__NVIC_EnableIRQ+0x34>)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	@ (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <TIM2_IRQHandler>:
DS18B20_CMD ds18b20_cmd = TEMPERATURE_CONVERTING;
uint8_t ds_buff[9];
uint16_t temp;
float temperature = 0;

void TIM2_IRQHandler() {
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6113      	str	r3, [r2, #16]
	//TIM2->CR1 &= ~TIM_CR1_CEN;
	flag = 1;
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <TIM2_IRQHandler+0x24>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
	//PORT_LED->ODR ^= (1 << PIN_LED);
	//ds18b20_cmd = TEMPERATURE_READING;
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000088 	.word	0x20000088

08000928 <init_Gpio_for_ds>:

void init_Gpio_for_ds() {
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	//PIN for Data line (DQ) of One-wire interface
	RCC->APB2ENR |= RCC_PORT_DS18B20;
 800092c:	4b13      	ldr	r3, [pc, #76]	@ (800097c <init_Gpio_for_ds+0x54>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a12      	ldr	r2, [pc, #72]	@ (800097c <init_Gpio_for_ds+0x54>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
	PORT_DS18B20->CRH |= GPIO_MODE_DS18B20;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <init_Gpio_for_ds+0x58>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4a10      	ldr	r2, [pc, #64]	@ (8000980 <init_Gpio_for_ds+0x58>)
 800093e:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000942:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->CRH |= GPIO_OPEN_DRAIN_DS18B20;
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <init_Gpio_for_ds+0x58>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4a0d      	ldr	r2, [pc, #52]	@ (8000980 <init_Gpio_for_ds+0x58>)
 800094a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800094e:	6053      	str	r3, [r2, #4]
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <init_Gpio_for_ds+0x58>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <init_Gpio_for_ds+0x58>)
 8000956:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800095a:	60d3      	str	r3, [r2, #12]

	//PIN for LED, which will signalize about error
	RCC->APB2ENR |= RCC_PORT_LED;
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <init_Gpio_for_ds+0x54>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a06      	ldr	r2, [pc, #24]	@ (800097c <init_Gpio_for_ds+0x54>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
	PORT_LED->CRH |= GPIO_MODE_LED;
 8000968:	4b05      	ldr	r3, [pc, #20]	@ (8000980 <init_Gpio_for_ds+0x58>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <init_Gpio_for_ds+0x58>)
 800096e:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000972:	6053      	str	r3, [r2, #4]
	//PORT_LED->ODR |= (1 << PIN_LED);
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800

08000984 <init_tim1_for_us>:

void init_tim1_for_us() {
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <init_tim1_for_us+0x28>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <init_tim1_for_us+0x28>)
 800098e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000992:	6193      	str	r3, [r2, #24]
	TIM1->ARR = 1000;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <init_tim1_for_us+0x2c>)
 8000996:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM1->PSC = 8;
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <init_tim1_for_us+0x2c>)
 800099e:	2208      	movs	r2, #8
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40012c00 	.word	0x40012c00

080009b4 <init_tim2_for_delay>:

void init_tim2_for_delay() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80009b8:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <init_tim2_for_delay+0x50>)
 80009ba:	69db      	ldr	r3, [r3, #28]
 80009bc:	4a11      	ldr	r2, [pc, #68]	@ (8000a04 <init_tim2_for_delay+0x50>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	61d3      	str	r3, [r2, #28]
	TIM2->ARR = 8000;
 80009c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009c8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = 1000;
 80009ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009d6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->DIER |= TIM_DIER_UIE;
 80009d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM2_IRQn);
 80009e8:	201c      	movs	r0, #28
 80009ea:	f7ff ff43 	bl	8000874 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 80009ee:	2101      	movs	r1, #1
 80009f0:	201c      	movs	r0, #28
 80009f2:	f7ff ff5b 	bl	80008ac <__NVIC_SetPriority>
	TIM2->CR1 = TIM_CR1_CEN;
 80009f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <ds_reset_pulse>:

void ds_reset_pulse()
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
	uint8_t result;
	//line should be in high state
	if((PORT_DS18B20->IDR & (1 << PIN_DS18B20)) == 0) {
 8000a0e:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <ds_reset_pulse+0x90>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d103      	bne.n	8000a22 <ds_reset_pulse+0x1a>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <ds_reset_pulse+0x94>)
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	701a      	strb	r2, [r3, #0]
		return;
 8000a20:	e036      	b.n	8000a90 <ds_reset_pulse+0x88>
	}
	TIM1->CNT = 0;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6013      	str	r3, [r2, #0]
	//make the line go to low and wait in this state 480-960 us
	PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <ds_reset_pulse+0x90>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <ds_reset_pulse+0x90>)
 8000a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a3e:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 480) {};
 8000a40:	bf00      	nop
 8000a42:	4b17      	ldr	r3, [pc, #92]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a46:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a4a:	d3fa      	bcc.n	8000a42 <ds_reset_pulse+0x3a>
	//release the line (let go it to high) and wait to respond of DS18B20 after 15-60 us of wait
	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <ds_reset_pulse+0x90>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	4a11      	ldr	r2, [pc, #68]	@ (8000a98 <ds_reset_pulse+0x90>)
 8000a52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a56:	60d3      	str	r3, [r2, #12]
	while(TIM1->CNT < 520) {};
 8000a58:	bf00      	nop
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a5e:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8000a62:	d3fa      	bcc.n	8000a5a <ds_reset_pulse+0x52>
	//read line in order to check answer from DS18B20
	result = PORT_DS18B20->IDR & (1 << PIN_DS18B20);
 8000a64:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <ds_reset_pulse+0x90>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	2300      	movs	r3, #0
 8000a6a:	71fb      	strb	r3, [r7, #7]
//	//wait minimum 480us from moment, where we release the line
	while(TIM1->CNT < 960) {};
 8000a6c:	bf00      	nop
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a72:	f5b3 7f70 	cmp.w	r3, #960	@ 0x3c0
 8000a76:	d3fa      	bcc.n	8000a6e <ds_reset_pulse+0x66>
//	//if line was in high state - there are no answer from DS18B20 :(
	if(result)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <ds_reset_pulse+0x7c>
		ds18b20_cmd = ERROR_WITH_SENSOR;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <ds_reset_pulse+0x94>)
 8000a80:	2203      	movs	r2, #3
 8000a82:	701a      	strb	r2, [r3, #0]
	TIM1->CR1 &= ~TIM_CR1_CEN;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <ds_reset_pulse+0x98>)
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40010800 	.word	0x40010800
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	40012c00 	.word	0x40012c00

08000aa4 <ds_write_bit>:

void ds_write_bit(uint8_t bit)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	TIM1->CNT = 0;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <ds_write_bit+0x7c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM1->CR1 |= TIM_CR1_CEN;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <ds_write_bit+0x7c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <ds_write_bit+0x7c>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]
	while(TIM1->CNT < 5) {};
 8000ac0:	bf00      	nop
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <ds_write_bit+0x7c>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d9fb      	bls.n	8000ac2 <ds_write_bit+0x1e>
	//make the line go to low and wait in this state at least 1 us
    PORT_DS18B20->ODR &= ~(1 << PIN_DS18B20);
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <ds_write_bit+0x80>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	4a15      	ldr	r2, [pc, #84]	@ (8000b24 <ds_write_bit+0x80>)
 8000ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ad4:	60d3      	str	r3, [r2, #12]
    while(TIM1->CNT < 10) {};
 8000ad6:	bf00      	nop
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <ds_write_bit+0x7c>)
 8000ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000adc:	2b09      	cmp	r3, #9
 8000ade:	d9fb      	bls.n	8000ad8 <ds_write_bit+0x34>
    //set bit on line
    if(bit)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d005      	beq.n	8000af2 <ds_write_bit+0x4e>
    	PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <ds_write_bit+0x80>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <ds_write_bit+0x80>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000af0:	60d3      	str	r3, [r2, #12]
    //"write operation" with bit last 60-120us
    while(TIM1->CNT < 70) {};
 8000af2:	bf00      	nop
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <ds_write_bit+0x7c>)
 8000af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000af8:	2b45      	cmp	r3, #69	@ 0x45
 8000afa:	d9fb      	bls.n	8000af4 <ds_write_bit+0x50>
    //release line again
    PORT_DS18B20->ODR |= (1 << PIN_DS18B20);
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <ds_write_bit+0x80>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <ds_write_bit+0x80>)
 8000b02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b06:	60d3      	str	r3, [r2, #12]
    TIM1->CR1 &= ~TIM_CR1_CEN;
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <ds_write_bit+0x7c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <ds_write_bit+0x7c>)
 8000b0e:	f023 0301 	bic.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40010800 	.word	0x40010800

08000b28 <ds_write_byte>:

void ds_write_byte(uint8_t byte)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < 8; i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e00f      	b.n	8000b58 <ds_write_byte+0x30>
		ds_write_bit(byte & (1 << i));
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	b25a      	sxtb	r2, r3
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	4013      	ands	r3, r2
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ffa9 	bl	8000aa4 <ds_write_bit>
	for(uint8_t i = 0; i < 8; i++)
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	3301      	adds	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	d9ec      	bls.n	8000b38 <ds_write_byte+0x10>
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <TIM_1sec_on>:
	for(uint8_t i = 0; i < 8; i++)
		result |= (ds_read_bit() << i);
	return result;
}

void TIM_1sec_on() {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8000b6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 |= TIM_CR1_CEN;
 8000b74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <temperature_measurment_start>:

void temperature_measurment_start() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 8000b90:	f7ff ff3a 	bl	8000a08 <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 8000b94:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <temperature_measurment_start+0x28>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d008      	beq.n	8000bae <temperature_measurment_start+0x22>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 8000b9c:	20cc      	movs	r0, #204	@ 0xcc
 8000b9e:	f7ff ffc3 	bl	8000b28 <ds_write_byte>
	ds_write_byte(CONVERT_TEMP);
 8000ba2:	2044      	movs	r0, #68	@ 0x44
 8000ba4:	f7ff ffc0 	bl	8000b28 <ds_write_byte>
	TIM_1sec_on();
 8000ba8:	f7ff ffde 	bl	8000b68 <TIM_1sec_on>
 8000bac:	e000      	b.n	8000bb0 <temperature_measurment_start+0x24>
		return;
 8000bae:	bf00      	nop
}
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000008c 	.word	0x2000008c

08000bb8 <temprepature_measurment_read>:

void temprepature_measurment_read() {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	ds_reset_pulse();
 8000bbc:	f7ff ff24 	bl	8000a08 <ds_reset_pulse>
	if(ds18b20_cmd == ERROR_WITH_SENSOR)
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <temprepature_measurment_read+0x68>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d029      	beq.n	8000c1c <temprepature_measurment_read+0x64>
		return;
	ds_write_byte(SKIP_ROM_ADR);
 8000bc8:	20cc      	movs	r0, #204	@ 0xcc
 8000bca:	f7ff ffad 	bl	8000b28 <ds_write_byte>
	ds_write_byte(READ_DATA);
 8000bce:	20be      	movs	r0, #190	@ 0xbe
 8000bd0:	f7ff ffaa 	bl	8000b28 <ds_write_byte>

	//for(int i = 0; i < 9; i++ )
	//	ds_buff[i] = ds_read_byte();

	//convert temperature
	temp = ds_buff[1];
 8000bd4:	4b13      	ldr	r3, [pc, #76]	@ (8000c24 <temprepature_measurment_read+0x6c>)
 8000bd6:	785b      	ldrb	r3, [r3, #1]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <temprepature_measurment_read+0x70>)
 8000bdc:	801a      	strh	r2, [r3, #0]
	temp = temp << 8;
 8000bde:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <temprepature_measurment_read+0x70>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <temprepature_measurment_read+0x70>)
 8000be8:	801a      	strh	r2, [r3, #0]
	temp |= ds_buff[0];
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <temprepature_measurment_read+0x6c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <temprepature_measurment_read+0x70>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <temprepature_measurment_read+0x70>)
 8000bfa:	801a      	strh	r2, [r3, #0]
	temperature = (float)temp * 0.0625;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <temprepature_measurment_read+0x70>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fc1f 	bl	8000444 <__aeabi_ui2f>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff faaf 	bl	8000170 <__aeabi_fmul>
 8000c12:	4603      	mov	r3, r0
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <temprepature_measurment_read+0x74>)
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e000      	b.n	8000c1e <temprepature_measurment_read+0x66>
		return;
 8000c1c:	bf00      	nop
}
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	20000090 	.word	0x20000090
 8000c28:	2000009a 	.word	0x2000009a
 8000c2c:	2000009c 	.word	0x2000009c

08000c30 <init_DS18B20>:

void init_DS18B20() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	init_Gpio_for_ds();
 8000c34:	f7ff fe78 	bl	8000928 <init_Gpio_for_ds>
	init_tim1_for_us();
 8000c38:	f7ff fea4 	bl	8000984 <init_tim1_for_us>
	init_tim2_for_delay();
 8000c3c:	f7ff feba 	bl	80009b4 <init_tim2_for_delay>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <DS18B20_measure_temperature>:

void DS18B20_measure_temperature() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	switch(ds18b20_cmd) {
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <DS18B20_measure_temperature+0x64>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d824      	bhi.n	8000c9a <DS18B20_measure_temperature+0x56>
 8000c50:	a201      	add	r2, pc, #4	@ (adr r2, 8000c58 <DS18B20_measure_temperature+0x14>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c69 	.word	0x08000c69
 8000c5c:	08000ca3 	.word	0x08000ca3
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000c8d 	.word	0x08000c8d
		case TEMPERATURE_CONVERTING:
			temperature_measurment_start();
 8000c68:	f7ff ff90 	bl	8000b8c <temperature_measurment_start>
			ds18b20_cmd = WAITING_1SEC;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <DS18B20_measure_temperature+0x64>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
			break;
 8000c72:	e017      	b.n	8000ca4 <DS18B20_measure_temperature+0x60>
		case TEMPERATURE_READING:
			PORT_LED->ODR ^= (1 << PIN_LED);
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <DS18B20_measure_temperature+0x68>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <DS18B20_measure_temperature+0x68>)
 8000c7a:	f483 6300 	eor.w	r3, r3, #2048	@ 0x800
 8000c7e:	60d3      	str	r3, [r2, #12]
			temprepature_measurment_read();
 8000c80:	f7ff ff9a 	bl	8000bb8 <temprepature_measurment_read>
			ds18b20_cmd = TEMPERATURE_CONVERTING;
 8000c84:	4b08      	ldr	r3, [pc, #32]	@ (8000ca8 <DS18B20_measure_temperature+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
			break;
 8000c8a:	e00b      	b.n	8000ca4 <DS18B20_measure_temperature+0x60>
		case ERROR_WITH_SENSOR:
			PORT_LED->ODR |= (1 << PIN_LED);
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <DS18B20_measure_temperature+0x68>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4a06      	ldr	r2, [pc, #24]	@ (8000cac <DS18B20_measure_temperature+0x68>)
 8000c92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c96:	60d3      	str	r3, [r2, #12]
			//ds18b20_cmd = TEMPERATURE_CONVERTING;
			break;
 8000c98:	e004      	b.n	8000ca4 <DS18B20_measure_temperature+0x60>
		case WAITING_1SEC:
		break;
		default: ds18b20_cmd = TEMPERATURE_CONVERTING;
 8000c9a:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <DS18B20_measure_temperature+0x64>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
			break;
 8000ca0:	e000      	b.n	8000ca4 <DS18B20_measure_temperature+0x60>
		break;
 8000ca2:	bf00      	nop
	}
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000008c 	.word	0x2000008c
 8000cac:	40010800 	.word	0x40010800

08000cb0 <__io_putchar>:
#include "ds18b20.h"
#include "TH02.h"
#include "UART_for_PC.h"
#include <stdio.h>

int __io_putchar(int ch) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	uint8_t ch8 = ch & 0xFF;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
	UART_send_data(ch8);
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fda6 	bl	8000810 <UART_send_data>
	return ch;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <main>:

int main(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	init_DS18B20();
 8000cd4:	f7ff ffac 	bl	8000c30 <init_DS18B20>
	init_USART();
 8000cd8:	f7ff fd3c 	bl	8000754 <init_USART>
	flag = 0;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <main+0x54>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
	TIM_1sec_on();
 8000ce2:	f7ff ff41 	bl	8000b68 <TIM_1sec_on>
	I2C_for_TH_init();
 8000ce6:	f7ff fc4d 	bl	8000584 <I2C_for_TH_init>
	I2C_TH_SendByte(0x40, 0x03);
 8000cea:	2103      	movs	r1, #3
 8000cec:	2040      	movs	r0, #64	@ 0x40
 8000cee:	f7ff fc79 	bl	80005e4 <I2C_TH_SendByte>
	GPIOA->ODR |= GPIO_ODR_ODR11;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <main+0x58>)
 8000cf4:	68db      	ldr	r3, [r3, #12]
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8000d28 <main+0x58>)
 8000cf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cfc:	60d3      	str	r3, [r2, #12]
	//uint8_t data[2] = {0x03, 0x11 };
	//I2C_TH_Send_NBytes(0x40, &data[0], 2);
  while (1)
  {
	  DS18B20_measure_temperature();
 8000cfe:	f7ff ffa1 	bl	8000c44 <DS18B20_measure_temperature>
	  if(flag == 1)
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <main+0x54>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d1f9      	bne.n	8000cfe <main+0x2e>
		  printf(" temp: %d C\r\n", (int8_t)(temperature));
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <main+0x5c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fbf0 	bl	80004f4 <__aeabi_f2iz>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b25b      	sxtb	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <main+0x60>)
 8000d1c:	f000 f996 	bl	800104c <iprintf>
	  DS18B20_measure_temperature();
 8000d20:	e7ed      	b.n	8000cfe <main+0x2e>
 8000d22:	bf00      	nop
 8000d24:	20000088 	.word	0x20000088
 8000d28:	40010800 	.word	0x40010800
 8000d2c:	2000009c 	.word	0x2000009c
 8000d30:	08001d54 	.word	0x08001d54

08000d34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
  }

  return len;
 8000d64:	687b      	ldr	r3, [r7, #4]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	e009      	b.n	8000d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	60ba      	str	r2, [r7, #8]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff91 	bl	8000cb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3301      	adds	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dbf1      	blt.n	8000d80 <_write+0x12>
  }
  return len;
 8000d9c:	687b      	ldr	r3, [r7, #4]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_close>:

int _close(int file)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
	...

08000e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e10:	4a14      	ldr	r2, [pc, #80]	@ (8000e64 <_sbrk+0x5c>)
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <_sbrk+0x60>)
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d102      	bne.n	8000e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e24:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <_sbrk+0x64>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	@ (8000e70 <_sbrk+0x68>)
 8000e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d207      	bcs.n	8000e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e38:	f000 f9ac 	bl	8001194 <__errno>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	220c      	movs	r2, #12
 8000e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	e009      	b.n	8000e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <_sbrk+0x64>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <_sbrk+0x64>)
 8000e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20002800 	.word	0x20002800
 8000e68:	00000400 	.word	0x00000400
 8000e6c:	200000a0 	.word	0x200000a0
 8000e70:	200001f0 	.word	0x200001f0

08000e74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e78:	f7ff fb62 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	@ (8000eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <LoopForever+0xe>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec0 <LoopForever+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ea2:	f000 f97d 	bl	80011a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea6:	f7ff ff13 	bl	8000cd0 <main>

08000eaa <LoopForever>:

LoopForever:
  b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   r0, =_estack
 8000eac:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000eb8:	08001da0 	.word	0x08001da0
  ldr r2, =_sbss
 8000ebc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ec0:	200001f0 	.word	0x200001f0

08000ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_2_IRQHandler>
	...

08000ec8 <std>:
 8000ec8:	2300      	movs	r3, #0
 8000eca:	b510      	push	{r4, lr}
 8000ecc:	4604      	mov	r4, r0
 8000ece:	e9c0 3300 	strd	r3, r3, [r0]
 8000ed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ed6:	6083      	str	r3, [r0, #8]
 8000ed8:	8181      	strh	r1, [r0, #12]
 8000eda:	6643      	str	r3, [r0, #100]	@ 0x64
 8000edc:	81c2      	strh	r2, [r0, #14]
 8000ede:	6183      	str	r3, [r0, #24]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	305c      	adds	r0, #92	@ 0x5c
 8000ee6:	f000 f906 	bl	80010f6 <memset>
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <std+0x58>)
 8000eec:	6224      	str	r4, [r4, #32]
 8000eee:	6263      	str	r3, [r4, #36]	@ 0x24
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <std+0x5c>)
 8000ef2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <std+0x60>)
 8000ef6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <std+0x64>)
 8000efa:	6323      	str	r3, [r4, #48]	@ 0x30
 8000efc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <std+0x68>)
 8000efe:	429c      	cmp	r4, r3
 8000f00:	d006      	beq.n	8000f10 <std+0x48>
 8000f02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000f06:	4294      	cmp	r4, r2
 8000f08:	d002      	beq.n	8000f10 <std+0x48>
 8000f0a:	33d0      	adds	r3, #208	@ 0xd0
 8000f0c:	429c      	cmp	r4, r3
 8000f0e:	d105      	bne.n	8000f1c <std+0x54>
 8000f10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f18:	f000 b966 	b.w	80011e8 <__retarget_lock_init_recursive>
 8000f1c:	bd10      	pop	{r4, pc}
 8000f1e:	bf00      	nop
 8000f20:	08001071 	.word	0x08001071
 8000f24:	08001093 	.word	0x08001093
 8000f28:	080010cb 	.word	0x080010cb
 8000f2c:	080010ef 	.word	0x080010ef
 8000f30:	200000a4 	.word	0x200000a4

08000f34 <stdio_exit_handler>:
 8000f34:	4a02      	ldr	r2, [pc, #8]	@ (8000f40 <stdio_exit_handler+0xc>)
 8000f36:	4903      	ldr	r1, [pc, #12]	@ (8000f44 <stdio_exit_handler+0x10>)
 8000f38:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <stdio_exit_handler+0x14>)
 8000f3a:	f000 b869 	b.w	8001010 <_fwalk_sglue>
 8000f3e:	bf00      	nop
 8000f40:	20000010 	.word	0x20000010
 8000f44:	08001a81 	.word	0x08001a81
 8000f48:	20000020 	.word	0x20000020

08000f4c <cleanup_stdio>:
 8000f4c:	6841      	ldr	r1, [r0, #4]
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <cleanup_stdio+0x34>)
 8000f50:	b510      	push	{r4, lr}
 8000f52:	4299      	cmp	r1, r3
 8000f54:	4604      	mov	r4, r0
 8000f56:	d001      	beq.n	8000f5c <cleanup_stdio+0x10>
 8000f58:	f000 fd92 	bl	8001a80 <_fflush_r>
 8000f5c:	68a1      	ldr	r1, [r4, #8]
 8000f5e:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <cleanup_stdio+0x38>)
 8000f60:	4299      	cmp	r1, r3
 8000f62:	d002      	beq.n	8000f6a <cleanup_stdio+0x1e>
 8000f64:	4620      	mov	r0, r4
 8000f66:	f000 fd8b 	bl	8001a80 <_fflush_r>
 8000f6a:	68e1      	ldr	r1, [r4, #12]
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <cleanup_stdio+0x3c>)
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d004      	beq.n	8000f7c <cleanup_stdio+0x30>
 8000f72:	4620      	mov	r0, r4
 8000f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f78:	f000 bd82 	b.w	8001a80 <_fflush_r>
 8000f7c:	bd10      	pop	{r4, pc}
 8000f7e:	bf00      	nop
 8000f80:	200000a4 	.word	0x200000a4
 8000f84:	2000010c 	.word	0x2000010c
 8000f88:	20000174 	.word	0x20000174

08000f8c <global_stdio_init.part.0>:
 8000f8c:	b510      	push	{r4, lr}
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <global_stdio_init.part.0+0x30>)
 8000f90:	4c0b      	ldr	r4, [pc, #44]	@ (8000fc0 <global_stdio_init.part.0+0x34>)
 8000f92:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc4 <global_stdio_init.part.0+0x38>)
 8000f94:	4620      	mov	r0, r4
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	2104      	movs	r1, #4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f7ff ff94 	bl	8000ec8 <std>
 8000fa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2109      	movs	r1, #9
 8000fa8:	f7ff ff8e 	bl	8000ec8 <std>
 8000fac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fb6:	2112      	movs	r1, #18
 8000fb8:	f7ff bf86 	b.w	8000ec8 <std>
 8000fbc:	200001dc 	.word	0x200001dc
 8000fc0:	200000a4 	.word	0x200000a4
 8000fc4:	08000f35 	.word	0x08000f35

08000fc8 <__sfp_lock_acquire>:
 8000fc8:	4801      	ldr	r0, [pc, #4]	@ (8000fd0 <__sfp_lock_acquire+0x8>)
 8000fca:	f000 b90e 	b.w	80011ea <__retarget_lock_acquire_recursive>
 8000fce:	bf00      	nop
 8000fd0:	200001e5 	.word	0x200001e5

08000fd4 <__sfp_lock_release>:
 8000fd4:	4801      	ldr	r0, [pc, #4]	@ (8000fdc <__sfp_lock_release+0x8>)
 8000fd6:	f000 b909 	b.w	80011ec <__retarget_lock_release_recursive>
 8000fda:	bf00      	nop
 8000fdc:	200001e5 	.word	0x200001e5

08000fe0 <__sinit>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	f7ff fff0 	bl	8000fc8 <__sfp_lock_acquire>
 8000fe8:	6a23      	ldr	r3, [r4, #32]
 8000fea:	b11b      	cbz	r3, 8000ff4 <__sinit+0x14>
 8000fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ff0:	f7ff bff0 	b.w	8000fd4 <__sfp_lock_release>
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__sinit+0x28>)
 8000ff6:	6223      	str	r3, [r4, #32]
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__sinit+0x2c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f5      	bne.n	8000fec <__sinit+0xc>
 8001000:	f7ff ffc4 	bl	8000f8c <global_stdio_init.part.0>
 8001004:	e7f2      	b.n	8000fec <__sinit+0xc>
 8001006:	bf00      	nop
 8001008:	08000f4d 	.word	0x08000f4d
 800100c:	200001dc 	.word	0x200001dc

08001010 <_fwalk_sglue>:
 8001010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001014:	4607      	mov	r7, r0
 8001016:	4688      	mov	r8, r1
 8001018:	4614      	mov	r4, r2
 800101a:	2600      	movs	r6, #0
 800101c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001020:	f1b9 0901 	subs.w	r9, r9, #1
 8001024:	d505      	bpl.n	8001032 <_fwalk_sglue+0x22>
 8001026:	6824      	ldr	r4, [r4, #0]
 8001028:	2c00      	cmp	r4, #0
 800102a:	d1f7      	bne.n	800101c <_fwalk_sglue+0xc>
 800102c:	4630      	mov	r0, r6
 800102e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001032:	89ab      	ldrh	r3, [r5, #12]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d907      	bls.n	8001048 <_fwalk_sglue+0x38>
 8001038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800103c:	3301      	adds	r3, #1
 800103e:	d003      	beq.n	8001048 <_fwalk_sglue+0x38>
 8001040:	4629      	mov	r1, r5
 8001042:	4638      	mov	r0, r7
 8001044:	47c0      	blx	r8
 8001046:	4306      	orrs	r6, r0
 8001048:	3568      	adds	r5, #104	@ 0x68
 800104a:	e7e9      	b.n	8001020 <_fwalk_sglue+0x10>

0800104c <iprintf>:
 800104c:	b40f      	push	{r0, r1, r2, r3}
 800104e:	b507      	push	{r0, r1, r2, lr}
 8001050:	4906      	ldr	r1, [pc, #24]	@ (800106c <iprintf+0x20>)
 8001052:	ab04      	add	r3, sp, #16
 8001054:	6808      	ldr	r0, [r1, #0]
 8001056:	f853 2b04 	ldr.w	r2, [r3], #4
 800105a:	6881      	ldr	r1, [r0, #8]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	f000 f9e5 	bl	800142c <_vfiprintf_r>
 8001062:	b003      	add	sp, #12
 8001064:	f85d eb04 	ldr.w	lr, [sp], #4
 8001068:	b004      	add	sp, #16
 800106a:	4770      	bx	lr
 800106c:	2000001c 	.word	0x2000001c

08001070 <__sread>:
 8001070:	b510      	push	{r4, lr}
 8001072:	460c      	mov	r4, r1
 8001074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001078:	f000 f868 	bl	800114c <_read_r>
 800107c:	2800      	cmp	r0, #0
 800107e:	bfab      	itete	ge
 8001080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001082:	89a3      	ldrhlt	r3, [r4, #12]
 8001084:	181b      	addge	r3, r3, r0
 8001086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800108a:	bfac      	ite	ge
 800108c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800108e:	81a3      	strhlt	r3, [r4, #12]
 8001090:	bd10      	pop	{r4, pc}

08001092 <__swrite>:
 8001092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001096:	461f      	mov	r7, r3
 8001098:	898b      	ldrh	r3, [r1, #12]
 800109a:	4605      	mov	r5, r0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	460c      	mov	r4, r1
 80010a0:	4616      	mov	r6, r2
 80010a2:	d505      	bpl.n	80010b0 <__swrite+0x1e>
 80010a4:	2302      	movs	r3, #2
 80010a6:	2200      	movs	r2, #0
 80010a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ac:	f000 f83c 	bl	8001128 <_lseek_r>
 80010b0:	89a3      	ldrh	r3, [r4, #12]
 80010b2:	4632      	mov	r2, r6
 80010b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010b8:	81a3      	strh	r3, [r4, #12]
 80010ba:	4628      	mov	r0, r5
 80010bc:	463b      	mov	r3, r7
 80010be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010c6:	f000 b853 	b.w	8001170 <_write_r>

080010ca <__sseek>:
 80010ca:	b510      	push	{r4, lr}
 80010cc:	460c      	mov	r4, r1
 80010ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d2:	f000 f829 	bl	8001128 <_lseek_r>
 80010d6:	1c43      	adds	r3, r0, #1
 80010d8:	89a3      	ldrh	r3, [r4, #12]
 80010da:	bf15      	itete	ne
 80010dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80010de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80010e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80010e6:	81a3      	strheq	r3, [r4, #12]
 80010e8:	bf18      	it	ne
 80010ea:	81a3      	strhne	r3, [r4, #12]
 80010ec:	bd10      	pop	{r4, pc}

080010ee <__sclose>:
 80010ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010f2:	f000 b809 	b.w	8001108 <_close_r>

080010f6 <memset>:
 80010f6:	4603      	mov	r3, r0
 80010f8:	4402      	add	r2, r0
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d100      	bne.n	8001100 <memset+0xa>
 80010fe:	4770      	bx	lr
 8001100:	f803 1b01 	strb.w	r1, [r3], #1
 8001104:	e7f9      	b.n	80010fa <memset+0x4>
	...

08001108 <_close_r>:
 8001108:	b538      	push	{r3, r4, r5, lr}
 800110a:	2300      	movs	r3, #0
 800110c:	4d05      	ldr	r5, [pc, #20]	@ (8001124 <_close_r+0x1c>)
 800110e:	4604      	mov	r4, r0
 8001110:	4608      	mov	r0, r1
 8001112:	602b      	str	r3, [r5, #0]
 8001114:	f7ff fe47 	bl	8000da6 <_close>
 8001118:	1c43      	adds	r3, r0, #1
 800111a:	d102      	bne.n	8001122 <_close_r+0x1a>
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	b103      	cbz	r3, 8001122 <_close_r+0x1a>
 8001120:	6023      	str	r3, [r4, #0]
 8001122:	bd38      	pop	{r3, r4, r5, pc}
 8001124:	200001e0 	.word	0x200001e0

08001128 <_lseek_r>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	4604      	mov	r4, r0
 800112c:	4608      	mov	r0, r1
 800112e:	4611      	mov	r1, r2
 8001130:	2200      	movs	r2, #0
 8001132:	4d05      	ldr	r5, [pc, #20]	@ (8001148 <_lseek_r+0x20>)
 8001134:	602a      	str	r2, [r5, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	f7ff fe59 	bl	8000dee <_lseek>
 800113c:	1c43      	adds	r3, r0, #1
 800113e:	d102      	bne.n	8001146 <_lseek_r+0x1e>
 8001140:	682b      	ldr	r3, [r5, #0]
 8001142:	b103      	cbz	r3, 8001146 <_lseek_r+0x1e>
 8001144:	6023      	str	r3, [r4, #0]
 8001146:	bd38      	pop	{r3, r4, r5, pc}
 8001148:	200001e0 	.word	0x200001e0

0800114c <_read_r>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	2200      	movs	r2, #0
 8001156:	4d05      	ldr	r5, [pc, #20]	@ (800116c <_read_r+0x20>)
 8001158:	602a      	str	r2, [r5, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	f7ff fdea 	bl	8000d34 <_read>
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	d102      	bne.n	800116a <_read_r+0x1e>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	b103      	cbz	r3, 800116a <_read_r+0x1e>
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	200001e0 	.word	0x200001e0

08001170 <_write_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	4611      	mov	r1, r2
 8001178:	2200      	movs	r2, #0
 800117a:	4d05      	ldr	r5, [pc, #20]	@ (8001190 <_write_r+0x20>)
 800117c:	602a      	str	r2, [r5, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	f7ff fdf5 	bl	8000d6e <_write>
 8001184:	1c43      	adds	r3, r0, #1
 8001186:	d102      	bne.n	800118e <_write_r+0x1e>
 8001188:	682b      	ldr	r3, [r5, #0]
 800118a:	b103      	cbz	r3, 800118e <_write_r+0x1e>
 800118c:	6023      	str	r3, [r4, #0]
 800118e:	bd38      	pop	{r3, r4, r5, pc}
 8001190:	200001e0 	.word	0x200001e0

08001194 <__errno>:
 8001194:	4b01      	ldr	r3, [pc, #4]	@ (800119c <__errno+0x8>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	2000001c 	.word	0x2000001c

080011a0 <__libc_init_array>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	2600      	movs	r6, #0
 80011a4:	4d0c      	ldr	r5, [pc, #48]	@ (80011d8 <__libc_init_array+0x38>)
 80011a6:	4c0d      	ldr	r4, [pc, #52]	@ (80011dc <__libc_init_array+0x3c>)
 80011a8:	1b64      	subs	r4, r4, r5
 80011aa:	10a4      	asrs	r4, r4, #2
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d109      	bne.n	80011c4 <__libc_init_array+0x24>
 80011b0:	f000 fdc4 	bl	8001d3c <_init>
 80011b4:	2600      	movs	r6, #0
 80011b6:	4d0a      	ldr	r5, [pc, #40]	@ (80011e0 <__libc_init_array+0x40>)
 80011b8:	4c0a      	ldr	r4, [pc, #40]	@ (80011e4 <__libc_init_array+0x44>)
 80011ba:	1b64      	subs	r4, r4, r5
 80011bc:	10a4      	asrs	r4, r4, #2
 80011be:	42a6      	cmp	r6, r4
 80011c0:	d105      	bne.n	80011ce <__libc_init_array+0x2e>
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c8:	4798      	blx	r3
 80011ca:	3601      	adds	r6, #1
 80011cc:	e7ee      	b.n	80011ac <__libc_init_array+0xc>
 80011ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80011d2:	4798      	blx	r3
 80011d4:	3601      	adds	r6, #1
 80011d6:	e7f2      	b.n	80011be <__libc_init_array+0x1e>
 80011d8:	08001d98 	.word	0x08001d98
 80011dc:	08001d98 	.word	0x08001d98
 80011e0:	08001d98 	.word	0x08001d98
 80011e4:	08001d9c 	.word	0x08001d9c

080011e8 <__retarget_lock_init_recursive>:
 80011e8:	4770      	bx	lr

080011ea <__retarget_lock_acquire_recursive>:
 80011ea:	4770      	bx	lr

080011ec <__retarget_lock_release_recursive>:
 80011ec:	4770      	bx	lr
	...

080011f0 <_free_r>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	4605      	mov	r5, r0
 80011f4:	2900      	cmp	r1, #0
 80011f6:	d040      	beq.n	800127a <_free_r+0x8a>
 80011f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011fc:	1f0c      	subs	r4, r1, #4
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bfb8      	it	lt
 8001202:	18e4      	addlt	r4, r4, r3
 8001204:	f000 f8de 	bl	80013c4 <__malloc_lock>
 8001208:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <_free_r+0x8c>)
 800120a:	6813      	ldr	r3, [r2, #0]
 800120c:	b933      	cbnz	r3, 800121c <_free_r+0x2c>
 800120e:	6063      	str	r3, [r4, #4]
 8001210:	6014      	str	r4, [r2, #0]
 8001212:	4628      	mov	r0, r5
 8001214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001218:	f000 b8da 	b.w	80013d0 <__malloc_unlock>
 800121c:	42a3      	cmp	r3, r4
 800121e:	d908      	bls.n	8001232 <_free_r+0x42>
 8001220:	6820      	ldr	r0, [r4, #0]
 8001222:	1821      	adds	r1, r4, r0
 8001224:	428b      	cmp	r3, r1
 8001226:	bf01      	itttt	eq
 8001228:	6819      	ldreq	r1, [r3, #0]
 800122a:	685b      	ldreq	r3, [r3, #4]
 800122c:	1809      	addeq	r1, r1, r0
 800122e:	6021      	streq	r1, [r4, #0]
 8001230:	e7ed      	b.n	800120e <_free_r+0x1e>
 8001232:	461a      	mov	r2, r3
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	b10b      	cbz	r3, 800123c <_free_r+0x4c>
 8001238:	42a3      	cmp	r3, r4
 800123a:	d9fa      	bls.n	8001232 <_free_r+0x42>
 800123c:	6811      	ldr	r1, [r2, #0]
 800123e:	1850      	adds	r0, r2, r1
 8001240:	42a0      	cmp	r0, r4
 8001242:	d10b      	bne.n	800125c <_free_r+0x6c>
 8001244:	6820      	ldr	r0, [r4, #0]
 8001246:	4401      	add	r1, r0
 8001248:	1850      	adds	r0, r2, r1
 800124a:	4283      	cmp	r3, r0
 800124c:	6011      	str	r1, [r2, #0]
 800124e:	d1e0      	bne.n	8001212 <_free_r+0x22>
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4408      	add	r0, r1
 8001256:	6010      	str	r0, [r2, #0]
 8001258:	6053      	str	r3, [r2, #4]
 800125a:	e7da      	b.n	8001212 <_free_r+0x22>
 800125c:	d902      	bls.n	8001264 <_free_r+0x74>
 800125e:	230c      	movs	r3, #12
 8001260:	602b      	str	r3, [r5, #0]
 8001262:	e7d6      	b.n	8001212 <_free_r+0x22>
 8001264:	6820      	ldr	r0, [r4, #0]
 8001266:	1821      	adds	r1, r4, r0
 8001268:	428b      	cmp	r3, r1
 800126a:	bf01      	itttt	eq
 800126c:	6819      	ldreq	r1, [r3, #0]
 800126e:	685b      	ldreq	r3, [r3, #4]
 8001270:	1809      	addeq	r1, r1, r0
 8001272:	6021      	streq	r1, [r4, #0]
 8001274:	6063      	str	r3, [r4, #4]
 8001276:	6054      	str	r4, [r2, #4]
 8001278:	e7cb      	b.n	8001212 <_free_r+0x22>
 800127a:	bd38      	pop	{r3, r4, r5, pc}
 800127c:	200001ec 	.word	0x200001ec

08001280 <sbrk_aligned>:
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	4e0f      	ldr	r6, [pc, #60]	@ (80012c0 <sbrk_aligned+0x40>)
 8001284:	460c      	mov	r4, r1
 8001286:	6831      	ldr	r1, [r6, #0]
 8001288:	4605      	mov	r5, r0
 800128a:	b911      	cbnz	r1, 8001292 <sbrk_aligned+0x12>
 800128c:	f000 fcb4 	bl	8001bf8 <_sbrk_r>
 8001290:	6030      	str	r0, [r6, #0]
 8001292:	4621      	mov	r1, r4
 8001294:	4628      	mov	r0, r5
 8001296:	f000 fcaf 	bl	8001bf8 <_sbrk_r>
 800129a:	1c43      	adds	r3, r0, #1
 800129c:	d103      	bne.n	80012a6 <sbrk_aligned+0x26>
 800129e:	f04f 34ff 	mov.w	r4, #4294967295
 80012a2:	4620      	mov	r0, r4
 80012a4:	bd70      	pop	{r4, r5, r6, pc}
 80012a6:	1cc4      	adds	r4, r0, #3
 80012a8:	f024 0403 	bic.w	r4, r4, #3
 80012ac:	42a0      	cmp	r0, r4
 80012ae:	d0f8      	beq.n	80012a2 <sbrk_aligned+0x22>
 80012b0:	1a21      	subs	r1, r4, r0
 80012b2:	4628      	mov	r0, r5
 80012b4:	f000 fca0 	bl	8001bf8 <_sbrk_r>
 80012b8:	3001      	adds	r0, #1
 80012ba:	d1f2      	bne.n	80012a2 <sbrk_aligned+0x22>
 80012bc:	e7ef      	b.n	800129e <sbrk_aligned+0x1e>
 80012be:	bf00      	nop
 80012c0:	200001e8 	.word	0x200001e8

080012c4 <_malloc_r>:
 80012c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012c8:	1ccd      	adds	r5, r1, #3
 80012ca:	f025 0503 	bic.w	r5, r5, #3
 80012ce:	3508      	adds	r5, #8
 80012d0:	2d0c      	cmp	r5, #12
 80012d2:	bf38      	it	cc
 80012d4:	250c      	movcc	r5, #12
 80012d6:	2d00      	cmp	r5, #0
 80012d8:	4606      	mov	r6, r0
 80012da:	db01      	blt.n	80012e0 <_malloc_r+0x1c>
 80012dc:	42a9      	cmp	r1, r5
 80012de:	d904      	bls.n	80012ea <_malloc_r+0x26>
 80012e0:	230c      	movs	r3, #12
 80012e2:	6033      	str	r3, [r6, #0]
 80012e4:	2000      	movs	r0, #0
 80012e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013c0 <_malloc_r+0xfc>
 80012ee:	f000 f869 	bl	80013c4 <__malloc_lock>
 80012f2:	f8d8 3000 	ldr.w	r3, [r8]
 80012f6:	461c      	mov	r4, r3
 80012f8:	bb44      	cbnz	r4, 800134c <_malloc_r+0x88>
 80012fa:	4629      	mov	r1, r5
 80012fc:	4630      	mov	r0, r6
 80012fe:	f7ff ffbf 	bl	8001280 <sbrk_aligned>
 8001302:	1c43      	adds	r3, r0, #1
 8001304:	4604      	mov	r4, r0
 8001306:	d158      	bne.n	80013ba <_malloc_r+0xf6>
 8001308:	f8d8 4000 	ldr.w	r4, [r8]
 800130c:	4627      	mov	r7, r4
 800130e:	2f00      	cmp	r7, #0
 8001310:	d143      	bne.n	800139a <_malloc_r+0xd6>
 8001312:	2c00      	cmp	r4, #0
 8001314:	d04b      	beq.n	80013ae <_malloc_r+0xea>
 8001316:	6823      	ldr	r3, [r4, #0]
 8001318:	4639      	mov	r1, r7
 800131a:	4630      	mov	r0, r6
 800131c:	eb04 0903 	add.w	r9, r4, r3
 8001320:	f000 fc6a 	bl	8001bf8 <_sbrk_r>
 8001324:	4581      	cmp	r9, r0
 8001326:	d142      	bne.n	80013ae <_malloc_r+0xea>
 8001328:	6821      	ldr	r1, [r4, #0]
 800132a:	4630      	mov	r0, r6
 800132c:	1a6d      	subs	r5, r5, r1
 800132e:	4629      	mov	r1, r5
 8001330:	f7ff ffa6 	bl	8001280 <sbrk_aligned>
 8001334:	3001      	adds	r0, #1
 8001336:	d03a      	beq.n	80013ae <_malloc_r+0xea>
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	442b      	add	r3, r5
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	f8d8 3000 	ldr.w	r3, [r8]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	bb62      	cbnz	r2, 80013a0 <_malloc_r+0xdc>
 8001346:	f8c8 7000 	str.w	r7, [r8]
 800134a:	e00f      	b.n	800136c <_malloc_r+0xa8>
 800134c:	6822      	ldr	r2, [r4, #0]
 800134e:	1b52      	subs	r2, r2, r5
 8001350:	d420      	bmi.n	8001394 <_malloc_r+0xd0>
 8001352:	2a0b      	cmp	r2, #11
 8001354:	d917      	bls.n	8001386 <_malloc_r+0xc2>
 8001356:	1961      	adds	r1, r4, r5
 8001358:	42a3      	cmp	r3, r4
 800135a:	6025      	str	r5, [r4, #0]
 800135c:	bf18      	it	ne
 800135e:	6059      	strne	r1, [r3, #4]
 8001360:	6863      	ldr	r3, [r4, #4]
 8001362:	bf08      	it	eq
 8001364:	f8c8 1000 	streq.w	r1, [r8]
 8001368:	5162      	str	r2, [r4, r5]
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	4630      	mov	r0, r6
 800136e:	f000 f82f 	bl	80013d0 <__malloc_unlock>
 8001372:	f104 000b 	add.w	r0, r4, #11
 8001376:	1d23      	adds	r3, r4, #4
 8001378:	f020 0007 	bic.w	r0, r0, #7
 800137c:	1ac2      	subs	r2, r0, r3
 800137e:	bf1c      	itt	ne
 8001380:	1a1b      	subne	r3, r3, r0
 8001382:	50a3      	strne	r3, [r4, r2]
 8001384:	e7af      	b.n	80012e6 <_malloc_r+0x22>
 8001386:	6862      	ldr	r2, [r4, #4]
 8001388:	42a3      	cmp	r3, r4
 800138a:	bf0c      	ite	eq
 800138c:	f8c8 2000 	streq.w	r2, [r8]
 8001390:	605a      	strne	r2, [r3, #4]
 8001392:	e7eb      	b.n	800136c <_malloc_r+0xa8>
 8001394:	4623      	mov	r3, r4
 8001396:	6864      	ldr	r4, [r4, #4]
 8001398:	e7ae      	b.n	80012f8 <_malloc_r+0x34>
 800139a:	463c      	mov	r4, r7
 800139c:	687f      	ldr	r7, [r7, #4]
 800139e:	e7b6      	b.n	800130e <_malloc_r+0x4a>
 80013a0:	461a      	mov	r2, r3
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	42a3      	cmp	r3, r4
 80013a6:	d1fb      	bne.n	80013a0 <_malloc_r+0xdc>
 80013a8:	2300      	movs	r3, #0
 80013aa:	6053      	str	r3, [r2, #4]
 80013ac:	e7de      	b.n	800136c <_malloc_r+0xa8>
 80013ae:	230c      	movs	r3, #12
 80013b0:	4630      	mov	r0, r6
 80013b2:	6033      	str	r3, [r6, #0]
 80013b4:	f000 f80c 	bl	80013d0 <__malloc_unlock>
 80013b8:	e794      	b.n	80012e4 <_malloc_r+0x20>
 80013ba:	6005      	str	r5, [r0, #0]
 80013bc:	e7d6      	b.n	800136c <_malloc_r+0xa8>
 80013be:	bf00      	nop
 80013c0:	200001ec 	.word	0x200001ec

080013c4 <__malloc_lock>:
 80013c4:	4801      	ldr	r0, [pc, #4]	@ (80013cc <__malloc_lock+0x8>)
 80013c6:	f7ff bf10 	b.w	80011ea <__retarget_lock_acquire_recursive>
 80013ca:	bf00      	nop
 80013cc:	200001e4 	.word	0x200001e4

080013d0 <__malloc_unlock>:
 80013d0:	4801      	ldr	r0, [pc, #4]	@ (80013d8 <__malloc_unlock+0x8>)
 80013d2:	f7ff bf0b 	b.w	80011ec <__retarget_lock_release_recursive>
 80013d6:	bf00      	nop
 80013d8:	200001e4 	.word	0x200001e4

080013dc <__sfputc_r>:
 80013dc:	6893      	ldr	r3, [r2, #8]
 80013de:	b410      	push	{r4}
 80013e0:	3b01      	subs	r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	6093      	str	r3, [r2, #8]
 80013e6:	da07      	bge.n	80013f8 <__sfputc_r+0x1c>
 80013e8:	6994      	ldr	r4, [r2, #24]
 80013ea:	42a3      	cmp	r3, r4
 80013ec:	db01      	blt.n	80013f2 <__sfputc_r+0x16>
 80013ee:	290a      	cmp	r1, #10
 80013f0:	d102      	bne.n	80013f8 <__sfputc_r+0x1c>
 80013f2:	bc10      	pop	{r4}
 80013f4:	f000 bb6c 	b.w	8001ad0 <__swbuf_r>
 80013f8:	6813      	ldr	r3, [r2, #0]
 80013fa:	1c58      	adds	r0, r3, #1
 80013fc:	6010      	str	r0, [r2, #0]
 80013fe:	7019      	strb	r1, [r3, #0]
 8001400:	4608      	mov	r0, r1
 8001402:	bc10      	pop	{r4}
 8001404:	4770      	bx	lr

08001406 <__sfputs_r>:
 8001406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001408:	4606      	mov	r6, r0
 800140a:	460f      	mov	r7, r1
 800140c:	4614      	mov	r4, r2
 800140e:	18d5      	adds	r5, r2, r3
 8001410:	42ac      	cmp	r4, r5
 8001412:	d101      	bne.n	8001418 <__sfputs_r+0x12>
 8001414:	2000      	movs	r0, #0
 8001416:	e007      	b.n	8001428 <__sfputs_r+0x22>
 8001418:	463a      	mov	r2, r7
 800141a:	4630      	mov	r0, r6
 800141c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001420:	f7ff ffdc 	bl	80013dc <__sfputc_r>
 8001424:	1c43      	adds	r3, r0, #1
 8001426:	d1f3      	bne.n	8001410 <__sfputs_r+0xa>
 8001428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800142c <_vfiprintf_r>:
 800142c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001430:	460d      	mov	r5, r1
 8001432:	4614      	mov	r4, r2
 8001434:	4698      	mov	r8, r3
 8001436:	4606      	mov	r6, r0
 8001438:	b09d      	sub	sp, #116	@ 0x74
 800143a:	b118      	cbz	r0, 8001444 <_vfiprintf_r+0x18>
 800143c:	6a03      	ldr	r3, [r0, #32]
 800143e:	b90b      	cbnz	r3, 8001444 <_vfiprintf_r+0x18>
 8001440:	f7ff fdce 	bl	8000fe0 <__sinit>
 8001444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001446:	07d9      	lsls	r1, r3, #31
 8001448:	d405      	bmi.n	8001456 <_vfiprintf_r+0x2a>
 800144a:	89ab      	ldrh	r3, [r5, #12]
 800144c:	059a      	lsls	r2, r3, #22
 800144e:	d402      	bmi.n	8001456 <_vfiprintf_r+0x2a>
 8001450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001452:	f7ff feca 	bl	80011ea <__retarget_lock_acquire_recursive>
 8001456:	89ab      	ldrh	r3, [r5, #12]
 8001458:	071b      	lsls	r3, r3, #28
 800145a:	d501      	bpl.n	8001460 <_vfiprintf_r+0x34>
 800145c:	692b      	ldr	r3, [r5, #16]
 800145e:	b99b      	cbnz	r3, 8001488 <_vfiprintf_r+0x5c>
 8001460:	4629      	mov	r1, r5
 8001462:	4630      	mov	r0, r6
 8001464:	f000 fb72 	bl	8001b4c <__swsetup_r>
 8001468:	b170      	cbz	r0, 8001488 <_vfiprintf_r+0x5c>
 800146a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800146c:	07dc      	lsls	r4, r3, #31
 800146e:	d504      	bpl.n	800147a <_vfiprintf_r+0x4e>
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	b01d      	add	sp, #116	@ 0x74
 8001476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800147a:	89ab      	ldrh	r3, [r5, #12]
 800147c:	0598      	lsls	r0, r3, #22
 800147e:	d4f7      	bmi.n	8001470 <_vfiprintf_r+0x44>
 8001480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001482:	f7ff feb3 	bl	80011ec <__retarget_lock_release_recursive>
 8001486:	e7f3      	b.n	8001470 <_vfiprintf_r+0x44>
 8001488:	2300      	movs	r3, #0
 800148a:	9309      	str	r3, [sp, #36]	@ 0x24
 800148c:	2320      	movs	r3, #32
 800148e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001492:	2330      	movs	r3, #48	@ 0x30
 8001494:	f04f 0901 	mov.w	r9, #1
 8001498:	f8cd 800c 	str.w	r8, [sp, #12]
 800149c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001648 <_vfiprintf_r+0x21c>
 80014a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014a4:	4623      	mov	r3, r4
 80014a6:	469a      	mov	sl, r3
 80014a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014ac:	b10a      	cbz	r2, 80014b2 <_vfiprintf_r+0x86>
 80014ae:	2a25      	cmp	r2, #37	@ 0x25
 80014b0:	d1f9      	bne.n	80014a6 <_vfiprintf_r+0x7a>
 80014b2:	ebba 0b04 	subs.w	fp, sl, r4
 80014b6:	d00b      	beq.n	80014d0 <_vfiprintf_r+0xa4>
 80014b8:	465b      	mov	r3, fp
 80014ba:	4622      	mov	r2, r4
 80014bc:	4629      	mov	r1, r5
 80014be:	4630      	mov	r0, r6
 80014c0:	f7ff ffa1 	bl	8001406 <__sfputs_r>
 80014c4:	3001      	adds	r0, #1
 80014c6:	f000 80a7 	beq.w	8001618 <_vfiprintf_r+0x1ec>
 80014ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014cc:	445a      	add	r2, fp
 80014ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80014d0:	f89a 3000 	ldrb.w	r3, [sl]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 809f 	beq.w	8001618 <_vfiprintf_r+0x1ec>
 80014da:	2300      	movs	r3, #0
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014e4:	f10a 0a01 	add.w	sl, sl, #1
 80014e8:	9304      	str	r3, [sp, #16]
 80014ea:	9307      	str	r3, [sp, #28]
 80014ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80014f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80014f2:	4654      	mov	r4, sl
 80014f4:	2205      	movs	r2, #5
 80014f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80014fa:	4853      	ldr	r0, [pc, #332]	@ (8001648 <_vfiprintf_r+0x21c>)
 80014fc:	f000 fb8c 	bl	8001c18 <memchr>
 8001500:	9a04      	ldr	r2, [sp, #16]
 8001502:	b9d8      	cbnz	r0, 800153c <_vfiprintf_r+0x110>
 8001504:	06d1      	lsls	r1, r2, #27
 8001506:	bf44      	itt	mi
 8001508:	2320      	movmi	r3, #32
 800150a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800150e:	0713      	lsls	r3, r2, #28
 8001510:	bf44      	itt	mi
 8001512:	232b      	movmi	r3, #43	@ 0x2b
 8001514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001518:	f89a 3000 	ldrb.w	r3, [sl]
 800151c:	2b2a      	cmp	r3, #42	@ 0x2a
 800151e:	d015      	beq.n	800154c <_vfiprintf_r+0x120>
 8001520:	4654      	mov	r4, sl
 8001522:	2000      	movs	r0, #0
 8001524:	f04f 0c0a 	mov.w	ip, #10
 8001528:	9a07      	ldr	r2, [sp, #28]
 800152a:	4621      	mov	r1, r4
 800152c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001530:	3b30      	subs	r3, #48	@ 0x30
 8001532:	2b09      	cmp	r3, #9
 8001534:	d94b      	bls.n	80015ce <_vfiprintf_r+0x1a2>
 8001536:	b1b0      	cbz	r0, 8001566 <_vfiprintf_r+0x13a>
 8001538:	9207      	str	r2, [sp, #28]
 800153a:	e014      	b.n	8001566 <_vfiprintf_r+0x13a>
 800153c:	eba0 0308 	sub.w	r3, r0, r8
 8001540:	fa09 f303 	lsl.w	r3, r9, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	46a2      	mov	sl, r4
 8001548:	9304      	str	r3, [sp, #16]
 800154a:	e7d2      	b.n	80014f2 <_vfiprintf_r+0xc6>
 800154c:	9b03      	ldr	r3, [sp, #12]
 800154e:	1d19      	adds	r1, r3, #4
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	9103      	str	r1, [sp, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	bfbb      	ittet	lt
 8001558:	425b      	neglt	r3, r3
 800155a:	f042 0202 	orrlt.w	r2, r2, #2
 800155e:	9307      	strge	r3, [sp, #28]
 8001560:	9307      	strlt	r3, [sp, #28]
 8001562:	bfb8      	it	lt
 8001564:	9204      	strlt	r2, [sp, #16]
 8001566:	7823      	ldrb	r3, [r4, #0]
 8001568:	2b2e      	cmp	r3, #46	@ 0x2e
 800156a:	d10a      	bne.n	8001582 <_vfiprintf_r+0x156>
 800156c:	7863      	ldrb	r3, [r4, #1]
 800156e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001570:	d132      	bne.n	80015d8 <_vfiprintf_r+0x1ac>
 8001572:	9b03      	ldr	r3, [sp, #12]
 8001574:	3402      	adds	r4, #2
 8001576:	1d1a      	adds	r2, r3, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	9203      	str	r2, [sp, #12]
 800157c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001580:	9305      	str	r3, [sp, #20]
 8001582:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800164c <_vfiprintf_r+0x220>
 8001586:	2203      	movs	r2, #3
 8001588:	4650      	mov	r0, sl
 800158a:	7821      	ldrb	r1, [r4, #0]
 800158c:	f000 fb44 	bl	8001c18 <memchr>
 8001590:	b138      	cbz	r0, 80015a2 <_vfiprintf_r+0x176>
 8001592:	2240      	movs	r2, #64	@ 0x40
 8001594:	9b04      	ldr	r3, [sp, #16]
 8001596:	eba0 000a 	sub.w	r0, r0, sl
 800159a:	4082      	lsls	r2, r0
 800159c:	4313      	orrs	r3, r2
 800159e:	3401      	adds	r4, #1
 80015a0:	9304      	str	r3, [sp, #16]
 80015a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015a6:	2206      	movs	r2, #6
 80015a8:	4829      	ldr	r0, [pc, #164]	@ (8001650 <_vfiprintf_r+0x224>)
 80015aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015ae:	f000 fb33 	bl	8001c18 <memchr>
 80015b2:	2800      	cmp	r0, #0
 80015b4:	d03f      	beq.n	8001636 <_vfiprintf_r+0x20a>
 80015b6:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <_vfiprintf_r+0x228>)
 80015b8:	bb1b      	cbnz	r3, 8001602 <_vfiprintf_r+0x1d6>
 80015ba:	9b03      	ldr	r3, [sp, #12]
 80015bc:	3307      	adds	r3, #7
 80015be:	f023 0307 	bic.w	r3, r3, #7
 80015c2:	3308      	adds	r3, #8
 80015c4:	9303      	str	r3, [sp, #12]
 80015c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015c8:	443b      	add	r3, r7
 80015ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80015cc:	e76a      	b.n	80014a4 <_vfiprintf_r+0x78>
 80015ce:	460c      	mov	r4, r1
 80015d0:	2001      	movs	r0, #1
 80015d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80015d6:	e7a8      	b.n	800152a <_vfiprintf_r+0xfe>
 80015d8:	2300      	movs	r3, #0
 80015da:	f04f 0c0a 	mov.w	ip, #10
 80015de:	4619      	mov	r1, r3
 80015e0:	3401      	adds	r4, #1
 80015e2:	9305      	str	r3, [sp, #20]
 80015e4:	4620      	mov	r0, r4
 80015e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015ea:	3a30      	subs	r2, #48	@ 0x30
 80015ec:	2a09      	cmp	r2, #9
 80015ee:	d903      	bls.n	80015f8 <_vfiprintf_r+0x1cc>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0c6      	beq.n	8001582 <_vfiprintf_r+0x156>
 80015f4:	9105      	str	r1, [sp, #20]
 80015f6:	e7c4      	b.n	8001582 <_vfiprintf_r+0x156>
 80015f8:	4604      	mov	r4, r0
 80015fa:	2301      	movs	r3, #1
 80015fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001600:	e7f0      	b.n	80015e4 <_vfiprintf_r+0x1b8>
 8001602:	ab03      	add	r3, sp, #12
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	462a      	mov	r2, r5
 8001608:	4630      	mov	r0, r6
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <_vfiprintf_r+0x22c>)
 800160c:	a904      	add	r1, sp, #16
 800160e:	f3af 8000 	nop.w
 8001612:	4607      	mov	r7, r0
 8001614:	1c78      	adds	r0, r7, #1
 8001616:	d1d6      	bne.n	80015c6 <_vfiprintf_r+0x19a>
 8001618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800161a:	07d9      	lsls	r1, r3, #31
 800161c:	d405      	bmi.n	800162a <_vfiprintf_r+0x1fe>
 800161e:	89ab      	ldrh	r3, [r5, #12]
 8001620:	059a      	lsls	r2, r3, #22
 8001622:	d402      	bmi.n	800162a <_vfiprintf_r+0x1fe>
 8001624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001626:	f7ff fde1 	bl	80011ec <__retarget_lock_release_recursive>
 800162a:	89ab      	ldrh	r3, [r5, #12]
 800162c:	065b      	lsls	r3, r3, #25
 800162e:	f53f af1f 	bmi.w	8001470 <_vfiprintf_r+0x44>
 8001632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001634:	e71e      	b.n	8001474 <_vfiprintf_r+0x48>
 8001636:	ab03      	add	r3, sp, #12
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	462a      	mov	r2, r5
 800163c:	4630      	mov	r0, r6
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <_vfiprintf_r+0x22c>)
 8001640:	a904      	add	r1, sp, #16
 8001642:	f000 f87d 	bl	8001740 <_printf_i>
 8001646:	e7e4      	b.n	8001612 <_vfiprintf_r+0x1e6>
 8001648:	08001d62 	.word	0x08001d62
 800164c:	08001d68 	.word	0x08001d68
 8001650:	08001d6c 	.word	0x08001d6c
 8001654:	00000000 	.word	0x00000000
 8001658:	08001407 	.word	0x08001407

0800165c <_printf_common>:
 800165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001660:	4616      	mov	r6, r2
 8001662:	4698      	mov	r8, r3
 8001664:	688a      	ldr	r2, [r1, #8]
 8001666:	690b      	ldr	r3, [r1, #16]
 8001668:	4607      	mov	r7, r0
 800166a:	4293      	cmp	r3, r2
 800166c:	bfb8      	it	lt
 800166e:	4613      	movlt	r3, r2
 8001670:	6033      	str	r3, [r6, #0]
 8001672:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001676:	460c      	mov	r4, r1
 8001678:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800167c:	b10a      	cbz	r2, 8001682 <_printf_common+0x26>
 800167e:	3301      	adds	r3, #1
 8001680:	6033      	str	r3, [r6, #0]
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	0699      	lsls	r1, r3, #26
 8001686:	bf42      	ittt	mi
 8001688:	6833      	ldrmi	r3, [r6, #0]
 800168a:	3302      	addmi	r3, #2
 800168c:	6033      	strmi	r3, [r6, #0]
 800168e:	6825      	ldr	r5, [r4, #0]
 8001690:	f015 0506 	ands.w	r5, r5, #6
 8001694:	d106      	bne.n	80016a4 <_printf_common+0x48>
 8001696:	f104 0a19 	add.w	sl, r4, #25
 800169a:	68e3      	ldr	r3, [r4, #12]
 800169c:	6832      	ldr	r2, [r6, #0]
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	42ab      	cmp	r3, r5
 80016a2:	dc2b      	bgt.n	80016fc <_printf_common+0xa0>
 80016a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80016a8:	6822      	ldr	r2, [r4, #0]
 80016aa:	3b00      	subs	r3, #0
 80016ac:	bf18      	it	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	0692      	lsls	r2, r2, #26
 80016b2:	d430      	bmi.n	8001716 <_printf_common+0xba>
 80016b4:	4641      	mov	r1, r8
 80016b6:	4638      	mov	r0, r7
 80016b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016bc:	47c8      	blx	r9
 80016be:	3001      	adds	r0, #1
 80016c0:	d023      	beq.n	800170a <_printf_common+0xae>
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	6922      	ldr	r2, [r4, #16]
 80016c6:	f003 0306 	and.w	r3, r3, #6
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf14      	ite	ne
 80016ce:	2500      	movne	r5, #0
 80016d0:	6833      	ldreq	r3, [r6, #0]
 80016d2:	f04f 0600 	mov.w	r6, #0
 80016d6:	bf08      	it	eq
 80016d8:	68e5      	ldreq	r5, [r4, #12]
 80016da:	f104 041a 	add.w	r4, r4, #26
 80016de:	bf08      	it	eq
 80016e0:	1aed      	subeq	r5, r5, r3
 80016e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80016e6:	bf08      	it	eq
 80016e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016ec:	4293      	cmp	r3, r2
 80016ee:	bfc4      	itt	gt
 80016f0:	1a9b      	subgt	r3, r3, r2
 80016f2:	18ed      	addgt	r5, r5, r3
 80016f4:	42b5      	cmp	r5, r6
 80016f6:	d11a      	bne.n	800172e <_printf_common+0xd2>
 80016f8:	2000      	movs	r0, #0
 80016fa:	e008      	b.n	800170e <_printf_common+0xb2>
 80016fc:	2301      	movs	r3, #1
 80016fe:	4652      	mov	r2, sl
 8001700:	4641      	mov	r1, r8
 8001702:	4638      	mov	r0, r7
 8001704:	47c8      	blx	r9
 8001706:	3001      	adds	r0, #1
 8001708:	d103      	bne.n	8001712 <_printf_common+0xb6>
 800170a:	f04f 30ff 	mov.w	r0, #4294967295
 800170e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001712:	3501      	adds	r5, #1
 8001714:	e7c1      	b.n	800169a <_printf_common+0x3e>
 8001716:	2030      	movs	r0, #48	@ 0x30
 8001718:	18e1      	adds	r1, r4, r3
 800171a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001724:	4422      	add	r2, r4
 8001726:	3302      	adds	r3, #2
 8001728:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800172c:	e7c2      	b.n	80016b4 <_printf_common+0x58>
 800172e:	2301      	movs	r3, #1
 8001730:	4622      	mov	r2, r4
 8001732:	4641      	mov	r1, r8
 8001734:	4638      	mov	r0, r7
 8001736:	47c8      	blx	r9
 8001738:	3001      	adds	r0, #1
 800173a:	d0e6      	beq.n	800170a <_printf_common+0xae>
 800173c:	3601      	adds	r6, #1
 800173e:	e7d9      	b.n	80016f4 <_printf_common+0x98>

08001740 <_printf_i>:
 8001740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001744:	7e0f      	ldrb	r7, [r1, #24]
 8001746:	4691      	mov	r9, r2
 8001748:	2f78      	cmp	r7, #120	@ 0x78
 800174a:	4680      	mov	r8, r0
 800174c:	460c      	mov	r4, r1
 800174e:	469a      	mov	sl, r3
 8001750:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001752:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001756:	d807      	bhi.n	8001768 <_printf_i+0x28>
 8001758:	2f62      	cmp	r7, #98	@ 0x62
 800175a:	d80a      	bhi.n	8001772 <_printf_i+0x32>
 800175c:	2f00      	cmp	r7, #0
 800175e:	f000 80d3 	beq.w	8001908 <_printf_i+0x1c8>
 8001762:	2f58      	cmp	r7, #88	@ 0x58
 8001764:	f000 80ba 	beq.w	80018dc <_printf_i+0x19c>
 8001768:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800176c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001770:	e03a      	b.n	80017e8 <_printf_i+0xa8>
 8001772:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001776:	2b15      	cmp	r3, #21
 8001778:	d8f6      	bhi.n	8001768 <_printf_i+0x28>
 800177a:	a101      	add	r1, pc, #4	@ (adr r1, 8001780 <_printf_i+0x40>)
 800177c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001780:	080017d9 	.word	0x080017d9
 8001784:	080017ed 	.word	0x080017ed
 8001788:	08001769 	.word	0x08001769
 800178c:	08001769 	.word	0x08001769
 8001790:	08001769 	.word	0x08001769
 8001794:	08001769 	.word	0x08001769
 8001798:	080017ed 	.word	0x080017ed
 800179c:	08001769 	.word	0x08001769
 80017a0:	08001769 	.word	0x08001769
 80017a4:	08001769 	.word	0x08001769
 80017a8:	08001769 	.word	0x08001769
 80017ac:	080018ef 	.word	0x080018ef
 80017b0:	08001817 	.word	0x08001817
 80017b4:	080018a9 	.word	0x080018a9
 80017b8:	08001769 	.word	0x08001769
 80017bc:	08001769 	.word	0x08001769
 80017c0:	08001911 	.word	0x08001911
 80017c4:	08001769 	.word	0x08001769
 80017c8:	08001817 	.word	0x08001817
 80017cc:	08001769 	.word	0x08001769
 80017d0:	08001769 	.word	0x08001769
 80017d4:	080018b1 	.word	0x080018b1
 80017d8:	6833      	ldr	r3, [r6, #0]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6032      	str	r2, [r6, #0]
 80017e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017e8:	2301      	movs	r3, #1
 80017ea:	e09e      	b.n	800192a <_printf_i+0x1ea>
 80017ec:	6833      	ldr	r3, [r6, #0]
 80017ee:	6820      	ldr	r0, [r4, #0]
 80017f0:	1d19      	adds	r1, r3, #4
 80017f2:	6031      	str	r1, [r6, #0]
 80017f4:	0606      	lsls	r6, r0, #24
 80017f6:	d501      	bpl.n	80017fc <_printf_i+0xbc>
 80017f8:	681d      	ldr	r5, [r3, #0]
 80017fa:	e003      	b.n	8001804 <_printf_i+0xc4>
 80017fc:	0645      	lsls	r5, r0, #25
 80017fe:	d5fb      	bpl.n	80017f8 <_printf_i+0xb8>
 8001800:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001804:	2d00      	cmp	r5, #0
 8001806:	da03      	bge.n	8001810 <_printf_i+0xd0>
 8001808:	232d      	movs	r3, #45	@ 0x2d
 800180a:	426d      	negs	r5, r5
 800180c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001810:	230a      	movs	r3, #10
 8001812:	4859      	ldr	r0, [pc, #356]	@ (8001978 <_printf_i+0x238>)
 8001814:	e011      	b.n	800183a <_printf_i+0xfa>
 8001816:	6821      	ldr	r1, [r4, #0]
 8001818:	6833      	ldr	r3, [r6, #0]
 800181a:	0608      	lsls	r0, r1, #24
 800181c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001820:	d402      	bmi.n	8001828 <_printf_i+0xe8>
 8001822:	0649      	lsls	r1, r1, #25
 8001824:	bf48      	it	mi
 8001826:	b2ad      	uxthmi	r5, r5
 8001828:	2f6f      	cmp	r7, #111	@ 0x6f
 800182a:	6033      	str	r3, [r6, #0]
 800182c:	bf14      	ite	ne
 800182e:	230a      	movne	r3, #10
 8001830:	2308      	moveq	r3, #8
 8001832:	4851      	ldr	r0, [pc, #324]	@ (8001978 <_printf_i+0x238>)
 8001834:	2100      	movs	r1, #0
 8001836:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800183a:	6866      	ldr	r6, [r4, #4]
 800183c:	2e00      	cmp	r6, #0
 800183e:	bfa8      	it	ge
 8001840:	6821      	ldrge	r1, [r4, #0]
 8001842:	60a6      	str	r6, [r4, #8]
 8001844:	bfa4      	itt	ge
 8001846:	f021 0104 	bicge.w	r1, r1, #4
 800184a:	6021      	strge	r1, [r4, #0]
 800184c:	b90d      	cbnz	r5, 8001852 <_printf_i+0x112>
 800184e:	2e00      	cmp	r6, #0
 8001850:	d04b      	beq.n	80018ea <_printf_i+0x1aa>
 8001852:	4616      	mov	r6, r2
 8001854:	fbb5 f1f3 	udiv	r1, r5, r3
 8001858:	fb03 5711 	mls	r7, r3, r1, r5
 800185c:	5dc7      	ldrb	r7, [r0, r7]
 800185e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001862:	462f      	mov	r7, r5
 8001864:	42bb      	cmp	r3, r7
 8001866:	460d      	mov	r5, r1
 8001868:	d9f4      	bls.n	8001854 <_printf_i+0x114>
 800186a:	2b08      	cmp	r3, #8
 800186c:	d10b      	bne.n	8001886 <_printf_i+0x146>
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	07df      	lsls	r7, r3, #31
 8001872:	d508      	bpl.n	8001886 <_printf_i+0x146>
 8001874:	6923      	ldr	r3, [r4, #16]
 8001876:	6861      	ldr	r1, [r4, #4]
 8001878:	4299      	cmp	r1, r3
 800187a:	bfde      	ittt	le
 800187c:	2330      	movle	r3, #48	@ 0x30
 800187e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001882:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001886:	1b92      	subs	r2, r2, r6
 8001888:	6122      	str	r2, [r4, #16]
 800188a:	464b      	mov	r3, r9
 800188c:	4621      	mov	r1, r4
 800188e:	4640      	mov	r0, r8
 8001890:	f8cd a000 	str.w	sl, [sp]
 8001894:	aa03      	add	r2, sp, #12
 8001896:	f7ff fee1 	bl	800165c <_printf_common>
 800189a:	3001      	adds	r0, #1
 800189c:	d14a      	bne.n	8001934 <_printf_i+0x1f4>
 800189e:	f04f 30ff 	mov.w	r0, #4294967295
 80018a2:	b004      	add	sp, #16
 80018a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018a8:	6823      	ldr	r3, [r4, #0]
 80018aa:	f043 0320 	orr.w	r3, r3, #32
 80018ae:	6023      	str	r3, [r4, #0]
 80018b0:	2778      	movs	r7, #120	@ 0x78
 80018b2:	4832      	ldr	r0, [pc, #200]	@ (800197c <_printf_i+0x23c>)
 80018b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	6831      	ldr	r1, [r6, #0]
 80018bc:	061f      	lsls	r7, r3, #24
 80018be:	f851 5b04 	ldr.w	r5, [r1], #4
 80018c2:	d402      	bmi.n	80018ca <_printf_i+0x18a>
 80018c4:	065f      	lsls	r7, r3, #25
 80018c6:	bf48      	it	mi
 80018c8:	b2ad      	uxthmi	r5, r5
 80018ca:	6031      	str	r1, [r6, #0]
 80018cc:	07d9      	lsls	r1, r3, #31
 80018ce:	bf44      	itt	mi
 80018d0:	f043 0320 	orrmi.w	r3, r3, #32
 80018d4:	6023      	strmi	r3, [r4, #0]
 80018d6:	b11d      	cbz	r5, 80018e0 <_printf_i+0x1a0>
 80018d8:	2310      	movs	r3, #16
 80018da:	e7ab      	b.n	8001834 <_printf_i+0xf4>
 80018dc:	4826      	ldr	r0, [pc, #152]	@ (8001978 <_printf_i+0x238>)
 80018de:	e7e9      	b.n	80018b4 <_printf_i+0x174>
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	f023 0320 	bic.w	r3, r3, #32
 80018e6:	6023      	str	r3, [r4, #0]
 80018e8:	e7f6      	b.n	80018d8 <_printf_i+0x198>
 80018ea:	4616      	mov	r6, r2
 80018ec:	e7bd      	b.n	800186a <_printf_i+0x12a>
 80018ee:	6833      	ldr	r3, [r6, #0]
 80018f0:	6825      	ldr	r5, [r4, #0]
 80018f2:	1d18      	adds	r0, r3, #4
 80018f4:	6961      	ldr	r1, [r4, #20]
 80018f6:	6030      	str	r0, [r6, #0]
 80018f8:	062e      	lsls	r6, r5, #24
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	d501      	bpl.n	8001902 <_printf_i+0x1c2>
 80018fe:	6019      	str	r1, [r3, #0]
 8001900:	e002      	b.n	8001908 <_printf_i+0x1c8>
 8001902:	0668      	lsls	r0, r5, #25
 8001904:	d5fb      	bpl.n	80018fe <_printf_i+0x1be>
 8001906:	8019      	strh	r1, [r3, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	4616      	mov	r6, r2
 800190c:	6123      	str	r3, [r4, #16]
 800190e:	e7bc      	b.n	800188a <_printf_i+0x14a>
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	2100      	movs	r1, #0
 8001914:	1d1a      	adds	r2, r3, #4
 8001916:	6032      	str	r2, [r6, #0]
 8001918:	681e      	ldr	r6, [r3, #0]
 800191a:	6862      	ldr	r2, [r4, #4]
 800191c:	4630      	mov	r0, r6
 800191e:	f000 f97b 	bl	8001c18 <memchr>
 8001922:	b108      	cbz	r0, 8001928 <_printf_i+0x1e8>
 8001924:	1b80      	subs	r0, r0, r6
 8001926:	6060      	str	r0, [r4, #4]
 8001928:	6863      	ldr	r3, [r4, #4]
 800192a:	6123      	str	r3, [r4, #16]
 800192c:	2300      	movs	r3, #0
 800192e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001932:	e7aa      	b.n	800188a <_printf_i+0x14a>
 8001934:	4632      	mov	r2, r6
 8001936:	4649      	mov	r1, r9
 8001938:	4640      	mov	r0, r8
 800193a:	6923      	ldr	r3, [r4, #16]
 800193c:	47d0      	blx	sl
 800193e:	3001      	adds	r0, #1
 8001940:	d0ad      	beq.n	800189e <_printf_i+0x15e>
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	079b      	lsls	r3, r3, #30
 8001946:	d413      	bmi.n	8001970 <_printf_i+0x230>
 8001948:	68e0      	ldr	r0, [r4, #12]
 800194a:	9b03      	ldr	r3, [sp, #12]
 800194c:	4298      	cmp	r0, r3
 800194e:	bfb8      	it	lt
 8001950:	4618      	movlt	r0, r3
 8001952:	e7a6      	b.n	80018a2 <_printf_i+0x162>
 8001954:	2301      	movs	r3, #1
 8001956:	4632      	mov	r2, r6
 8001958:	4649      	mov	r1, r9
 800195a:	4640      	mov	r0, r8
 800195c:	47d0      	blx	sl
 800195e:	3001      	adds	r0, #1
 8001960:	d09d      	beq.n	800189e <_printf_i+0x15e>
 8001962:	3501      	adds	r5, #1
 8001964:	68e3      	ldr	r3, [r4, #12]
 8001966:	9903      	ldr	r1, [sp, #12]
 8001968:	1a5b      	subs	r3, r3, r1
 800196a:	42ab      	cmp	r3, r5
 800196c:	dcf2      	bgt.n	8001954 <_printf_i+0x214>
 800196e:	e7eb      	b.n	8001948 <_printf_i+0x208>
 8001970:	2500      	movs	r5, #0
 8001972:	f104 0619 	add.w	r6, r4, #25
 8001976:	e7f5      	b.n	8001964 <_printf_i+0x224>
 8001978:	08001d73 	.word	0x08001d73
 800197c:	08001d84 	.word	0x08001d84

08001980 <__sflush_r>:
 8001980:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001986:	0716      	lsls	r6, r2, #28
 8001988:	4605      	mov	r5, r0
 800198a:	460c      	mov	r4, r1
 800198c:	d454      	bmi.n	8001a38 <__sflush_r+0xb8>
 800198e:	684b      	ldr	r3, [r1, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	dc02      	bgt.n	800199a <__sflush_r+0x1a>
 8001994:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001996:	2b00      	cmp	r3, #0
 8001998:	dd48      	ble.n	8001a2c <__sflush_r+0xac>
 800199a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800199c:	2e00      	cmp	r6, #0
 800199e:	d045      	beq.n	8001a2c <__sflush_r+0xac>
 80019a0:	2300      	movs	r3, #0
 80019a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80019a6:	682f      	ldr	r7, [r5, #0]
 80019a8:	6a21      	ldr	r1, [r4, #32]
 80019aa:	602b      	str	r3, [r5, #0]
 80019ac:	d030      	beq.n	8001a10 <__sflush_r+0x90>
 80019ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80019b0:	89a3      	ldrh	r3, [r4, #12]
 80019b2:	0759      	lsls	r1, r3, #29
 80019b4:	d505      	bpl.n	80019c2 <__sflush_r+0x42>
 80019b6:	6863      	ldr	r3, [r4, #4]
 80019b8:	1ad2      	subs	r2, r2, r3
 80019ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80019bc:	b10b      	cbz	r3, 80019c2 <__sflush_r+0x42>
 80019be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80019c0:	1ad2      	subs	r2, r2, r3
 80019c2:	2300      	movs	r3, #0
 80019c4:	4628      	mov	r0, r5
 80019c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80019c8:	6a21      	ldr	r1, [r4, #32]
 80019ca:	47b0      	blx	r6
 80019cc:	1c43      	adds	r3, r0, #1
 80019ce:	89a3      	ldrh	r3, [r4, #12]
 80019d0:	d106      	bne.n	80019e0 <__sflush_r+0x60>
 80019d2:	6829      	ldr	r1, [r5, #0]
 80019d4:	291d      	cmp	r1, #29
 80019d6:	d82b      	bhi.n	8001a30 <__sflush_r+0xb0>
 80019d8:	4a28      	ldr	r2, [pc, #160]	@ (8001a7c <__sflush_r+0xfc>)
 80019da:	410a      	asrs	r2, r1
 80019dc:	07d6      	lsls	r6, r2, #31
 80019de:	d427      	bmi.n	8001a30 <__sflush_r+0xb0>
 80019e0:	2200      	movs	r2, #0
 80019e2:	6062      	str	r2, [r4, #4]
 80019e4:	6922      	ldr	r2, [r4, #16]
 80019e6:	04d9      	lsls	r1, r3, #19
 80019e8:	6022      	str	r2, [r4, #0]
 80019ea:	d504      	bpl.n	80019f6 <__sflush_r+0x76>
 80019ec:	1c42      	adds	r2, r0, #1
 80019ee:	d101      	bne.n	80019f4 <__sflush_r+0x74>
 80019f0:	682b      	ldr	r3, [r5, #0]
 80019f2:	b903      	cbnz	r3, 80019f6 <__sflush_r+0x76>
 80019f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80019f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80019f8:	602f      	str	r7, [r5, #0]
 80019fa:	b1b9      	cbz	r1, 8001a2c <__sflush_r+0xac>
 80019fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a00:	4299      	cmp	r1, r3
 8001a02:	d002      	beq.n	8001a0a <__sflush_r+0x8a>
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7ff fbf3 	bl	80011f0 <_free_r>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a0e:	e00d      	b.n	8001a2c <__sflush_r+0xac>
 8001a10:	2301      	movs	r3, #1
 8001a12:	4628      	mov	r0, r5
 8001a14:	47b0      	blx	r6
 8001a16:	4602      	mov	r2, r0
 8001a18:	1c50      	adds	r0, r2, #1
 8001a1a:	d1c9      	bne.n	80019b0 <__sflush_r+0x30>
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0c6      	beq.n	80019b0 <__sflush_r+0x30>
 8001a22:	2b1d      	cmp	r3, #29
 8001a24:	d001      	beq.n	8001a2a <__sflush_r+0xaa>
 8001a26:	2b16      	cmp	r3, #22
 8001a28:	d11d      	bne.n	8001a66 <__sflush_r+0xe6>
 8001a2a:	602f      	str	r7, [r5, #0]
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	e021      	b.n	8001a74 <__sflush_r+0xf4>
 8001a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a34:	b21b      	sxth	r3, r3
 8001a36:	e01a      	b.n	8001a6e <__sflush_r+0xee>
 8001a38:	690f      	ldr	r7, [r1, #16]
 8001a3a:	2f00      	cmp	r7, #0
 8001a3c:	d0f6      	beq.n	8001a2c <__sflush_r+0xac>
 8001a3e:	0793      	lsls	r3, r2, #30
 8001a40:	bf18      	it	ne
 8001a42:	2300      	movne	r3, #0
 8001a44:	680e      	ldr	r6, [r1, #0]
 8001a46:	bf08      	it	eq
 8001a48:	694b      	ldreq	r3, [r1, #20]
 8001a4a:	1bf6      	subs	r6, r6, r7
 8001a4c:	600f      	str	r7, [r1, #0]
 8001a4e:	608b      	str	r3, [r1, #8]
 8001a50:	2e00      	cmp	r6, #0
 8001a52:	ddeb      	ble.n	8001a2c <__sflush_r+0xac>
 8001a54:	4633      	mov	r3, r6
 8001a56:	463a      	mov	r2, r7
 8001a58:	4628      	mov	r0, r5
 8001a5a:	6a21      	ldr	r1, [r4, #32]
 8001a5c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001a60:	47e0      	blx	ip
 8001a62:	2800      	cmp	r0, #0
 8001a64:	dc07      	bgt.n	8001a76 <__sflush_r+0xf6>
 8001a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a72:	81a3      	strh	r3, [r4, #12]
 8001a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a76:	4407      	add	r7, r0
 8001a78:	1a36      	subs	r6, r6, r0
 8001a7a:	e7e9      	b.n	8001a50 <__sflush_r+0xd0>
 8001a7c:	dfbffffe 	.word	0xdfbffffe

08001a80 <_fflush_r>:
 8001a80:	b538      	push	{r3, r4, r5, lr}
 8001a82:	690b      	ldr	r3, [r1, #16]
 8001a84:	4605      	mov	r5, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	b913      	cbnz	r3, 8001a90 <_fflush_r+0x10>
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	bd38      	pop	{r3, r4, r5, pc}
 8001a90:	b118      	cbz	r0, 8001a9a <_fflush_r+0x1a>
 8001a92:	6a03      	ldr	r3, [r0, #32]
 8001a94:	b90b      	cbnz	r3, 8001a9a <_fflush_r+0x1a>
 8001a96:	f7ff faa3 	bl	8000fe0 <__sinit>
 8001a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f3      	beq.n	8001a8a <_fflush_r+0xa>
 8001aa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001aa4:	07d0      	lsls	r0, r2, #31
 8001aa6:	d404      	bmi.n	8001ab2 <_fflush_r+0x32>
 8001aa8:	0599      	lsls	r1, r3, #22
 8001aaa:	d402      	bmi.n	8001ab2 <_fflush_r+0x32>
 8001aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001aae:	f7ff fb9c 	bl	80011ea <__retarget_lock_acquire_recursive>
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	f7ff ff63 	bl	8001980 <__sflush_r>
 8001aba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001abc:	4605      	mov	r5, r0
 8001abe:	07da      	lsls	r2, r3, #31
 8001ac0:	d4e4      	bmi.n	8001a8c <_fflush_r+0xc>
 8001ac2:	89a3      	ldrh	r3, [r4, #12]
 8001ac4:	059b      	lsls	r3, r3, #22
 8001ac6:	d4e1      	bmi.n	8001a8c <_fflush_r+0xc>
 8001ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001aca:	f7ff fb8f 	bl	80011ec <__retarget_lock_release_recursive>
 8001ace:	e7dd      	b.n	8001a8c <_fflush_r+0xc>

08001ad0 <__swbuf_r>:
 8001ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad2:	460e      	mov	r6, r1
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	4605      	mov	r5, r0
 8001ad8:	b118      	cbz	r0, 8001ae2 <__swbuf_r+0x12>
 8001ada:	6a03      	ldr	r3, [r0, #32]
 8001adc:	b90b      	cbnz	r3, 8001ae2 <__swbuf_r+0x12>
 8001ade:	f7ff fa7f 	bl	8000fe0 <__sinit>
 8001ae2:	69a3      	ldr	r3, [r4, #24]
 8001ae4:	60a3      	str	r3, [r4, #8]
 8001ae6:	89a3      	ldrh	r3, [r4, #12]
 8001ae8:	071a      	lsls	r2, r3, #28
 8001aea:	d501      	bpl.n	8001af0 <__swbuf_r+0x20>
 8001aec:	6923      	ldr	r3, [r4, #16]
 8001aee:	b943      	cbnz	r3, 8001b02 <__swbuf_r+0x32>
 8001af0:	4621      	mov	r1, r4
 8001af2:	4628      	mov	r0, r5
 8001af4:	f000 f82a 	bl	8001b4c <__swsetup_r>
 8001af8:	b118      	cbz	r0, 8001b02 <__swbuf_r+0x32>
 8001afa:	f04f 37ff 	mov.w	r7, #4294967295
 8001afe:	4638      	mov	r0, r7
 8001b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	6922      	ldr	r2, [r4, #16]
 8001b06:	b2f6      	uxtb	r6, r6
 8001b08:	1a98      	subs	r0, r3, r2
 8001b0a:	6963      	ldr	r3, [r4, #20]
 8001b0c:	4637      	mov	r7, r6
 8001b0e:	4283      	cmp	r3, r0
 8001b10:	dc05      	bgt.n	8001b1e <__swbuf_r+0x4e>
 8001b12:	4621      	mov	r1, r4
 8001b14:	4628      	mov	r0, r5
 8001b16:	f7ff ffb3 	bl	8001a80 <_fflush_r>
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d1ed      	bne.n	8001afa <__swbuf_r+0x2a>
 8001b1e:	68a3      	ldr	r3, [r4, #8]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	60a3      	str	r3, [r4, #8]
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	6022      	str	r2, [r4, #0]
 8001b2a:	701e      	strb	r6, [r3, #0]
 8001b2c:	6962      	ldr	r2, [r4, #20]
 8001b2e:	1c43      	adds	r3, r0, #1
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d004      	beq.n	8001b3e <__swbuf_r+0x6e>
 8001b34:	89a3      	ldrh	r3, [r4, #12]
 8001b36:	07db      	lsls	r3, r3, #31
 8001b38:	d5e1      	bpl.n	8001afe <__swbuf_r+0x2e>
 8001b3a:	2e0a      	cmp	r6, #10
 8001b3c:	d1df      	bne.n	8001afe <__swbuf_r+0x2e>
 8001b3e:	4621      	mov	r1, r4
 8001b40:	4628      	mov	r0, r5
 8001b42:	f7ff ff9d 	bl	8001a80 <_fflush_r>
 8001b46:	2800      	cmp	r0, #0
 8001b48:	d0d9      	beq.n	8001afe <__swbuf_r+0x2e>
 8001b4a:	e7d6      	b.n	8001afa <__swbuf_r+0x2a>

08001b4c <__swsetup_r>:
 8001b4c:	b538      	push	{r3, r4, r5, lr}
 8001b4e:	4b29      	ldr	r3, [pc, #164]	@ (8001bf4 <__swsetup_r+0xa8>)
 8001b50:	4605      	mov	r5, r0
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	460c      	mov	r4, r1
 8001b56:	b118      	cbz	r0, 8001b60 <__swsetup_r+0x14>
 8001b58:	6a03      	ldr	r3, [r0, #32]
 8001b5a:	b90b      	cbnz	r3, 8001b60 <__swsetup_r+0x14>
 8001b5c:	f7ff fa40 	bl	8000fe0 <__sinit>
 8001b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b64:	0719      	lsls	r1, r3, #28
 8001b66:	d422      	bmi.n	8001bae <__swsetup_r+0x62>
 8001b68:	06da      	lsls	r2, r3, #27
 8001b6a:	d407      	bmi.n	8001b7c <__swsetup_r+0x30>
 8001b6c:	2209      	movs	r2, #9
 8001b6e:	602a      	str	r2, [r5, #0]
 8001b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	81a3      	strh	r3, [r4, #12]
 8001b7a:	e033      	b.n	8001be4 <__swsetup_r+0x98>
 8001b7c:	0758      	lsls	r0, r3, #29
 8001b7e:	d512      	bpl.n	8001ba6 <__swsetup_r+0x5a>
 8001b80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b82:	b141      	cbz	r1, 8001b96 <__swsetup_r+0x4a>
 8001b84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b88:	4299      	cmp	r1, r3
 8001b8a:	d002      	beq.n	8001b92 <__swsetup_r+0x46>
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f7ff fb2f 	bl	80011f0 <_free_r>
 8001b92:	2300      	movs	r3, #0
 8001b94:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b96:	89a3      	ldrh	r3, [r4, #12]
 8001b98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b9c:	81a3      	strh	r3, [r4, #12]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	6063      	str	r3, [r4, #4]
 8001ba2:	6923      	ldr	r3, [r4, #16]
 8001ba4:	6023      	str	r3, [r4, #0]
 8001ba6:	89a3      	ldrh	r3, [r4, #12]
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	81a3      	strh	r3, [r4, #12]
 8001bae:	6923      	ldr	r3, [r4, #16]
 8001bb0:	b94b      	cbnz	r3, 8001bc6 <__swsetup_r+0x7a>
 8001bb2:	89a3      	ldrh	r3, [r4, #12]
 8001bb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bbc:	d003      	beq.n	8001bc6 <__swsetup_r+0x7a>
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	4628      	mov	r0, r5
 8001bc2:	f000 f85c 	bl	8001c7e <__smakebuf_r>
 8001bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bca:	f013 0201 	ands.w	r2, r3, #1
 8001bce:	d00a      	beq.n	8001be6 <__swsetup_r+0x9a>
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60a2      	str	r2, [r4, #8]
 8001bd4:	6962      	ldr	r2, [r4, #20]
 8001bd6:	4252      	negs	r2, r2
 8001bd8:	61a2      	str	r2, [r4, #24]
 8001bda:	6922      	ldr	r2, [r4, #16]
 8001bdc:	b942      	cbnz	r2, 8001bf0 <__swsetup_r+0xa4>
 8001bde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001be2:	d1c5      	bne.n	8001b70 <__swsetup_r+0x24>
 8001be4:	bd38      	pop	{r3, r4, r5, pc}
 8001be6:	0799      	lsls	r1, r3, #30
 8001be8:	bf58      	it	pl
 8001bea:	6962      	ldrpl	r2, [r4, #20]
 8001bec:	60a2      	str	r2, [r4, #8]
 8001bee:	e7f4      	b.n	8001bda <__swsetup_r+0x8e>
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e7f7      	b.n	8001be4 <__swsetup_r+0x98>
 8001bf4:	2000001c 	.word	0x2000001c

08001bf8 <_sbrk_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	4d05      	ldr	r5, [pc, #20]	@ (8001c14 <_sbrk_r+0x1c>)
 8001bfe:	4604      	mov	r4, r0
 8001c00:	4608      	mov	r0, r1
 8001c02:	602b      	str	r3, [r5, #0]
 8001c04:	f7ff f900 	bl	8000e08 <_sbrk>
 8001c08:	1c43      	adds	r3, r0, #1
 8001c0a:	d102      	bne.n	8001c12 <_sbrk_r+0x1a>
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	b103      	cbz	r3, 8001c12 <_sbrk_r+0x1a>
 8001c10:	6023      	str	r3, [r4, #0]
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
 8001c14:	200001e0 	.word	0x200001e0

08001c18 <memchr>:
 8001c18:	4603      	mov	r3, r0
 8001c1a:	b510      	push	{r4, lr}
 8001c1c:	b2c9      	uxtb	r1, r1
 8001c1e:	4402      	add	r2, r0
 8001c20:	4293      	cmp	r3, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	d101      	bne.n	8001c2a <memchr+0x12>
 8001c26:	2000      	movs	r0, #0
 8001c28:	e003      	b.n	8001c32 <memchr+0x1a>
 8001c2a:	7804      	ldrb	r4, [r0, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	428c      	cmp	r4, r1
 8001c30:	d1f6      	bne.n	8001c20 <memchr+0x8>
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <__swhatbuf_r>:
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	460c      	mov	r4, r1
 8001c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c3c:	4615      	mov	r5, r2
 8001c3e:	2900      	cmp	r1, #0
 8001c40:	461e      	mov	r6, r3
 8001c42:	b096      	sub	sp, #88	@ 0x58
 8001c44:	da0c      	bge.n	8001c60 <__swhatbuf_r+0x2c>
 8001c46:	89a3      	ldrh	r3, [r4, #12]
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001c4e:	bf14      	ite	ne
 8001c50:	2340      	movne	r3, #64	@ 0x40
 8001c52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001c56:	2000      	movs	r0, #0
 8001c58:	6031      	str	r1, [r6, #0]
 8001c5a:	602b      	str	r3, [r5, #0]
 8001c5c:	b016      	add	sp, #88	@ 0x58
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
 8001c60:	466a      	mov	r2, sp
 8001c62:	f000 f849 	bl	8001cf8 <_fstat_r>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	dbed      	blt.n	8001c46 <__swhatbuf_r+0x12>
 8001c6a:	9901      	ldr	r1, [sp, #4]
 8001c6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001c70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001c74:	4259      	negs	r1, r3
 8001c76:	4159      	adcs	r1, r3
 8001c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c7c:	e7eb      	b.n	8001c56 <__swhatbuf_r+0x22>

08001c7e <__smakebuf_r>:
 8001c7e:	898b      	ldrh	r3, [r1, #12]
 8001c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c82:	079d      	lsls	r5, r3, #30
 8001c84:	4606      	mov	r6, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	d507      	bpl.n	8001c9a <__smakebuf_r+0x1c>
 8001c8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001c8e:	6023      	str	r3, [r4, #0]
 8001c90:	6123      	str	r3, [r4, #16]
 8001c92:	2301      	movs	r3, #1
 8001c94:	6163      	str	r3, [r4, #20]
 8001c96:	b003      	add	sp, #12
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9a:	466a      	mov	r2, sp
 8001c9c:	ab01      	add	r3, sp, #4
 8001c9e:	f7ff ffc9 	bl	8001c34 <__swhatbuf_r>
 8001ca2:	9f00      	ldr	r7, [sp, #0]
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	4639      	mov	r1, r7
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f7ff fb0b 	bl	80012c4 <_malloc_r>
 8001cae:	b948      	cbnz	r0, 8001cc4 <__smakebuf_r+0x46>
 8001cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cb4:	059a      	lsls	r2, r3, #22
 8001cb6:	d4ee      	bmi.n	8001c96 <__smakebuf_r+0x18>
 8001cb8:	f023 0303 	bic.w	r3, r3, #3
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	81a3      	strh	r3, [r4, #12]
 8001cc2:	e7e2      	b.n	8001c8a <__smakebuf_r+0xc>
 8001cc4:	89a3      	ldrh	r3, [r4, #12]
 8001cc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cce:	81a3      	strh	r3, [r4, #12]
 8001cd0:	9b01      	ldr	r3, [sp, #4]
 8001cd2:	6020      	str	r0, [r4, #0]
 8001cd4:	b15b      	cbz	r3, 8001cee <__smakebuf_r+0x70>
 8001cd6:	4630      	mov	r0, r6
 8001cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cdc:	f000 f81e 	bl	8001d1c <_isatty_r>
 8001ce0:	b128      	cbz	r0, 8001cee <__smakebuf_r+0x70>
 8001ce2:	89a3      	ldrh	r3, [r4, #12]
 8001ce4:	f023 0303 	bic.w	r3, r3, #3
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	81a3      	strh	r3, [r4, #12]
 8001cee:	89a3      	ldrh	r3, [r4, #12]
 8001cf0:	431d      	orrs	r5, r3
 8001cf2:	81a5      	strh	r5, [r4, #12]
 8001cf4:	e7cf      	b.n	8001c96 <__smakebuf_r+0x18>
	...

08001cf8 <_fstat_r>:
 8001cf8:	b538      	push	{r3, r4, r5, lr}
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	4d06      	ldr	r5, [pc, #24]	@ (8001d18 <_fstat_r+0x20>)
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	602b      	str	r3, [r5, #0]
 8001d06:	f7ff f859 	bl	8000dbc <_fstat>
 8001d0a:	1c43      	adds	r3, r0, #1
 8001d0c:	d102      	bne.n	8001d14 <_fstat_r+0x1c>
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	b103      	cbz	r3, 8001d14 <_fstat_r+0x1c>
 8001d12:	6023      	str	r3, [r4, #0]
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
 8001d16:	bf00      	nop
 8001d18:	200001e0 	.word	0x200001e0

08001d1c <_isatty_r>:
 8001d1c:	b538      	push	{r3, r4, r5, lr}
 8001d1e:	2300      	movs	r3, #0
 8001d20:	4d05      	ldr	r5, [pc, #20]	@ (8001d38 <_isatty_r+0x1c>)
 8001d22:	4604      	mov	r4, r0
 8001d24:	4608      	mov	r0, r1
 8001d26:	602b      	str	r3, [r5, #0]
 8001d28:	f7ff f857 	bl	8000dda <_isatty>
 8001d2c:	1c43      	adds	r3, r0, #1
 8001d2e:	d102      	bne.n	8001d36 <_isatty_r+0x1a>
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	b103      	cbz	r3, 8001d36 <_isatty_r+0x1a>
 8001d34:	6023      	str	r3, [r4, #0]
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	200001e0 	.word	0x200001e0

08001d3c <_init>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	bf00      	nop
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr

08001d48 <_fini>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	bf00      	nop
 8001d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4e:	bc08      	pop	{r3}
 8001d50:	469e      	mov	lr, r3
 8001d52:	4770      	bx	lr
